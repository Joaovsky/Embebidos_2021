
Project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e2b4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000530  0800e4b8  0800e4b8  0001e4b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e9e8  0800e9e8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e9e8  0800e9e8  0001e9e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e9f0  0800e9f0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e9f0  0800e9f0  0001e9f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e9f4  0800e9f4  0001e9f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800e9f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004840  200001e4  0800ebdc  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a24  0800ebdc  00024a24  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002660e  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004dee  00000000  00000000  00046820  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b80  00000000  00000000  0004b610  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001918  00000000  00000000  0004d190  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d513  00000000  00000000  0004eaa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001d7a0  00000000  00000000  0007bfbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00107d16  00000000  00000000  0009975b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a1471  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007fc8  00000000  00000000  001a14ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e4 	.word	0x200001e4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800e49c 	.word	0x0800e49c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e8 	.word	0x200001e8
 800023c:	0800e49c 	.word	0x0800e49c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295
 800030e:	f000 b9bd 	b.w	800068c <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <main_vars_inti>:
#include "Sys.h"


vars_t _mains;

void main_vars_inti(void){
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
	_mains._fl_changed=0;
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <main_vars_inti+0x58>)
 8000696:	2200      	movs	r2, #0
 8000698:	701a      	strb	r2, [r3, #0]
	_mains._fl_sys_changed=0;
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <main_vars_inti+0x58>)
 800069c:	2200      	movs	r2, #0
 800069e:	705a      	strb	r2, [r3, #1]
	_mains._fl_motor_control=1;
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <main_vars_inti+0x58>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	709a      	strb	r2, [r3, #2]
	_mains._fl_motor_blocked=0;
 80006a6:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <main_vars_inti+0x58>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	70da      	strb	r2, [r3, #3]
	_mains._fl_fan_control=1;
 80006ac:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <main_vars_inti+0x58>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	711a      	strb	r2, [r3, #4]
	_mains._fl_lux_mode=0;
 80006b2:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <main_vars_inti+0x58>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	715a      	strb	r2, [r3, #5]
	_mains._fl_states_rl=0;
 80006b8:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <main_vars_inti+0x58>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	719a      	strb	r2, [r3, #6]
	_mains._actual_temp=0;
 80006be:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <main_vars_inti+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	811a      	strh	r2, [r3, #8]
	_mains._setpoint_temp=0;
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <main_vars_inti+0x58>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	729a      	strb	r2, [r3, #10]
	_mains._actual_lux=0;
 80006ca:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <main_vars_inti+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	819a      	strh	r2, [r3, #12]
	_mains._setpoint_lux=0;
 80006d0:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <main_vars_inti+0x58>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	739a      	strb	r2, [r3, #14]
	_mains._actual_humm=0;
 80006d6:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <main_vars_inti+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	73da      	strb	r2, [r3, #15]
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	20004710 	.word	0x20004710

080006ec <actuate_light>:
    PE13     ------> TIM1_CH3	//fan
    PE14     ------> TIM1_CH4	//heating
    PB1		 ------> TIM3_CH4	//ligt
*/

bool actuate_light(uint8_t pwm){
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
	if((pwm>=0)&&(pwm<=100)){
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	2b64      	cmp	r3, #100	; 0x64
 80006fa:	d801      	bhi.n	8000700 <actuate_light+0x14>
//		htim3.Instance->CCR4=pwm*10;
		return true;
 80006fc:	2301      	movs	r3, #1
 80006fe:	e000      	b.n	8000702 <actuate_light+0x16>
	}
return false;
 8000700:	2300      	movs	r3, #0

}
 8000702:	4618      	mov	r0, r3
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
	...

08000710 <BME280_Init>:

/****************** Global Function Definitions *******************************/



void BME280_Init(void){
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	  /* BME280 ÃÊ±âÈ­ */

	    dev.dev_id = BME280_I2C_ADDR_PRIM;
 8000714:	4b17      	ldr	r3, [pc, #92]	; (8000774 <BME280_Init+0x64>)
 8000716:	2276      	movs	r2, #118	; 0x76
 8000718:	705a      	strb	r2, [r3, #1]
	    dev.intf = BME280_I2C_INTF;
 800071a:	4b16      	ldr	r3, [pc, #88]	; (8000774 <BME280_Init+0x64>)
 800071c:	2201      	movs	r2, #1
 800071e:	709a      	strb	r2, [r3, #2]
	    dev.read = user_i2c_read;
 8000720:	4b14      	ldr	r3, [pc, #80]	; (8000774 <BME280_Init+0x64>)
 8000722:	4a15      	ldr	r2, [pc, #84]	; (8000778 <BME280_Init+0x68>)
 8000724:	605a      	str	r2, [r3, #4]
	    dev.write = user_i2c_write;
 8000726:	4b13      	ldr	r3, [pc, #76]	; (8000774 <BME280_Init+0x64>)
 8000728:	4a14      	ldr	r2, [pc, #80]	; (800077c <BME280_Init+0x6c>)
 800072a:	609a      	str	r2, [r3, #8]
	    dev.delay_ms = user_delay_ms;
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <BME280_Init+0x64>)
 800072e:	4a14      	ldr	r2, [pc, #80]	; (8000780 <BME280_Init+0x70>)
 8000730:	60da      	str	r2, [r3, #12]

	    rslt = bme280_init(&dev);
 8000732:	4810      	ldr	r0, [pc, #64]	; (8000774 <BME280_Init+0x64>)
 8000734:	f000 f828 	bl	8000788 <bme280_init>
 8000738:	4603      	mov	r3, r0
 800073a:	461a      	mov	r2, r3
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <BME280_Init+0x74>)
 800073e:	701a      	strb	r2, [r3, #0]

	    /* BME280 ¼³Á¤*/
	    dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <BME280_Init+0x64>)
 8000742:	2201      	movs	r2, #1
 8000744:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	    dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <BME280_Init+0x64>)
 800074a:	2205      	movs	r2, #5
 800074c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	    dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <BME280_Init+0x64>)
 8000752:	2202      	movs	r2, #2
 8000754:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	    dev.settings.filter = BME280_FILTER_COEFF_16;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <BME280_Init+0x64>)
 800075a:	2204      	movs	r2, #4
 800075c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	    rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8000760:	4904      	ldr	r1, [pc, #16]	; (8000774 <BME280_Init+0x64>)
 8000762:	200f      	movs	r0, #15
 8000764:	f000 f904 	bl	8000970 <bme280_set_sensor_settings>
 8000768:	4603      	mov	r3, r0
 800076a:	461a      	mov	r2, r3
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <BME280_Init+0x74>)
 800076e:	701a      	strb	r2, [r3, #0]

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20004720 	.word	0x20004720
 8000778:	08002a59 	.word	0x08002a59
 800077c:	08002ae1 	.word	0x08002ae1
 8000780:	08002ac9 	.word	0x08002ac9
 8000784:	20004760 	.word	0x20004760

08000788 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8000790:	2305      	movs	r3, #5
 8000792:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f001 f985 	bl	8001aa8 <null_ptr_check>
 800079e:	4603      	mov	r3, r0
 80007a0:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 80007a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d133      	bne.n	8000812 <bme280_init+0x8a>
		while (try_count) {
 80007aa:	e028      	b.n	80007fe <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 80007ac:	f107 010d 	add.w	r1, r7, #13
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2201      	movs	r2, #1
 80007b4:	20d0      	movs	r0, #208	; 0xd0
 80007b6:	f000 f832 	bl	800081e <bme280_get_regs>
 80007ba:	4603      	mov	r3, r0
 80007bc:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 80007be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d114      	bne.n	80007f0 <bme280_init+0x68>
 80007c6:	7b7b      	ldrb	r3, [r7, #13]
 80007c8:	2b60      	cmp	r3, #96	; 0x60
 80007ca:	d111      	bne.n	80007f0 <bme280_init+0x68>
				dev->chip_id = chip_id;
 80007cc:	7b7a      	ldrb	r2, [r7, #13]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f000 f978 	bl	8000ac8 <bme280_soft_reset>
 80007d8:	4603      	mov	r3, r0
 80007da:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 80007dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d110      	bne.n	8000806 <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f000 ffd7 	bl	8001798 <get_calib_data>
 80007ea:	4603      	mov	r3, r0
 80007ec:	73fb      	strb	r3, [r7, #15]
				}
				break;
 80007ee:	e00a      	b.n	8000806 <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	2001      	movs	r0, #1
 80007f6:	4798      	blx	r3
			--try_count;
 80007f8:	7bbb      	ldrb	r3, [r7, #14]
 80007fa:	3b01      	subs	r3, #1
 80007fc:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 80007fe:	7bbb      	ldrb	r3, [r7, #14]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d1d3      	bne.n	80007ac <bme280_init+0x24>
 8000804:	e000      	b.n	8000808 <bme280_init+0x80>
				break;
 8000806:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 8000808:	7bbb      	ldrb	r3, [r7, #14]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d101      	bne.n	8000812 <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 800080e:	23fe      	movs	r3, #254	; 0xfe
 8000810:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8000812:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000816:	4618      	mov	r0, r3
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 800081e:	b590      	push	{r4, r7, lr}
 8000820:	b087      	sub	sp, #28
 8000822:	af00      	add	r7, sp, #0
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	4603      	mov	r3, r0
 800082a:	73fb      	strb	r3, [r7, #15]
 800082c:	4613      	mov	r3, r2
 800082e:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f001 f939 	bl	8001aa8 <null_ptr_check>
 8000836:	4603      	mov	r3, r0
 8000838:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800083a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d117      	bne.n	8000872 <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	789b      	ldrb	r3, [r3, #2]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d003      	beq.n	8000852 <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000850:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	685c      	ldr	r4, [r3, #4]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	7858      	ldrb	r0, [r3, #1]
 800085a:	89bb      	ldrh	r3, [r7, #12]
 800085c:	7bf9      	ldrb	r1, [r7, #15]
 800085e:	68ba      	ldr	r2, [r7, #8]
 8000860:	47a0      	blx	r4
 8000862:	4603      	mov	r3, r0
 8000864:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 8000866:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 800086e:	23fc      	movs	r3, #252	; 0xfc
 8000870:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8000872:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000876:	4618      	mov	r0, r3
 8000878:	371c      	adds	r7, #28
 800087a:	46bd      	mov	sp, r7
 800087c:	bd90      	pop	{r4, r7, pc}

0800087e <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 800087e:	b590      	push	{r4, r7, lr}
 8000880:	b08d      	sub	sp, #52	; 0x34
 8000882:	af00      	add	r7, sp, #0
 8000884:	60f8      	str	r0, [r7, #12]
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	4613      	mov	r3, r2
 800088c:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2b0a      	cmp	r3, #10
 8000892:	d901      	bls.n	8000898 <bme280_set_regs+0x1a>
		len = 10;
 8000894:	230a      	movs	r3, #10
 8000896:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000898:	6838      	ldr	r0, [r7, #0]
 800089a:	f001 f905 	bl	8001aa8 <null_ptr_check>
 800089e:	4603      	mov	r3, r0
 80008a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 80008a4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d156      	bne.n	800095a <bme280_set_regs+0xdc>
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d053      	beq.n	800095a <bme280_set_regs+0xdc>
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d050      	beq.n	800095a <bme280_set_regs+0xdc>
		if (len != 0) {
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d049      	beq.n	8000952 <bme280_set_regs+0xd4>
			temp_buff[0] = reg_data[0];
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	789b      	ldrb	r3, [r3, #2]
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d01a      	beq.n	8000902 <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80008cc:	2300      	movs	r3, #0
 80008ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80008d2:	e011      	b.n	80008f8 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80008d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80008d8:	68fa      	ldr	r2, [r7, #12]
 80008da:	4413      	add	r3, r2
 80008dc:	781a      	ldrb	r2, [r3, #0]
 80008de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80008e2:	68f9      	ldr	r1, [r7, #12]
 80008e4:	440b      	add	r3, r1
 80008e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80008ea:	b2d2      	uxtb	r2, r2
 80008ec:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80008ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80008f2:	3301      	adds	r3, #1
 80008f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80008f8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	429a      	cmp	r2, r3
 8000900:	d3e8      	bcc.n	80008d4 <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d90d      	bls.n	8000924 <bme280_set_regs+0xa6>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	f107 0114 	add.w	r1, r7, #20
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	68f8      	ldr	r0, [r7, #12]
 8000912:	f000 ff85 	bl	8001820 <interleave_reg_addr>
				temp_len = ((len * 2) - 1);
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	b29b      	uxth	r3, r3
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	b29b      	uxth	r3, r3
 800091e:	3b01      	subs	r3, #1
 8000920:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000922:	e001      	b.n	8000928 <bme280_set_regs+0xaa>
			} else {
				temp_len = len;
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	85bb      	strh	r3, [r7, #44]	; 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	689c      	ldr	r4, [r3, #8]
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	7858      	ldrb	r0, [r3, #1]
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	7819      	ldrb	r1, [r3, #0]
 8000934:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000936:	f107 0214 	add.w	r2, r7, #20
 800093a:	47a0      	blx	r4
 800093c:	4603      	mov	r3, r0
 800093e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 8000942:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000946:	2b00      	cmp	r3, #0
 8000948:	d00b      	beq.n	8000962 <bme280_set_regs+0xe4>
				rslt = BME280_E_COMM_FAIL;
 800094a:	23fc      	movs	r3, #252	; 0xfc
 800094c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8000950:	e007      	b.n	8000962 <bme280_set_regs+0xe4>
		} else {
			rslt = BME280_E_INVALID_LEN;
 8000952:	23fd      	movs	r3, #253	; 0xfd
 8000954:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8000958:	e003      	b.n	8000962 <bme280_set_regs+0xe4>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 800095a:	23ff      	movs	r3, #255	; 0xff
 800095c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000960:	e000      	b.n	8000964 <bme280_set_regs+0xe6>
		if (len != 0) {
 8000962:	bf00      	nop
	}


	return rslt;
 8000964:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8000968:	4618      	mov	r0, r3
 800096a:	3734      	adds	r7, #52	; 0x34
 800096c:	46bd      	mov	sp, r7
 800096e:	bd90      	pop	{r4, r7, pc}

08000970 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	6039      	str	r1, [r7, #0]
 800097a:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800097c:	6838      	ldr	r0, [r7, #0]
 800097e:	f001 f893 	bl	8001aa8 <null_ptr_check>
 8000982:	4603      	mov	r3, r0
 8000984:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8000986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d13f      	bne.n	8000a0e <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 800098e:	f107 030e 	add.w	r3, r7, #14
 8000992:	6839      	ldr	r1, [r7, #0]
 8000994:	4618      	mov	r0, r3
 8000996:	f000 f874 	bl	8000a82 <bme280_get_sensor_mode>
 800099a:	4603      	mov	r3, r0
 800099c:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 800099e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d107      	bne.n	80009b6 <bme280_set_sensor_settings+0x46>
 80009a6:	7bbb      	ldrb	r3, [r7, #14]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d004      	beq.n	80009b6 <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 80009ac:	6838      	ldr	r0, [r7, #0]
 80009ae:	f000 fb37 	bl	8001020 <put_device_to_sleep>
 80009b2:	4603      	mov	r3, r0
 80009b4:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 80009b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d127      	bne.n	8000a0e <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	4619      	mov	r1, r3
 80009c2:	2007      	movs	r0, #7
 80009c4:	f001 f854 	bl	8001a70 <are_settings_changed>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d009      	beq.n	80009e2 <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	683a      	ldr	r2, [r7, #0]
 80009d8:	4618      	mov	r0, r3
 80009da:	f000 f973 	bl	8000cc4 <set_osr_settings>
 80009de:	4603      	mov	r3, r0
 80009e0:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 80009e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d111      	bne.n	8000a0e <bme280_set_sensor_settings+0x9e>
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	4619      	mov	r1, r3
 80009ee:	2018      	movs	r0, #24
 80009f0:	f001 f83e 	bl	8001a70 <are_settings_changed>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d009      	beq.n	8000a0e <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	683a      	ldr	r2, [r7, #0]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f000 f9fa 	bl	8000dfe <set_filter_standby_settings>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 8000a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3710      	adds	r7, #16
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b084      	sub	sp, #16
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	4603      	mov	r3, r0
 8000a22:	6039      	str	r1, [r7, #0]
 8000a24:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000a26:	6838      	ldr	r0, [r7, #0]
 8000a28:	f001 f83e 	bl	8001aa8 <null_ptr_check>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 8000a30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d11e      	bne.n	8000a76 <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8000a38:	f107 030e 	add.w	r3, r7, #14
 8000a3c:	6839      	ldr	r1, [r7, #0]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 f81f 	bl	8000a82 <bme280_get_sensor_mode>
 8000a44:	4603      	mov	r3, r0
 8000a46:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8000a48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d107      	bne.n	8000a60 <bme280_set_sensor_mode+0x46>
 8000a50:	7bbb      	ldrb	r3, [r7, #14]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d004      	beq.n	8000a60 <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 8000a56:	6838      	ldr	r0, [r7, #0]
 8000a58:	f000 fae2 	bl	8001020 <put_device_to_sleep>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 8000a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d106      	bne.n	8000a76 <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	6839      	ldr	r1, [r7, #0]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 faa4 	bl	8000fba <write_power_mode>
 8000a72:	4603      	mov	r3, r0
 8000a74:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8000a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b084      	sub	sp, #16
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
 8000a8a:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000a8c:	6838      	ldr	r0, [r7, #0]
 8000a8e:	f001 f80b 	bl	8001aa8 <null_ptr_check>
 8000a92:	4603      	mov	r3, r0
 8000a94:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 8000a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d10e      	bne.n	8000abc <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	20f4      	movs	r0, #244	; 0xf4
 8000aa6:	f7ff feba 	bl	800081e <bme280_get_regs>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	f003 0303 	and.w	r3, r3, #3
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8000abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 8000ad0:	23e0      	movs	r3, #224	; 0xe0
 8000ad2:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 8000ad4:	23b6      	movs	r3, #182	; 0xb6
 8000ad6:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f000 ffe5 	bl	8001aa8 <null_ptr_check>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8000ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d10d      	bne.n	8000b06 <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8000aea:	f107 010d 	add.w	r1, r7, #13
 8000aee:	f107 000e 	add.w	r0, r7, #14
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2201      	movs	r2, #1
 8000af6:	f7ff fec2 	bl	800087e <bme280_set_regs>
 8000afa:	4603      	mov	r3, r0
 8000afc:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	68db      	ldr	r3, [r3, #12]
 8000b02:	2002      	movs	r0, #2
 8000b04:	4798      	blx	r3
	}

	return rslt;
 8000b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b08a      	sub	sp, #40	; 0x28
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	4603      	mov	r3, r0
 8000b1a:	60b9      	str	r1, [r7, #8]
 8000b1c:	607a      	str	r2, [r7, #4]
 8000b1e:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 8000b20:	f107 031c 	add.w	r3, r7, #28
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
	struct bme280_uncomp_data uncomp_data = {0};
 8000b2a:	f107 0310 	add.w	r3, r7, #16
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f000 ffb6 	bl	8001aa8 <null_ptr_check>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 8000b42:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d124      	bne.n	8000b94 <bme280_get_sensor_data+0x82>
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d021      	beq.n	8000b94 <bme280_get_sensor_data+0x82>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8000b50:	f107 011c 	add.w	r1, r7, #28
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2208      	movs	r2, #8
 8000b58:	20f7      	movs	r0, #247	; 0xf7
 8000b5a:	f7ff fe60 	bl	800081e <bme280_get_regs>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (rslt == BME280_OK) {
 8000b64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d116      	bne.n	8000b9a <bme280_get_sensor_data+0x88>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 8000b6c:	f107 0210 	add.w	r2, r7, #16
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	4611      	mov	r1, r2
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 f815 	bl	8000ba6 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3310      	adds	r3, #16
 8000b80:	f107 0110 	add.w	r1, r7, #16
 8000b84:	7bf8      	ldrb	r0, [r7, #15]
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	f000 f853 	bl	8000c32 <bme280_compensate_data>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 8000b92:	e002      	b.n	8000b9a <bme280_get_sensor_data+0x88>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8000b94:	23ff      	movs	r3, #255	; 0xff
 8000b96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return rslt;
 8000b9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3728      	adds	r7, #40	; 0x28
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b087      	sub	sp, #28
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	031b      	lsls	r3, r3, #12
 8000bb6:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	011b      	lsls	r3, r3, #4
 8000bc0:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	3302      	adds	r3, #2
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	091b      	lsrs	r3, r3, #4
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8000bce:	697a      	ldr	r2, [r7, #20]
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	431a      	orrs	r2, r3
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	431a      	orrs	r2, r3
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3303      	adds	r3, #3
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	031b      	lsls	r3, r3, #12
 8000be4:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	3304      	adds	r3, #4
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	011b      	lsls	r3, r3, #4
 8000bee:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3305      	adds	r3, #5
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	091b      	lsrs	r3, r3, #4
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8000bfc:	697a      	ldr	r2, [r7, #20]
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	431a      	orrs	r2, r3
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	431a      	orrs	r2, r3
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	3306      	adds	r3, #6
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	021b      	lsls	r3, r3, #8
 8000c12:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3307      	adds	r3, #7
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 8000c1c:	697a      	ldr	r2, [r7, #20]
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	431a      	orrs	r2, r3
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	609a      	str	r2, [r3, #8]
}
 8000c26:	bf00      	nop
 8000c28:	371c      	adds	r7, #28
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b086      	sub	sp, #24
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
 8000c3c:	603b      	str	r3, [r7, #0]
 8000c3e:	4603      	mov	r3, r0
 8000c40:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 8000c42:	2300      	movs	r3, #0
 8000c44:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d033      	beq.n	8000cb4 <bme280_compensate_data+0x82>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d030      	beq.n	8000cb4 <bme280_compensate_data+0x82>
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d02d      	beq.n	8000cb4 <bme280_compensate_data+0x82>
		/* Initialize to zero */
		comp_data->temperature = 0;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	605a      	str	r2, [r3, #4]
		comp_data->pressure = 0;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
		comp_data->humidity = 0;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	f003 0307 	and.w	r3, r3, #7
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d006      	beq.n	8000c82 <bme280_compensate_data+0x50>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8000c74:	6839      	ldr	r1, [r7, #0]
 8000c76:	68b8      	ldr	r0, [r7, #8]
 8000c78:	f000 fa20 	bl	80010bc <compensate_temperature>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	605a      	str	r2, [r3, #4]
		}
		if (sensor_comp & BME280_PRESS) {
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	f003 0301 	and.w	r3, r3, #1
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d006      	beq.n	8000c9a <bme280_compensate_data+0x68>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8000c8c:	6839      	ldr	r1, [r7, #0]
 8000c8e:	68b8      	ldr	r0, [r7, #8]
 8000c90:	f000 fa78 	bl	8001184 <compensate_pressure>
 8000c94:	4602      	mov	r2, r0
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	601a      	str	r2, [r3, #0]
		}
		if (sensor_comp & BME280_HUM) {
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
 8000c9c:	f003 0304 	and.w	r3, r3, #4
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d009      	beq.n	8000cb8 <bme280_compensate_data+0x86>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8000ca4:	6839      	ldr	r1, [r7, #0]
 8000ca6:	68b8      	ldr	r0, [r7, #8]
 8000ca8:	f000 fcc6 	bl	8001638 <compensate_humidity>
 8000cac:	4602      	mov	r2, r0
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
		if (sensor_comp & BME280_HUM) {
 8000cb2:	e001      	b.n	8000cb8 <bme280_compensate_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8000cb4:	23ff      	movs	r3, #255	; 0xff
 8000cb6:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8000cb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3718      	adds	r7, #24
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
 8000cd0:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	f003 0304 	and.w	r3, r3, #4
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d005      	beq.n	8000cec <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 8000ce0:	6879      	ldr	r1, [r7, #4]
 8000ce2:	68b8      	ldr	r0, [r7, #8]
 8000ce4:	f000 f815 	bl	8000d12 <set_osr_humidity_settings>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	f003 0303 	and.w	r3, r3, #3
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d007      	beq.n	8000d06 <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	68b9      	ldr	r1, [r7, #8]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 f842 	bl	8000d86 <set_osr_press_temp_settings>
 8000d02:	4603      	mov	r3, r0
 8000d04:	75fb      	strb	r3, [r7, #23]

	return rslt;
 8000d06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b084      	sub	sp, #16
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
 8000d1a:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8000d1c:	23f2      	movs	r3, #242	; 0xf2
 8000d1e:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	789b      	ldrb	r3, [r3, #2]
 8000d24:	f003 0307 	and.w	r3, r3, #7
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8000d2c:	f107 010e 	add.w	r1, r7, #14
 8000d30:	f107 000c 	add.w	r0, r7, #12
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	2201      	movs	r2, #1
 8000d38:	f7ff fda1 	bl	800087e <bme280_set_regs>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 8000d40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d118      	bne.n	8000d7a <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 8000d48:	23f4      	movs	r3, #244	; 0xf4
 8000d4a:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8000d4c:	7b38      	ldrb	r0, [r7, #12]
 8000d4e:	f107 010d 	add.w	r1, r7, #13
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	2201      	movs	r2, #1
 8000d56:	f7ff fd62 	bl	800081e <bme280_get_regs>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 8000d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d109      	bne.n	8000d7a <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8000d66:	f107 010d 	add.w	r1, r7, #13
 8000d6a:	f107 000c 	add.w	r0, r7, #12
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	2201      	movs	r2, #1
 8000d72:	f7ff fd84 	bl	800087e <bme280_set_regs>
 8000d76:	4603      	mov	r3, r0
 8000d78:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8000d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b086      	sub	sp, #24
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
 8000d92:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8000d94:	23f4      	movs	r3, #244	; 0xf4
 8000d96:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8000d98:	7db8      	ldrb	r0, [r7, #22]
 8000d9a:	f107 0115 	add.w	r1, r7, #21
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2201      	movs	r2, #1
 8000da2:	f7ff fd3c 	bl	800081e <bme280_get_regs>
 8000da6:	4603      	mov	r3, r0
 8000da8:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8000daa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d11f      	bne.n	8000df2 <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d005      	beq.n	8000dc8 <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 8000dbc:	f107 0315 	add.w	r3, r7, #21
 8000dc0:	68b9      	ldr	r1, [r7, #8]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 f88e 	bl	8000ee4 <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d005      	beq.n	8000dde <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 8000dd2:	f107 0315 	add.w	r3, r7, #21
 8000dd6:	68b9      	ldr	r1, [r7, #8]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f000 f8a0 	bl	8000f1e <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8000dde:	f107 0115 	add.w	r1, r7, #21
 8000de2:	f107 0016 	add.w	r0, r7, #22
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2201      	movs	r2, #1
 8000dea:	f7ff fd48 	bl	800087e <bme280_set_regs>
 8000dee:	4603      	mov	r3, r0
 8000df0:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8000df2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b086      	sub	sp, #24
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	4603      	mov	r3, r0
 8000e06:	60b9      	str	r1, [r7, #8]
 8000e08:	607a      	str	r2, [r7, #4]
 8000e0a:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 8000e0c:	23f5      	movs	r3, #245	; 0xf5
 8000e0e:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8000e10:	7db8      	ldrb	r0, [r7, #22]
 8000e12:	f107 0115 	add.w	r1, r7, #21
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2201      	movs	r2, #1
 8000e1a:	f7ff fd00 	bl	800081e <bme280_get_regs>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8000e22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d11f      	bne.n	8000e6a <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
 8000e2c:	f003 0308 	and.w	r3, r3, #8
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d005      	beq.n	8000e40 <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 8000e34:	f107 0315 	add.w	r3, r7, #21
 8000e38:	68b9      	ldr	r1, [r7, #8]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 f81b 	bl	8000e76 <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
 8000e42:	f003 0310 	and.w	r3, r3, #16
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d005      	beq.n	8000e56 <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 8000e4a:	f107 0315 	add.w	r3, r7, #21
 8000e4e:	68b9      	ldr	r1, [r7, #8]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f000 f82d 	bl	8000eb0 <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8000e56:	f107 0115 	add.w	r1, r7, #21
 8000e5a:	f107 0016 	add.w	r0, r7, #22
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2201      	movs	r2, #1
 8000e62:	f7ff fd0c 	bl	800087e <bme280_set_regs>
 8000e66:	4603      	mov	r3, r0
 8000e68:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8000e6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
 8000e7e:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	b25b      	sxtb	r3, r3
 8000e86:	f023 031c 	bic.w	r3, r3, #28
 8000e8a:	b25a      	sxtb	r2, r3
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	78db      	ldrb	r3, [r3, #3]
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	b25b      	sxtb	r3, r3
 8000e94:	f003 031c 	and.w	r3, r3, #28
 8000e98:	b25b      	sxtb	r3, r3
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	b25b      	sxtb	r3, r3
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	701a      	strb	r2, [r3, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	b25b      	sxtb	r3, r3
 8000ec0:	f003 031f 	and.w	r3, r3, #31
 8000ec4:	b25a      	sxtb	r2, r3
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	791b      	ldrb	r3, [r3, #4]
 8000eca:	015b      	lsls	r3, r3, #5
 8000ecc:	b25b      	sxtb	r3, r3
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	b25b      	sxtb	r3, r3
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	701a      	strb	r2, [r3, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	b25b      	sxtb	r3, r3
 8000ef4:	f023 031c 	bic.w	r3, r3, #28
 8000ef8:	b25a      	sxtb	r2, r3
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	b25b      	sxtb	r3, r3
 8000f02:	f003 031c 	and.w	r3, r3, #28
 8000f06:	b25b      	sxtb	r3, r3
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	b25b      	sxtb	r3, r3
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	701a      	strb	r2, [r3, #0]
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	b083      	sub	sp, #12
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	b25b      	sxtb	r3, r3
 8000f2e:	f003 031f 	and.w	r3, r3, #31
 8000f32:	b25a      	sxtb	r2, r3
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	785b      	ldrb	r3, [r3, #1]
 8000f38:	015b      	lsls	r3, r3, #5
 8000f3a:	b25b      	sxtb	r3, r3
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	b25b      	sxtb	r3, r3
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	701a      	strb	r2, [r3, #0]
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	f003 0307 	and.w	r3, r3, #7
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3302      	adds	r3, #2
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	109b      	asrs	r3, r3, #2
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	f003 0307 	and.w	r3, r3, #7
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3302      	adds	r3, #2
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	095b      	lsrs	r3, r3, #5
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3303      	adds	r3, #3
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	109b      	asrs	r3, r3, #2
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3303      	adds	r3, #3
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	095b      	lsrs	r3, r3, #5
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	711a      	strb	r2, [r3, #4]
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b084      	sub	sp, #16
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	6039      	str	r1, [r7, #0]
 8000fc4:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8000fc6:	23f4      	movs	r3, #244	; 0xf4
 8000fc8:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8000fca:	7bb8      	ldrb	r0, [r7, #14]
 8000fcc:	f107 010d 	add.w	r1, r7, #13
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f7ff fc23 	bl	800081e <bme280_get_regs>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 8000fdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d117      	bne.n	8001014 <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8000fe4:	7b7b      	ldrb	r3, [r7, #13]
 8000fe6:	b25b      	sxtb	r3, r3
 8000fe8:	f023 0303 	bic.w	r3, r3, #3
 8000fec:	b25a      	sxtb	r2, r3
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	f003 0303 	and.w	r3, r3, #3
 8000ff6:	b25b      	sxtb	r3, r3
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	b25b      	sxtb	r3, r3
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8001000:	f107 010d 	add.w	r1, r7, #13
 8001004:	f107 000e 	add.w	r0, r7, #14
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	2201      	movs	r2, #1
 800100c:	f7ff fc37 	bl	800087e <bme280_set_regs>
 8001010:	4603      	mov	r3, r0
 8001012:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001014:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8001028:	f107 0110 	add.w	r1, r7, #16
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2204      	movs	r2, #4
 8001030:	20f2      	movs	r0, #242	; 0xf2
 8001032:	f7ff fbf4 	bl	800081e <bme280_get_regs>
 8001036:	4603      	mov	r3, r0
 8001038:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 800103a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d118      	bne.n	8001074 <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 8001042:	f107 0208 	add.w	r2, r7, #8
 8001046:	f107 0310 	add.w	r3, r7, #16
 800104a:	4611      	mov	r1, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff80 	bl	8000f52 <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff fd38 	bl	8000ac8 <bme280_soft_reset>
 8001058:	4603      	mov	r3, r0
 800105a:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 800105c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d107      	bne.n	8001074 <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 8001064:	f107 0308 	add.w	r3, r7, #8
 8001068:	6879      	ldr	r1, [r7, #4]
 800106a:	4618      	mov	r0, r3
 800106c:	f000 f808 	bl	8001080 <reload_device_settings>
 8001070:	4603      	mov	r3, r0
 8001072:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001074:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	201f      	movs	r0, #31
 8001090:	f7ff fe18 	bl	8000cc4 <set_osr_settings>
 8001094:	4603      	mov	r3, r0
 8001096:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 8001098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d106      	bne.n	80010ae <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80010a0:	683a      	ldr	r2, [r7, #0]
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	201f      	movs	r0, #31
 80010a6:	f7ff feaa 	bl	8000dfe <set_filter_standby_settings>
 80010aa:	4603      	mov	r3, r0
 80010ac:	73fb      	strb	r3, [r7, #15]

	return rslt;
 80010ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	; 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t temperature;
	int32_t temperature_min = -4000;
 80010c6:	4b2e      	ldr	r3, [pc, #184]	; (8001180 <compensate_temperature+0xc4>)
 80010c8:	61bb      	str	r3, [r7, #24]
	int32_t temperature_max = 8500;
 80010ca:	f242 1334 	movw	r3, #8500	; 0x2134
 80010ce:	617b      	str	r3, [r7, #20]

	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	08db      	lsrs	r3, r3, #3
 80010d6:	683a      	ldr	r2, [r7, #0]
 80010d8:	8812      	ldrh	r2, [r2, #0]
 80010da:	0052      	lsls	r2, r2, #1
 80010dc:	1a9b      	subs	r3, r3, r2
 80010de:	613b      	str	r3, [r7, #16]
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010e6:	461a      	mov	r2, r3
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	fb03 f302 	mul.w	r3, r3, r2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	da01      	bge.n	80010f6 <compensate_temperature+0x3a>
 80010f2:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80010f6:	12db      	asrs	r3, r3, #11
 80010f8:	613b      	str	r3, [r7, #16]
	var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	091b      	lsrs	r3, r3, #4
 8001100:	683a      	ldr	r2, [r7, #0]
 8001102:	8812      	ldrh	r2, [r2, #0]
 8001104:	1a9b      	subs	r3, r3, r2
 8001106:	60fb      	str	r3, [r7, #12]
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	fb02 f303 	mul.w	r3, r2, r3
 8001110:	2b00      	cmp	r3, #0
 8001112:	da01      	bge.n	8001118 <compensate_temperature+0x5c>
 8001114:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001118:	131b      	asrs	r3, r3, #12
 800111a:	461a      	mov	r2, r3
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001122:	fb03 f302 	mul.w	r3, r3, r2
 8001126:	2b00      	cmp	r3, #0
 8001128:	da03      	bge.n	8001132 <compensate_temperature+0x76>
 800112a:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800112e:	441a      	add	r2, r3
 8001130:	4613      	mov	r3, r2
 8001132:	139b      	asrs	r3, r3, #14
 8001134:	60fb      	str	r3, [r7, #12]
	calib_data->t_fine = var1 + var2;
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	441a      	add	r2, r3
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	625a      	str	r2, [r3, #36]	; 0x24
	temperature = (calib_data->t_fine * 5 + 128) / 256;
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001144:	4613      	mov	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4413      	add	r3, r2
 800114a:	3380      	adds	r3, #128	; 0x80
 800114c:	2b00      	cmp	r3, #0
 800114e:	da00      	bge.n	8001152 <compensate_temperature+0x96>
 8001150:	33ff      	adds	r3, #255	; 0xff
 8001152:	121b      	asrs	r3, r3, #8
 8001154:	61fb      	str	r3, [r7, #28]

	if (temperature < temperature_min)
 8001156:	69fa      	ldr	r2, [r7, #28]
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	429a      	cmp	r2, r3
 800115c:	da02      	bge.n	8001164 <compensate_temperature+0xa8>
		temperature = temperature_min;
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	61fb      	str	r3, [r7, #28]
 8001162:	e005      	b.n	8001170 <compensate_temperature+0xb4>
	else if (temperature > temperature_max)
 8001164:	69fa      	ldr	r2, [r7, #28]
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	429a      	cmp	r2, r3
 800116a:	dd01      	ble.n	8001170 <compensate_temperature+0xb4>
		temperature = temperature_max;
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	61fb      	str	r3, [r7, #28]

	return temperature;
 8001170:	69fb      	ldr	r3, [r7, #28]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3724      	adds	r7, #36	; 0x24
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	fffff060 	.word	0xfffff060

08001184 <compensate_pressure>:
 * return the compensated pressure data in integer data type with higher
 * accuracy.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001184:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8001188:	b08e      	sub	sp, #56	; 0x38
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
 800118e:	6039      	str	r1, [r7, #0]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int64_t var4;
	uint32_t pressure;
	uint32_t pressure_min = 3000000;
 8001190:	4bc9      	ldr	r3, [pc, #804]	; (80014b8 <compensate_pressure+0x334>)
 8001192:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t pressure_max = 11000000;
 8001194:	4bc9      	ldr	r3, [pc, #804]	; (80014bc <compensate_pressure+0x338>)
 8001196:	62fb      	str	r3, [r7, #44]	; 0x2c

	var1 = ((int64_t)calib_data->t_fine) - 128000;
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119c:	4619      	mov	r1, r3
 800119e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80011a2:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 80011a6:	f142 34ff 	adc.w	r4, r2, #4294967295
 80011aa:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	6a3a      	ldr	r2, [r7, #32]
 80011b2:	fb02 f203 	mul.w	r2, r2, r3
 80011b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b8:	6a39      	ldr	r1, [r7, #32]
 80011ba:	fb01 f303 	mul.w	r3, r1, r3
 80011be:	441a      	add	r2, r3
 80011c0:	6a39      	ldr	r1, [r7, #32]
 80011c2:	6a3b      	ldr	r3, [r7, #32]
 80011c4:	fba1 3403 	umull	r3, r4, r1, r3
 80011c8:	4422      	add	r2, r4
 80011ca:	4614      	mov	r4, r2
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80011d2:	b211      	sxth	r1, r2
 80011d4:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80011d8:	fb01 f504 	mul.w	r5, r1, r4
 80011dc:	fb03 f002 	mul.w	r0, r3, r2
 80011e0:	4428      	add	r0, r5
 80011e2:	fba3 3401 	umull	r3, r4, r3, r1
 80011e6:	1902      	adds	r2, r0, r4
 80011e8:	4614      	mov	r4, r2
 80011ea:	e9c7 3406 	strd	r3, r4, [r7, #24]
 80011ee:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80011fe:	6a3a      	ldr	r2, [r7, #32]
 8001200:	fb04 f102 	mul.w	r1, r4, r2
 8001204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001206:	fb03 f202 	mul.w	r2, r3, r2
 800120a:	1888      	adds	r0, r1, r2
 800120c:	6a3a      	ldr	r2, [r7, #32]
 800120e:	fba2 1203 	umull	r1, r2, r2, r3
 8001212:	1883      	adds	r3, r0, r2
 8001214:	461a      	mov	r2, r3
 8001216:	f04f 0500 	mov.w	r5, #0
 800121a:	f04f 0600 	mov.w	r6, #0
 800121e:	0456      	lsls	r6, r2, #17
 8001220:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 8001224:	044d      	lsls	r5, r1, #17
 8001226:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800122a:	186b      	adds	r3, r5, r1
 800122c:	eb46 0402 	adc.w	r4, r6, r2
 8001230:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800123a:	b219      	sxth	r1, r3
 800123c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001240:	f04f 0500 	mov.w	r5, #0
 8001244:	f04f 0600 	mov.w	r6, #0
 8001248:	00ce      	lsls	r6, r1, #3
 800124a:	2500      	movs	r5, #0
 800124c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001250:	186b      	adds	r3, r5, r1
 8001252:	eb46 0402 	adc.w	r4, r6, r2
 8001256:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 800125a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125c:	6a3a      	ldr	r2, [r7, #32]
 800125e:	fb02 f203 	mul.w	r2, r2, r3
 8001262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001264:	6a39      	ldr	r1, [r7, #32]
 8001266:	fb01 f303 	mul.w	r3, r1, r3
 800126a:	441a      	add	r2, r3
 800126c:	6a39      	ldr	r1, [r7, #32]
 800126e:	6a3b      	ldr	r3, [r7, #32]
 8001270:	fba1 3403 	umull	r3, r4, r1, r3
 8001274:	4422      	add	r2, r4
 8001276:	4614      	mov	r4, r2
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800127e:	b211      	sxth	r1, r2
 8001280:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001284:	fb01 f504 	mul.w	r5, r1, r4
 8001288:	fb03 f002 	mul.w	r0, r3, r2
 800128c:	4428      	add	r0, r5
 800128e:	fba3 3401 	umull	r3, r4, r3, r1
 8001292:	1902      	adds	r2, r0, r4
 8001294:	4614      	mov	r4, r2
 8001296:	2b00      	cmp	r3, #0
 8001298:	f174 0200 	sbcs.w	r2, r4, #0
 800129c:	da02      	bge.n	80012a4 <compensate_pressure+0x120>
 800129e:	33ff      	adds	r3, #255	; 0xff
 80012a0:	f144 0400 	adc.w	r4, r4, #0
 80012a4:	f04f 0100 	mov.w	r1, #0
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	0a19      	lsrs	r1, r3, #8
 80012ae:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 80012b2:	1222      	asrs	r2, r4, #8
 80012b4:	460d      	mov	r5, r1
 80012b6:	4616      	mov	r6, r2
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80012be:	b21b      	sxth	r3, r3
 80012c0:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80012c4:	6a3a      	ldr	r2, [r7, #32]
 80012c6:	fb04 f102 	mul.w	r1, r4, r2
 80012ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012cc:	fb03 f202 	mul.w	r2, r3, r2
 80012d0:	1888      	adds	r0, r1, r2
 80012d2:	6a3a      	ldr	r2, [r7, #32]
 80012d4:	fba2 1203 	umull	r1, r2, r2, r3
 80012d8:	1883      	adds	r3, r0, r2
 80012da:	461a      	mov	r2, r3
 80012dc:	f04f 0b00 	mov.w	fp, #0
 80012e0:	f04f 0c00 	mov.w	ip, #0
 80012e4:	ea4f 3c02 	mov.w	ip, r2, lsl #12
 80012e8:	ea4c 5c11 	orr.w	ip, ip, r1, lsr #20
 80012ec:	ea4f 3b01 	mov.w	fp, r1, lsl #12
 80012f0:	eb1b 0305 	adds.w	r3, fp, r5
 80012f4:	eb4c 0406 	adc.w	r4, ip, r6
 80012f8:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var3 = ((int64_t)1) * 140737488355328;
 80012fc:	f04f 0300 	mov.w	r3, #0
 8001300:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 8001304:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 8001308:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800130c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001310:	eb11 0b03 	adds.w	fp, r1, r3
 8001314:	eb42 0c04 	adc.w	ip, r2, r4
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	88db      	ldrh	r3, [r3, #6]
 800131c:	b29b      	uxth	r3, r3
 800131e:	f04f 0400 	mov.w	r4, #0
 8001322:	fb03 f50c 	mul.w	r5, r3, ip
 8001326:	fb0b f004 	mul.w	r0, fp, r4
 800132a:	4428      	add	r0, r5
 800132c:	fbab 3403 	umull	r3, r4, fp, r3
 8001330:	1902      	adds	r2, r0, r4
 8001332:	4614      	mov	r4, r2
 8001334:	2b00      	cmp	r3, #0
 8001336:	f174 0200 	sbcs.w	r2, r4, #0
 800133a:	da03      	bge.n	8001344 <compensate_pressure+0x1c0>
 800133c:	f113 33ff 	adds.w	r3, r3, #4294967295
 8001340:	f144 0401 	adc.w	r4, r4, #1
 8001344:	f04f 0100 	mov.w	r1, #0
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	1061      	asrs	r1, r4, #1
 800134e:	17e2      	asrs	r2, r4, #31
 8001350:	e9c7 1208 	strd	r1, r2, [r7, #32]

	/* To avoid divide by zero exception */
	if (var1 != 0) {
 8001354:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001358:	4323      	orrs	r3, r4
 800135a:	f000 8162 	beq.w	8001622 <compensate_pressure+0x49e>
		var4 = 1048576 - uncomp_data->pressure;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001366:	f04f 0400 	mov.w	r4, #0
 800136a:	e9c7 3402 	strd	r3, r4, [r7, #8]
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 800136e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001372:	f04f 0300 	mov.w	r3, #0
 8001376:	f04f 0400 	mov.w	r4, #0
 800137a:	07d4      	lsls	r4, r2, #31
 800137c:	ea44 0451 	orr.w	r4, r4, r1, lsr #1
 8001380:	07cb      	lsls	r3, r1, #31
 8001382:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001386:	1a5b      	subs	r3, r3, r1
 8001388:	eb64 0402 	sbc.w	r4, r4, r2
 800138c:	461d      	mov	r5, r3
 800138e:	4626      	mov	r6, r4
 8001390:	46ab      	mov	fp, r5
 8001392:	46b4      	mov	ip, r6
 8001394:	eb1b 030b 	adds.w	r3, fp, fp
 8001398:	eb4c 040c 	adc.w	r4, ip, ip
 800139c:	469b      	mov	fp, r3
 800139e:	46a4      	mov	ip, r4
 80013a0:	eb1b 0b05 	adds.w	fp, fp, r5
 80013a4:	eb4c 0c06 	adc.w	ip, ip, r6
 80013a8:	f04f 0100 	mov.w	r1, #0
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	ea4f 128c 	mov.w	r2, ip, lsl #6
 80013b4:	ea42 629b 	orr.w	r2, r2, fp, lsr #26
 80013b8:	ea4f 118b 	mov.w	r1, fp, lsl #6
 80013bc:	eb1b 0b01 	adds.w	fp, fp, r1
 80013c0:	eb4c 0c02 	adc.w	ip, ip, r2
 80013c4:	f04f 0100 	mov.w	r1, #0
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80013d0:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
 80013d4:	ea4f 018b 	mov.w	r1, fp, lsl #2
 80013d8:	468b      	mov	fp, r1
 80013da:	4694      	mov	ip, r2
 80013dc:	eb1b 0b05 	adds.w	fp, fp, r5
 80013e0:	eb4c 0c06 	adc.w	ip, ip, r6
 80013e4:	f04f 0100 	mov.w	r1, #0
 80013e8:	f04f 0200 	mov.w	r2, #0
 80013ec:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80013f0:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
 80013f4:	ea4f 018b 	mov.w	r1, fp, lsl #2
 80013f8:	468b      	mov	fp, r1
 80013fa:	4694      	mov	ip, r2
 80013fc:	eb1b 0005 	adds.w	r0, fp, r5
 8001400:	eb4c 0106 	adc.w	r1, ip, r6
 8001404:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001408:	f7fe ff72 	bl	80002f0 <__aeabi_ldivmod>
 800140c:	4603      	mov	r3, r0
 800140e:	460c      	mov	r4, r1
 8001410:	e9c7 3402 	strd	r3, r4, [r7, #8]
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800141a:	b21d      	sxth	r5, r3
 800141c:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8001420:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001424:	2b00      	cmp	r3, #0
 8001426:	f174 0200 	sbcs.w	r2, r4, #0
 800142a:	da06      	bge.n	800143a <compensate_pressure+0x2b6>
 800142c:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	185b      	adds	r3, r3, r1
 8001436:	eb44 0402 	adc.w	r4, r4, r2
 800143a:	f04f 0100 	mov.w	r1, #0
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	0b59      	lsrs	r1, r3, #13
 8001444:	ea41 41c4 	orr.w	r1, r1, r4, lsl #19
 8001448:	1362      	asrs	r2, r4, #13
 800144a:	460b      	mov	r3, r1
 800144c:	4614      	mov	r4, r2
 800144e:	fb03 f106 	mul.w	r1, r3, r6
 8001452:	fb05 f204 	mul.w	r2, r5, r4
 8001456:	1888      	adds	r0, r1, r2
 8001458:	fba5 1203 	umull	r1, r2, r5, r3
 800145c:	1883      	adds	r3, r0, r2
 800145e:	461a      	mov	r2, r3
 8001460:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001464:	2b00      	cmp	r3, #0
 8001466:	f174 0000 	sbcs.w	r0, r4, #0
 800146a:	da06      	bge.n	800147a <compensate_pressure+0x2f6>
 800146c:	f641 75ff 	movw	r5, #8191	; 0x1fff
 8001470:	f04f 0600 	mov.w	r6, #0
 8001474:	195b      	adds	r3, r3, r5
 8001476:	eb44 0406 	adc.w	r4, r4, r6
 800147a:	f04f 0500 	mov.w	r5, #0
 800147e:	f04f 0600 	mov.w	r6, #0
 8001482:	0b5d      	lsrs	r5, r3, #13
 8001484:	ea45 45c4 	orr.w	r5, r5, r4, lsl #19
 8001488:	1366      	asrs	r6, r4, #13
 800148a:	462b      	mov	r3, r5
 800148c:	4634      	mov	r4, r6
 800148e:	fb03 f502 	mul.w	r5, r3, r2
 8001492:	fb01 f004 	mul.w	r0, r1, r4
 8001496:	4428      	add	r0, r5
 8001498:	fba1 3403 	umull	r3, r4, r1, r3
 800149c:	1902      	adds	r2, r0, r4
 800149e:	4614      	mov	r4, r2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f174 0200 	sbcs.w	r2, r4, #0
 80014a6:	da0b      	bge.n	80014c0 <compensate_pressure+0x33c>
 80014a8:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 80014ac:	f04f 0200 	mov.w	r2, #0
 80014b0:	185b      	adds	r3, r3, r1
 80014b2:	eb44 0402 	adc.w	r4, r4, r2
 80014b6:	e003      	b.n	80014c0 <compensate_pressure+0x33c>
 80014b8:	002dc6c0 	.word	0x002dc6c0
 80014bc:	00a7d8c0 	.word	0x00a7d8c0
 80014c0:	f04f 0100 	mov.w	r1, #0
 80014c4:	f04f 0200 	mov.w	r2, #0
 80014c8:	0e59      	lsrs	r1, r3, #25
 80014ca:	ea41 11c4 	orr.w	r1, r1, r4, lsl #7
 80014ce:	1662      	asrs	r2, r4, #25
 80014d0:	e9c7 1208 	strd	r1, r2, [r7, #32]
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80014da:	b21b      	sxth	r3, r3
 80014dc:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80014e0:	68ba      	ldr	r2, [r7, #8]
 80014e2:	fb04 f102 	mul.w	r1, r4, r2
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	fb03 f202 	mul.w	r2, r3, r2
 80014ec:	440a      	add	r2, r1
 80014ee:	68b9      	ldr	r1, [r7, #8]
 80014f0:	fba1 3403 	umull	r3, r4, r1, r3
 80014f4:	4422      	add	r2, r4
 80014f6:	4614      	mov	r4, r2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f174 0200 	sbcs.w	r2, r4, #0
 80014fe:	da05      	bge.n	800150c <compensate_pressure+0x388>
 8001500:	494c      	ldr	r1, [pc, #304]	; (8001634 <compensate_pressure+0x4b0>)
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	185b      	adds	r3, r3, r1
 8001508:	eb44 0402 	adc.w	r4, r4, r2
 800150c:	f04f 0100 	mov.w	r1, #0
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	0cd9      	lsrs	r1, r3, #19
 8001516:	ea41 3144 	orr.w	r1, r1, r4, lsl #13
 800151a:	14e2      	asrs	r2, r4, #19
 800151c:	e9c7 1206 	strd	r1, r2, [r7, #24]
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 8001520:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001524:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001528:	18cd      	adds	r5, r1, r3
 800152a:	eb42 0604 	adc.w	r6, r2, r4
 800152e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001532:	1959      	adds	r1, r3, r5
 8001534:	eb44 0206 	adc.w	r2, r4, r6
 8001538:	460b      	mov	r3, r1
 800153a:	4614      	mov	r4, r2
 800153c:	2b00      	cmp	r3, #0
 800153e:	f174 0200 	sbcs.w	r2, r4, #0
 8001542:	da02      	bge.n	800154a <compensate_pressure+0x3c6>
 8001544:	33ff      	adds	r3, #255	; 0xff
 8001546:	f144 0400 	adc.w	r4, r4, #0
 800154a:	f04f 0100 	mov.w	r1, #0
 800154e:	f04f 0200 	mov.w	r2, #0
 8001552:	0a19      	lsrs	r1, r3, #8
 8001554:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8001558:	1222      	asrs	r2, r4, #8
 800155a:	460d      	mov	r5, r1
 800155c:	4616      	mov	r6, r2
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001564:	b219      	sxth	r1, r3
 8001566:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800156a:	f04f 0b00 	mov.w	fp, #0
 800156e:	f04f 0c00 	mov.w	ip, #0
 8001572:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 8001576:	ea4c 7c11 	orr.w	ip, ip, r1, lsr #28
 800157a:	ea4f 1b01 	mov.w	fp, r1, lsl #4
 800157e:	eb1b 0305 	adds.w	r3, fp, r5
 8001582:	eb4c 0406 	adc.w	r4, ip, r6
 8001586:	e9c7 3402 	strd	r3, r4, [r7, #8]
		pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 800158a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800158e:	2b00      	cmp	r3, #0
 8001590:	f174 0200 	sbcs.w	r2, r4, #0
 8001594:	da02      	bge.n	800159c <compensate_pressure+0x418>
 8001596:	3301      	adds	r3, #1
 8001598:	f144 0400 	adc.w	r4, r4, #0
 800159c:	1064      	asrs	r4, r4, #1
 800159e:	ea4f 0333 	mov.w	r3, r3, rrx
 80015a2:	461d      	mov	r5, r3
 80015a4:	4626      	mov	r6, r4
 80015a6:	46ab      	mov	fp, r5
 80015a8:	46b4      	mov	ip, r6
 80015aa:	eb1b 030b 	adds.w	r3, fp, fp
 80015ae:	eb4c 040c 	adc.w	r4, ip, ip
 80015b2:	469b      	mov	fp, r3
 80015b4:	46a4      	mov	ip, r4
 80015b6:	eb1b 0b05 	adds.w	fp, fp, r5
 80015ba:	eb4c 0c06 	adc.w	ip, ip, r6
 80015be:	f04f 0100 	mov.w	r1, #0
 80015c2:	f04f 0200 	mov.w	r2, #0
 80015c6:	ea4f 124c 	mov.w	r2, ip, lsl #5
 80015ca:	ea42 62db 	orr.w	r2, r2, fp, lsr #27
 80015ce:	ea4f 114b 	mov.w	r1, fp, lsl #5
 80015d2:	eb1b 0b01 	adds.w	fp, fp, r1
 80015d6:	eb4c 0c02 	adc.w	ip, ip, r2
 80015da:	eb1b 0305 	adds.w	r3, fp, r5
 80015de:	eb4c 0406 	adc.w	r4, ip, r6
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f174 0200 	sbcs.w	r2, r4, #0
 80015e8:	da02      	bge.n	80015f0 <compensate_pressure+0x46c>
 80015ea:	337f      	adds	r3, #127	; 0x7f
 80015ec:	f144 0400 	adc.w	r4, r4, #0
 80015f0:	f04f 0100 	mov.w	r1, #0
 80015f4:	f04f 0200 	mov.w	r2, #0
 80015f8:	09d9      	lsrs	r1, r3, #7
 80015fa:	ea41 6144 	orr.w	r1, r1, r4, lsl #25
 80015fe:	11e2      	asrs	r2, r4, #7
 8001600:	460b      	mov	r3, r1
 8001602:	4614      	mov	r4, r2
 8001604:	637b      	str	r3, [r7, #52]	; 0x34

		if (pressure < pressure_min)
 8001606:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800160a:	429a      	cmp	r2, r3
 800160c:	d202      	bcs.n	8001614 <compensate_pressure+0x490>
			pressure = pressure_min;
 800160e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001610:	637b      	str	r3, [r7, #52]	; 0x34
 8001612:	e008      	b.n	8001626 <compensate_pressure+0x4a2>
		else if (pressure > pressure_max)
 8001614:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001618:	429a      	cmp	r2, r3
 800161a:	d904      	bls.n	8001626 <compensate_pressure+0x4a2>
			pressure = pressure_max;
 800161c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161e:	637b      	str	r3, [r7, #52]	; 0x34
 8001620:	e001      	b.n	8001626 <compensate_pressure+0x4a2>
	} else {
		pressure = pressure_min;
 8001622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001624:	637b      	str	r3, [r7, #52]	; 0x34
	}

	return pressure;
 8001626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001628:	4618      	mov	r0, r3
 800162a:	3738      	adds	r7, #56	; 0x38
 800162c:	46bd      	mov	sp, r7
 800162e:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8001632:	bf00      	nop
 8001634:	0007ffff 	.word	0x0007ffff

08001638 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in integer data type.
 */
static uint32_t compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001638:	b480      	push	{r7}
 800163a:	b08b      	sub	sp, #44	; 0x2c
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
	int32_t var2;
	int32_t var3;
	int32_t var4;
	int32_t var5;
	uint32_t humidity;
	uint32_t humidity_max = 102400;
 8001642:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 8001646:	623b      	str	r3, [r7, #32]

	var1 = calib_data->t_fine - ((int32_t)76800);
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164c:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001650:	61fb      	str	r3, [r7, #28]
	var2 = (int32_t)(uncomp_data->humidity * 16384);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	039b      	lsls	r3, r3, #14
 8001658:	61bb      	str	r3, [r7, #24]
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001660:	051b      	lsls	r3, r3, #20
 8001662:	617b      	str	r3, [r7, #20]
	var4 = ((int32_t)calib_data->dig_H5) * var1;
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800166a:	461a      	mov	r2, r3
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	fb02 f303 	mul.w	r3, r2, r3
 8001672:	613b      	str	r3, [r7, #16]
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	1ad2      	subs	r2, r2, r3
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001682:	2b00      	cmp	r3, #0
 8001684:	da03      	bge.n	800168e <compensate_humidity+0x56>
 8001686:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800168a:	441a      	add	r2, r3
 800168c:	4613      	mov	r3, r2
 800168e:	13db      	asrs	r3, r3, #15
 8001690:	60fb      	str	r3, [r7, #12]
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8001698:	461a      	mov	r2, r3
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	fb03 f302 	mul.w	r3, r3, r2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	da01      	bge.n	80016a8 <compensate_humidity+0x70>
 80016a4:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80016a8:	129b      	asrs	r3, r3, #10
 80016aa:	61bb      	str	r3, [r7, #24]
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	7f1b      	ldrb	r3, [r3, #28]
 80016b0:	461a      	mov	r2, r3
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	fb03 f302 	mul.w	r3, r3, r2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	da01      	bge.n	80016c0 <compensate_humidity+0x88>
 80016bc:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80016c0:	12db      	asrs	r3, r3, #11
 80016c2:	617b      	str	r3, [r7, #20]
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	fb02 f303 	mul.w	r3, r2, r3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	da01      	bge.n	80016d8 <compensate_humidity+0xa0>
 80016d4:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80016d8:	129b      	asrs	r3, r3, #10
 80016da:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80016de:	613b      	str	r3, [r7, #16]
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80016e6:	461a      	mov	r2, r3
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	fb03 f302 	mul.w	r3, r3, r2
 80016ee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	da03      	bge.n	80016fe <compensate_humidity+0xc6>
 80016f6:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80016fa:	441a      	add	r2, r3
 80016fc:	4613      	mov	r3, r2
 80016fe:	139b      	asrs	r3, r3, #14
 8001700:	61bb      	str	r3, [r7, #24]
	var3 = var5 * var2;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	fb02 f303 	mul.w	r3, r2, r3
 800170a:	617b      	str	r3, [r7, #20]
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	2b00      	cmp	r3, #0
 8001710:	da03      	bge.n	800171a <compensate_humidity+0xe2>
 8001712:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001716:	441a      	add	r2, r3
 8001718:	4613      	mov	r3, r2
 800171a:	13db      	asrs	r3, r3, #15
 800171c:	4619      	mov	r1, r3
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	2b00      	cmp	r3, #0
 8001722:	da03      	bge.n	800172c <compensate_humidity+0xf4>
 8001724:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001728:	441a      	add	r2, r3
 800172a:	4613      	mov	r3, r2
 800172c:	13db      	asrs	r3, r3, #15
 800172e:	fb03 f301 	mul.w	r3, r3, r1
 8001732:	2b00      	cmp	r3, #0
 8001734:	da00      	bge.n	8001738 <compensate_humidity+0x100>
 8001736:	337f      	adds	r3, #127	; 0x7f
 8001738:	11db      	asrs	r3, r3, #7
 800173a:	613b      	str	r3, [r7, #16]
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	7e1b      	ldrb	r3, [r3, #24]
 8001740:	461a      	mov	r2, r3
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	fb03 f302 	mul.w	r3, r3, r2
 8001748:	2b00      	cmp	r3, #0
 800174a:	da00      	bge.n	800174e <compensate_humidity+0x116>
 800174c:	330f      	adds	r3, #15
 800174e:	111b      	asrs	r3, r3, #4
 8001750:	425b      	negs	r3, r3
 8001752:	461a      	mov	r2, r3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	4413      	add	r3, r2
 8001758:	60fb      	str	r3, [r7, #12]
	var5 = (var5 < 0 ? 0 : var5);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001760:	60fb      	str	r3, [r7, #12]
	var5 = (var5 > 419430400 ? 419430400 : var5);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001768:	bfa8      	it	ge
 800176a:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 800176e:	60fb      	str	r3, [r7, #12]
	humidity = (uint32_t)(var5 / 4096);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2b00      	cmp	r3, #0
 8001774:	da01      	bge.n	800177a <compensate_humidity+0x142>
 8001776:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800177a:	131b      	asrs	r3, r3, #12
 800177c:	627b      	str	r3, [r7, #36]	; 0x24

	if (humidity > humidity_max)
 800177e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001780:	6a3b      	ldr	r3, [r7, #32]
 8001782:	429a      	cmp	r2, r3
 8001784:	d901      	bls.n	800178a <compensate_humidity+0x152>
		humidity = humidity_max;
 8001786:	6a3b      	ldr	r3, [r7, #32]
 8001788:	627b      	str	r3, [r7, #36]	; 0x24

	return humidity;
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800178c:	4618      	mov	r0, r3
 800178e:	372c      	adds	r7, #44	; 0x2c
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08a      	sub	sp, #40	; 0x28
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 80017a0:	2388      	movs	r3, #136	; 0x88
 80017a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 80017a6:	f107 030c 	add.w	r3, r7, #12
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
 80017b4:	611a      	str	r2, [r3, #16]
 80017b6:	615a      	str	r2, [r3, #20]
 80017b8:	831a      	strh	r2, [r3, #24]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 80017ba:	f107 010c 	add.w	r1, r7, #12
 80017be:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	221a      	movs	r2, #26
 80017c6:	f7ff f82a 	bl	800081e <bme280_get_regs>
 80017ca:	4603      	mov	r3, r0
 80017cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (rslt == BME280_OK) {
 80017d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d11d      	bne.n	8001814 <get_calib_data+0x7c>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	6879      	ldr	r1, [r7, #4]
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 f849 	bl	8001876 <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 80017e4:	23e1      	movs	r3, #225	; 0xe1
 80017e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 80017ea:	f107 010c 	add.w	r1, r7, #12
 80017ee:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2207      	movs	r2, #7
 80017f6:	f7ff f812 	bl	800081e <bme280_get_regs>
 80017fa:	4603      	mov	r3, r0
 80017fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 8001800:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001804:	2b00      	cmp	r3, #0
 8001806:	d105      	bne.n	8001814 <get_calib_data+0x7c>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 8001808:	f107 030c 	add.w	r3, r7, #12
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	4618      	mov	r0, r3
 8001810:	f000 f8e0 	bl	80019d4 <parse_humidity_calib_data>
		}
	}

	return rslt;
 8001814:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001818:	4618      	mov	r0, r3
 800181a:	3728      	adds	r7, #40	; 0x28
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8001820:	b480      	push	{r7}
 8001822:	b087      	sub	sp, #28
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
 800182c:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 800182e:	2301      	movs	r3, #1
 8001830:	75fb      	strb	r3, [r7, #23]
 8001832:	e016      	b.n	8001862 <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 8001834:	7dfb      	ldrb	r3, [r7, #23]
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	441a      	add	r2, r3
 800183a:	7dfb      	ldrb	r3, [r7, #23]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	3b01      	subs	r3, #1
 8001840:	68b9      	ldr	r1, [r7, #8]
 8001842:	440b      	add	r3, r1
 8001844:	7812      	ldrb	r2, [r2, #0]
 8001846:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 8001848:	7dfb      	ldrb	r3, [r7, #23]
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	441a      	add	r2, r3
 800184e:	7dfb      	ldrb	r3, [r7, #23]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	4619      	mov	r1, r3
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	440b      	add	r3, r1
 8001858:	7812      	ldrb	r2, [r2, #0]
 800185a:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 800185c:	7dfb      	ldrb	r3, [r7, #23]
 800185e:	3301      	adds	r3, #1
 8001860:	75fb      	strb	r3, [r7, #23]
 8001862:	7dfa      	ldrb	r2, [r7, #23]
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	429a      	cmp	r2, r3
 8001868:	d3e4      	bcc.n	8001834 <interleave_reg_addr+0x14>
	}
}
 800186a:	bf00      	nop
 800186c:	371c      	adds	r7, #28
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8001876:	b480      	push	{r7}
 8001878:	b085      	sub	sp, #20
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	3310      	adds	r3, #16
 8001884:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	3301      	adds	r3, #1
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	021b      	lsls	r3, r3, #8
 800188e:	b21a      	sxth	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	b21b      	sxth	r3, r3
 8001896:	4313      	orrs	r3, r2
 8001898:	b21b      	sxth	r3, r3
 800189a:	b29a      	uxth	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3303      	adds	r3, #3
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	021b      	lsls	r3, r3, #8
 80018a8:	b21a      	sxth	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	3302      	adds	r3, #2
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	b21b      	sxth	r3, r3
 80018b2:	4313      	orrs	r3, r2
 80018b4:	b21a      	sxth	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3305      	adds	r3, #5
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	021b      	lsls	r3, r3, #8
 80018c2:	b21a      	sxth	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3304      	adds	r3, #4
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	b21b      	sxth	r3, r3
 80018cc:	4313      	orrs	r3, r2
 80018ce:	b21a      	sxth	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3307      	adds	r3, #7
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	021b      	lsls	r3, r3, #8
 80018dc:	b21a      	sxth	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	3306      	adds	r3, #6
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	b21b      	sxth	r3, r3
 80018e6:	4313      	orrs	r3, r2
 80018e8:	b21b      	sxth	r3, r3
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3309      	adds	r3, #9
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	021b      	lsls	r3, r3, #8
 80018f8:	b21a      	sxth	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3308      	adds	r3, #8
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	b21b      	sxth	r3, r3
 8001902:	4313      	orrs	r3, r2
 8001904:	b21a      	sxth	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	330b      	adds	r3, #11
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	021b      	lsls	r3, r3, #8
 8001912:	b21a      	sxth	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	330a      	adds	r3, #10
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	b21b      	sxth	r3, r3
 800191c:	4313      	orrs	r3, r2
 800191e:	b21a      	sxth	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	330d      	adds	r3, #13
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	021b      	lsls	r3, r3, #8
 800192c:	b21a      	sxth	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	330c      	adds	r3, #12
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	b21b      	sxth	r3, r3
 8001936:	4313      	orrs	r3, r2
 8001938:	b21a      	sxth	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	330f      	adds	r3, #15
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	021b      	lsls	r3, r3, #8
 8001946:	b21a      	sxth	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	330e      	adds	r3, #14
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	b21b      	sxth	r3, r3
 8001950:	4313      	orrs	r3, r2
 8001952:	b21a      	sxth	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3311      	adds	r3, #17
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	021b      	lsls	r3, r3, #8
 8001960:	b21a      	sxth	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3310      	adds	r3, #16
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	b21b      	sxth	r3, r3
 800196a:	4313      	orrs	r3, r2
 800196c:	b21a      	sxth	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3313      	adds	r3, #19
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	021b      	lsls	r3, r3, #8
 800197a:	b21a      	sxth	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3312      	adds	r3, #18
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	b21b      	sxth	r3, r3
 8001984:	4313      	orrs	r3, r2
 8001986:	b21a      	sxth	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3315      	adds	r3, #21
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	021b      	lsls	r3, r3, #8
 8001994:	b21a      	sxth	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	3314      	adds	r3, #20
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	b21b      	sxth	r3, r3
 800199e:	4313      	orrs	r3, r2
 80019a0:	b21a      	sxth	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3317      	adds	r3, #23
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	021b      	lsls	r3, r3, #8
 80019ae:	b21a      	sxth	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3316      	adds	r3, #22
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	b21b      	sxth	r3, r3
 80019b8:	4313      	orrs	r3, r2
 80019ba:	b21a      	sxth	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	7e5a      	ldrb	r2, [r3, #25]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	761a      	strb	r2, [r3, #24]

}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b087      	sub	sp, #28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	3310      	adds	r3, #16
 80019e2:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3301      	adds	r3, #1
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	021b      	lsls	r3, r3, #8
 80019ec:	b21a      	sxth	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	b21b      	sxth	r3, r3
 80019f4:	4313      	orrs	r3, r2
 80019f6:	b21a      	sxth	r2, r3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	789a      	ldrb	r2, [r3, #2]
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3303      	adds	r3, #3
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	b25b      	sxtb	r3, r3
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	011b      	lsls	r3, r3, #4
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3304      	adds	r3, #4
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	b21b      	sxth	r3, r3
 8001a1c:	f003 030f 	and.w	r3, r3, #15
 8001a20:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 8001a22:	8a7a      	ldrh	r2, [r7, #18]
 8001a24:	8a3b      	ldrh	r3, [r7, #16]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	b21a      	sxth	r2, r3
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3305      	adds	r3, #5
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	b25b      	sxtb	r3, r3
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	011b      	lsls	r3, r3, #4
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3304      	adds	r3, #4
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	091b      	lsrs	r3, r3, #4
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8001a4a:	89fa      	ldrh	r2, [r7, #14]
 8001a4c:	89bb      	ldrh	r3, [r7, #12]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	b21a      	sxth	r2, r3
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3306      	adds	r3, #6
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	b25a      	sxtb	r2, r3
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8001a64:	bf00      	nop
 8001a66:	371c      	adds	r7, #28
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	460a      	mov	r2, r1
 8001a7a:	71fb      	strb	r3, [r7, #7]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 8001a80:	2300      	movs	r3, #0
 8001a82:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 8001a84:	79fa      	ldrb	r2, [r7, #7]
 8001a86:	79bb      	ldrb	r3, [r7, #6]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d002      	beq.n	8001a96 <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 8001a90:	2301      	movs	r3, #1
 8001a92:	73fb      	strb	r3, [r7, #15]
 8001a94:	e001      	b.n	8001a9a <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00b      	beq.n	8001ace <null_ptr_check+0x26>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d007      	beq.n	8001ace <null_ptr_check+0x26>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <null_ptr_check+0x26>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d102      	bne.n	8001ad4 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 8001ace:	23ff      	movs	r3, #255	; 0xff
 8001ad0:	73fb      	strb	r3, [r7, #15]
 8001ad2:	e001      	b.n	8001ad8 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <start_motor>:
    PF13     ------> OUT_A1	//motor r A1
    PF14     ------> OUT_B1	//motor l B1
*/


bool start_motor(void){
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
//	if(!_mains._fl_motor_blocked){
//		htim1.Instance->CCR1=500;
//		htim1.Instance->CCR2=500;
//		return true;
//	}
	return false;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <stop_motor>:

bool stop_motor(void){
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
//	htim1.Instance->CCR1=0;
//	htim1.Instance->CCR2=0;
	return true;
 8001afc:	2301      	movs	r3, #1
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4a07      	ldr	r2, [pc, #28]	; (8001b34 <vApplicationGetIdleTaskMemory+0x2c>)
 8001b18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	4a06      	ldr	r2, [pc, #24]	; (8001b38 <vApplicationGetIdleTaskMemory+0x30>)
 8001b1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2280      	movs	r2, #128	; 0x80
 8001b24:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8001b26:	bf00      	nop
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	20000204 	.word	0x20000204
 8001b38:	20000258 	.word	0x20000258

08001b3c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4a07      	ldr	r2, [pc, #28]	; (8001b68 <vApplicationGetTimerTaskMemory+0x2c>)
 8001b4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	4a06      	ldr	r2, [pc, #24]	; (8001b6c <vApplicationGetTimerTaskMemory+0x30>)
 8001b52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b5a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8001b5c:	bf00      	nop
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	20000458 	.word	0x20000458
 8001b6c:	200004ac 	.word	0x200004ac

08001b70 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001b70:	b5b0      	push	{r4, r5, r7, lr}
 8001b72:	b0dc      	sub	sp, #368	; 0x170
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
       
  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of Mutex_Send */
  osMutexDef(Mutex_Send);
 8001b76:	2300      	movs	r3, #0
 8001b78:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  Mutex_SendHandle = osMutexCreate(osMutex(Mutex_Send));
 8001b82:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001b86:	4618      	mov	r0, r3
 8001b88:	f006 fafa 	bl	8008180 <osMutexCreate>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	4ba7      	ldr	r3, [pc, #668]	; (8001e2c <MX_FREERTOS_Init+0x2bc>)
 8001b90:	601a      	str	r2, [r3, #0]

  /* definition and creation of Mutex_Receive_Uart2 */
  osMutexDef(Mutex_Receive_Uart2);
 8001b92:	2300      	movs	r3, #0
 8001b94:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  Mutex_Receive_Uart2Handle = osMutexCreate(osMutex(Mutex_Receive_Uart2));
 8001b9e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f006 faec 	bl	8008180 <osMutexCreate>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	4ba1      	ldr	r3, [pc, #644]	; (8001e30 <MX_FREERTOS_Init+0x2c0>)
 8001bac:	601a      	str	r2, [r3, #0]

  /* definition and creation of Mutex_Receive_Uart3 */
  osMutexDef(Mutex_Receive_Uart3);
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  Mutex_Receive_Uart3Handle = osMutexCreate(osMutex(Mutex_Receive_Uart3));
 8001bba:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f006 fade 	bl	8008180 <osMutexCreate>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	4b9b      	ldr	r3, [pc, #620]	; (8001e34 <MX_FREERTOS_Init+0x2c4>)
 8001bc8:	601a      	str	r2, [r3, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of Fast_Timer */
  osTimerDef(Fast_Timer, Callback_Fast_Timer);
 8001bca:	4b9b      	ldr	r3, [pc, #620]	; (8001e38 <MX_FREERTOS_Init+0x2c8>)
 8001bcc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  Fast_TimerHandle = osTimerCreate(osTimer(Fast_Timer), osTimerOnce, NULL);
 8001bd6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4618      	mov	r0, r3
 8001be0:	f006 fa54 	bl	800808c <osTimerCreate>
 8001be4:	4602      	mov	r2, r0
 8001be6:	4b95      	ldr	r3, [pc, #596]	; (8001e3c <MX_FREERTOS_Init+0x2cc>)
 8001be8:	601a      	str	r2, [r3, #0]

  /* definition and creation of Slow_Timer */
  osTimerDef(Slow_Timer, Callback_Slow_Timer);
 8001bea:	4b95      	ldr	r3, [pc, #596]	; (8001e40 <MX_FREERTOS_Init+0x2d0>)
 8001bec:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  Slow_TimerHandle = osTimerCreate(osTimer(Slow_Timer), osTimerOnce, NULL);
 8001bf6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f006 fa44 	bl	800808c <osTimerCreate>
 8001c04:	4602      	mov	r2, r0
 8001c06:	4b8f      	ldr	r3, [pc, #572]	; (8001e44 <MX_FREERTOS_Init+0x2d4>)
 8001c08:	601a      	str	r2, [r3, #0]

  /* definition and creation of Samplig_Timer */
  osTimerDef(Samplig_Timer, Callback_Sampling_Timer);
 8001c0a:	4b8f      	ldr	r3, [pc, #572]	; (8001e48 <MX_FREERTOS_Init+0x2d8>)
 8001c0c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8001c10:	2300      	movs	r3, #0
 8001c12:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  Samplig_TimerHandle = osTimerCreate(osTimer(Samplig_Timer), osTimerPeriodic, NULL);
 8001c16:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f006 fa34 	bl	800808c <osTimerCreate>
 8001c24:	4602      	mov	r2, r0
 8001c26:	4b89      	ldr	r3, [pc, #548]	; (8001e4c <MX_FREERTOS_Init+0x2dc>)
 8001c28:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of Queue_Reference_Temp */
  osMessageQDef(Queue_Reference_Temp, 1, uint8_t);
 8001c2a:	4b89      	ldr	r3, [pc, #548]	; (8001e50 <MX_FREERTOS_Init+0x2e0>)
 8001c2c:	f507 7498 	add.w	r4, r7, #304	; 0x130
 8001c30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue_Reference_TempHandle = osMessageCreate(osMessageQ(Queue_Reference_Temp), NULL);
 8001c36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f006 fab7 	bl	80081b0 <osMessageCreate>
 8001c42:	4602      	mov	r2, r0
 8001c44:	4b83      	ldr	r3, [pc, #524]	; (8001e54 <MX_FREERTOS_Init+0x2e4>)
 8001c46:	601a      	str	r2, [r3, #0]

  /* definition and creation of Queue_Refernce_Light */
  osMessageQDef(Queue_Refernce_Light, 1, uint8_t);
 8001c48:	4b81      	ldr	r3, [pc, #516]	; (8001e50 <MX_FREERTOS_Init+0x2e0>)
 8001c4a:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8001c4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue_Refernce_LightHandle = osMessageCreate(osMessageQ(Queue_Refernce_Light), NULL);
 8001c54:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f006 faa8 	bl	80081b0 <osMessageCreate>
 8001c60:	4602      	mov	r2, r0
 8001c62:	4b7d      	ldr	r3, [pc, #500]	; (8001e58 <MX_FREERTOS_Init+0x2e8>)
 8001c64:	601a      	str	r2, [r3, #0]

  /* definition and creation of Queue_Light_Mode */
  osMessageQDef(Queue_Light_Mode, 1, uint8_t);
 8001c66:	4b7a      	ldr	r3, [pc, #488]	; (8001e50 <MX_FREERTOS_Init+0x2e0>)
 8001c68:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8001c6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue_Light_ModeHandle = osMessageCreate(osMessageQ(Queue_Light_Mode), NULL);
 8001c72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c76:	2100      	movs	r1, #0
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f006 fa99 	bl	80081b0 <osMessageCreate>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	4b76      	ldr	r3, [pc, #472]	; (8001e5c <MX_FREERTOS_Init+0x2ec>)
 8001c82:	601a      	str	r2, [r3, #0]

  /* definition and creation of Queue_Real_Temp */
  osMessageQDef(Queue_Real_Temp, 1, float);
 8001c84:	4b76      	ldr	r3, [pc, #472]	; (8001e60 <MX_FREERTOS_Init+0x2f0>)
 8001c86:	f507 7480 	add.w	r4, r7, #256	; 0x100
 8001c8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue_Real_TempHandle = osMessageCreate(osMessageQ(Queue_Real_Temp), NULL);
 8001c90:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001c94:	2100      	movs	r1, #0
 8001c96:	4618      	mov	r0, r3
 8001c98:	f006 fa8a 	bl	80081b0 <osMessageCreate>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	4b71      	ldr	r3, [pc, #452]	; (8001e64 <MX_FREERTOS_Init+0x2f4>)
 8001ca0:	601a      	str	r2, [r3, #0]

  /* definition and creation of Queue_Real_Hum */
  osMessageQDef(Queue_Real_Hum, 1, uint8_t);
 8001ca2:	4b6b      	ldr	r3, [pc, #428]	; (8001e50 <MX_FREERTOS_Init+0x2e0>)
 8001ca4:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 8001ca8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001caa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue_Real_HumHandle = osMessageCreate(osMessageQ(Queue_Real_Hum), NULL);
 8001cae:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f006 fa7b 	bl	80081b0 <osMessageCreate>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	4b6a      	ldr	r3, [pc, #424]	; (8001e68 <MX_FREERTOS_Init+0x2f8>)
 8001cbe:	601a      	str	r2, [r3, #0]

  /* definition and creation of Queue_Real_Lumin */
  osMessageQDef(Queue_Real_Lumin, 1, uint16_t);
 8001cc0:	4b6a      	ldr	r3, [pc, #424]	; (8001e6c <MX_FREERTOS_Init+0x2fc>)
 8001cc2:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 8001cc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Queue_Real_LuminHandle = osMessageCreate(osMessageQ(Queue_Real_Lumin), NULL);
 8001ccc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f006 fa6c 	bl	80081b0 <osMessageCreate>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	4b65      	ldr	r3, [pc, #404]	; (8001e70 <MX_FREERTOS_Init+0x300>)
 8001cdc:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of vTaskRunning */
  osThreadDef(vTaskRunning, StartTaskRunning, osPriorityIdle, 0, 128);
 8001cde:	4b65      	ldr	r3, [pc, #404]	; (8001e74 <MX_FREERTOS_Init+0x304>)
 8001ce0:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8001ce4:	461d      	mov	r5, r3
 8001ce6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ce8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  vTaskRunningHandle = osThreadCreate(osThread(vTaskRunning), NULL);
 8001cf2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f006 f967 	bl	8007fcc <osThreadCreate>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	4b5d      	ldr	r3, [pc, #372]	; (8001e78 <MX_FREERTOS_Init+0x308>)
 8001d02:	601a      	str	r2, [r3, #0]

  /* definition and creation of vTaskSendInfo */
  osThreadDef(vTaskSendInfo, StartTaskSendInfo, osPriorityHigh, 0, 128);
 8001d04:	4b5d      	ldr	r3, [pc, #372]	; (8001e7c <MX_FREERTOS_Init+0x30c>)
 8001d06:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8001d0a:	461d      	mov	r5, r3
 8001d0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  vTaskSendInfoHandle = osThreadCreate(osThread(vTaskSendInfo), NULL);
 8001d18:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f006 f954 	bl	8007fcc <osThreadCreate>
 8001d24:	4602      	mov	r2, r0
 8001d26:	4b56      	ldr	r3, [pc, #344]	; (8001e80 <MX_FREERTOS_Init+0x310>)
 8001d28:	601a      	str	r2, [r3, #0]

  /* definition and creation of vTaskProcessInf */
  osThreadDef(vTaskProcessInf, StartTaskProcessInfo, osPriorityHigh, 0, 128);
 8001d2a:	4b56      	ldr	r3, [pc, #344]	; (8001e84 <MX_FREERTOS_Init+0x314>)
 8001d2c:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001d30:	461d      	mov	r5, r3
 8001d32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  vTaskProcessInfHandle = osThreadCreate(osThread(vTaskProcessInf), NULL);
 8001d3e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001d42:	2100      	movs	r1, #0
 8001d44:	4618      	mov	r0, r3
 8001d46:	f006 f941 	bl	8007fcc <osThreadCreate>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	4b4e      	ldr	r3, [pc, #312]	; (8001e88 <MX_FREERTOS_Init+0x318>)
 8001d4e:	601a      	str	r2, [r3, #0]

  /* definition and creation of vTaskAquireTemp */
  osThreadDef(vTaskAquireTemp, StartTaskAquireTemp, osPriorityAboveNormal, 0, 128);
 8001d50:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d54:	4a4d      	ldr	r2, [pc, #308]	; (8001e8c <MX_FREERTOS_Init+0x31c>)
 8001d56:	461c      	mov	r4, r3
 8001d58:	4615      	mov	r5, r2
 8001d5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d5e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  vTaskAquireTempHandle = osThreadCreate(osThread(vTaskAquireTemp), NULL);
 8001d66:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f006 f92d 	bl	8007fcc <osThreadCreate>
 8001d72:	4602      	mov	r2, r0
 8001d74:	4b46      	ldr	r3, [pc, #280]	; (8001e90 <MX_FREERTOS_Init+0x320>)
 8001d76:	601a      	str	r2, [r3, #0]

  /* definition and creation of vTaskAquireBrig */
  osThreadDef(vTaskAquireBrig, StartTaskAquireBright, osPriorityAboveNormal, 0, 128);
 8001d78:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d7c:	4a45      	ldr	r2, [pc, #276]	; (8001e94 <MX_FREERTOS_Init+0x324>)
 8001d7e:	461c      	mov	r4, r3
 8001d80:	4615      	mov	r5, r2
 8001d82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d86:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  vTaskAquireBrigHandle = osThreadCreate(osThread(vTaskAquireBrig), NULL);
 8001d8e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d92:	2100      	movs	r1, #0
 8001d94:	4618      	mov	r0, r3
 8001d96:	f006 f919 	bl	8007fcc <osThreadCreate>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	4b3e      	ldr	r3, [pc, #248]	; (8001e98 <MX_FREERTOS_Init+0x328>)
 8001d9e:	601a      	str	r2, [r3, #0]

  /* definition and creation of vTaskSetSecureM */
  osThreadDef(vTaskSetSecureM, StartTaskSetSecureMode, osPriorityNormal, 0, 128);
 8001da0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001da4:	4a3d      	ldr	r2, [pc, #244]	; (8001e9c <MX_FREERTOS_Init+0x32c>)
 8001da6:	461c      	mov	r4, r3
 8001da8:	4615      	mov	r5, r2
 8001daa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001db2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  vTaskSetSecureMHandle = osThreadCreate(osThread(vTaskSetSecureM), NULL);
 8001db6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001dba:	2100      	movs	r1, #0
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f006 f905 	bl	8007fcc <osThreadCreate>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	4b36      	ldr	r3, [pc, #216]	; (8001ea0 <MX_FREERTOS_Init+0x330>)
 8001dc6:	601a      	str	r2, [r3, #0]

  /* definition and creation of vTaskRlControl */
  osThreadDef(vTaskRlControl, StartTaskRlControl, osPriorityNormal, 0, 128);
 8001dc8:	f107 031c 	add.w	r3, r7, #28
 8001dcc:	4a35      	ldr	r2, [pc, #212]	; (8001ea4 <MX_FREERTOS_Init+0x334>)
 8001dce:	461c      	mov	r4, r3
 8001dd0:	4615      	mov	r5, r2
 8001dd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dd6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001dda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  vTaskRlControlHandle = osThreadCreate(osThread(vTaskRlControl), NULL);
 8001dde:	f107 031c 	add.w	r3, r7, #28
 8001de2:	2100      	movs	r1, #0
 8001de4:	4618      	mov	r0, r3
 8001de6:	f006 f8f1 	bl	8007fcc <osThreadCreate>
 8001dea:	4602      	mov	r2, r0
 8001dec:	4b2e      	ldr	r3, [pc, #184]	; (8001ea8 <MX_FREERTOS_Init+0x338>)
 8001dee:	601a      	str	r2, [r3, #0]

  /* definition and creation of vTaskLightActua */
  osThreadDef(vTaskLightActua, StartTaskLightActuator, osPriorityNormal, 0, 128);
 8001df0:	463b      	mov	r3, r7
 8001df2:	4a2e      	ldr	r2, [pc, #184]	; (8001eac <MX_FREERTOS_Init+0x33c>)
 8001df4:	461c      	mov	r4, r3
 8001df6:	4615      	mov	r5, r2
 8001df8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dfc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  vTaskLightActuaHandle = osThreadCreate(osThread(vTaskLightActua), NULL);
 8001e04:	463b      	mov	r3, r7
 8001e06:	2100      	movs	r1, #0
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f006 f8df 	bl	8007fcc <osThreadCreate>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	4b27      	ldr	r3, [pc, #156]	; (8001eb0 <MX_FREERTOS_Init+0x340>)
 8001e12:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osTimerStart(Samplig_TimerHandle,100);
 8001e14:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <MX_FREERTOS_Init+0x2dc>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2164      	movs	r1, #100	; 0x64
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f006 f96a 	bl	80080f4 <osTimerStart>
  /* USER CODE END RTOS_THREADS */

}
 8001e20:	bf00      	nop
 8001e22:	f507 77b8 	add.w	r7, r7, #368	; 0x170
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bdb0      	pop	{r4, r5, r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20004784 	.word	0x20004784
 8001e30:	2000477c 	.word	0x2000477c
 8001e34:	20004794 	.word	0x20004794
 8001e38:	0800241d 	.word	0x0800241d
 8001e3c:	20004790 	.word	0x20004790
 8001e40:	0800244d 	.word	0x0800244d
 8001e44:	2000478c 	.word	0x2000478c
 8001e48:	0800246d 	.word	0x0800246d
 8001e4c:	20004774 	.word	0x20004774
 8001e50:	0800e4b8 	.word	0x0800e4b8
 8001e54:	20004770 	.word	0x20004770
 8001e58:	200047a4 	.word	0x200047a4
 8001e5c:	20004780 	.word	0x20004780
 8001e60:	0800e4c8 	.word	0x0800e4c8
 8001e64:	200047a8 	.word	0x200047a8
 8001e68:	200047b0 	.word	0x200047b0
 8001e6c:	0800e4d8 	.word	0x0800e4d8
 8001e70:	200047ac 	.word	0x200047ac
 8001e74:	0800e4f8 	.word	0x0800e4f8
 8001e78:	20004778 	.word	0x20004778
 8001e7c:	0800e524 	.word	0x0800e524
 8001e80:	200047a0 	.word	0x200047a0
 8001e84:	0800e550 	.word	0x0800e550
 8001e88:	200047b8 	.word	0x200047b8
 8001e8c:	0800e57c 	.word	0x0800e57c
 8001e90:	200047b4 	.word	0x200047b4
 8001e94:	0800e5a8 	.word	0x0800e5a8
 8001e98:	20004788 	.word	0x20004788
 8001e9c:	0800e5d4 	.word	0x0800e5d4
 8001ea0:	200047bc 	.word	0x200047bc
 8001ea4:	0800e600 	.word	0x0800e600
 8001ea8:	20004798 	.word	0x20004798
 8001eac:	0800e62c 	.word	0x0800e62c
 8001eb0:	2000479c 	.word	0x2000479c

08001eb4 <StartTaskRunning>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskRunning */
void StartTaskRunning(void const * argument)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskRunning */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB,LD1_Pin);
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	4804      	ldr	r0, [pc, #16]	; (8001ed0 <StartTaskRunning+0x1c>)
 8001ec0:	f002 f917 	bl	80040f2 <HAL_GPIO_TogglePin>
	  osDelay(500);
 8001ec4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ec8:	f006 f8cc 	bl	8008064 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB,LD1_Pin);
 8001ecc:	e7f6      	b.n	8001ebc <StartTaskRunning+0x8>
 8001ece:	bf00      	nop
 8001ed0:	40020400 	.word	0x40020400

08001ed4 <StartTaskSendInfo>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSendInfo */
void StartTaskSendInfo(void const * argument)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSendInfo */
  /* Infinite loop */
  for(;;)
  {
	  uint8_t *poiter_to_text;
	  poiter_to_text= pvPortMalloc(10);
 8001edc:	200a      	movs	r0, #10
 8001ede:	f008 fe7d 	bl	800abdc <pvPortMalloc>
 8001ee2:	60f8      	str	r0, [r7, #12]

	  switch (_mains._fl_changed){
 8001ee4:	4b8c      	ldr	r3, [pc, #560]	; (8002118 <StartTaskSendInfo+0x244>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	2b0c      	cmp	r3, #12
 8001eec:	d84e      	bhi.n	8001f8c <StartTaskSendInfo+0xb8>
 8001eee:	a201      	add	r2, pc, #4	; (adr r2, 8001ef4 <StartTaskSendInfo+0x20>)
 8001ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef4:	08001f29 	.word	0x08001f29
 8001ef8:	08001f3b 	.word	0x08001f3b
 8001efc:	08001f4b 	.word	0x08001f4b
 8001f00:	08001f8d 	.word	0x08001f8d
 8001f04:	08001f8d 	.word	0x08001f8d
 8001f08:	08001f8d 	.word	0x08001f8d
 8001f0c:	08001f8d 	.word	0x08001f8d
 8001f10:	08001f8d 	.word	0x08001f8d
 8001f14:	08001f8d 	.word	0x08001f8d
 8001f18:	08001f8d 	.word	0x08001f8d
 8001f1c:	08001f5b 	.word	0x08001f5b
 8001f20:	08001f6d 	.word	0x08001f6d
 8001f24:	08001f7d 	.word	0x08001f7d
	  case 1 : // reference temperature changed via bth
		  sprintf((char*)poiter_to_text,"RT%d\n",_mains._setpoint_temp);
 8001f28:	4b7b      	ldr	r3, [pc, #492]	; (8002118 <StartTaskSendInfo+0x244>)
 8001f2a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	497a      	ldr	r1, [pc, #488]	; (800211c <StartTaskSendInfo+0x248>)
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f00a fb7c 	bl	800c630 <siprintf>
		  break;
 8001f38:	e02f      	b.n	8001f9a <StartTaskSendInfo+0xc6>
	  case 2 : // light mode changed via bth
		  sprintf((char*)poiter_to_text,"ML%d\n",_mains._fl_lux_mode);
 8001f3a:	4b77      	ldr	r3, [pc, #476]	; (8002118 <StartTaskSendInfo+0x244>)
 8001f3c:	795b      	ldrb	r3, [r3, #5]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	4977      	ldr	r1, [pc, #476]	; (8002120 <StartTaskSendInfo+0x24c>)
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f00a fb74 	bl	800c630 <siprintf>
		  break;
 8001f48:	e027      	b.n	8001f9a <StartTaskSendInfo+0xc6>
	  case 3 : // light reference changed via bth
		  sprintf((char*)poiter_to_text,"RL%d\n",_mains._setpoint_lux);
 8001f4a:	4b73      	ldr	r3, [pc, #460]	; (8002118 <StartTaskSendInfo+0x244>)
 8001f4c:	7b9b      	ldrb	r3, [r3, #14]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	4974      	ldr	r1, [pc, #464]	; (8002124 <StartTaskSendInfo+0x250>)
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f00a fb6c 	bl	800c630 <siprintf>
		  break;
 8001f58:	e01f      	b.n	8001f9a <StartTaskSendInfo+0xc6>
	  case 11 : // reference temperature changed via uart3
		  sprintf((char*)poiter_to_text,"RT%d\r\n",_mains._setpoint_temp);
 8001f5a:	4b6f      	ldr	r3, [pc, #444]	; (8002118 <StartTaskSendInfo+0x244>)
 8001f5c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001f60:	461a      	mov	r2, r3
 8001f62:	4971      	ldr	r1, [pc, #452]	; (8002128 <StartTaskSendInfo+0x254>)
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f00a fb63 	bl	800c630 <siprintf>
		  break;
 8001f6a:	e016      	b.n	8001f9a <StartTaskSendInfo+0xc6>
	  case 12 : // light mode changed via uart3
		  sprintf((char*)poiter_to_text,"ML%d\r\n",_mains._fl_lux_mode);
 8001f6c:	4b6a      	ldr	r3, [pc, #424]	; (8002118 <StartTaskSendInfo+0x244>)
 8001f6e:	795b      	ldrb	r3, [r3, #5]
 8001f70:	461a      	mov	r2, r3
 8001f72:	496e      	ldr	r1, [pc, #440]	; (800212c <StartTaskSendInfo+0x258>)
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f00a fb5b 	bl	800c630 <siprintf>
		  break;
 8001f7a:	e00e      	b.n	8001f9a <StartTaskSendInfo+0xc6>
	  case 13 : // light reference changed via uart3
		  sprintf((char*)poiter_to_text,"RL%d\r\n",_mains._setpoint_lux);
 8001f7c:	4b66      	ldr	r3, [pc, #408]	; (8002118 <StartTaskSendInfo+0x244>)
 8001f7e:	7b9b      	ldrb	r3, [r3, #14]
 8001f80:	461a      	mov	r2, r3
 8001f82:	496b      	ldr	r1, [pc, #428]	; (8002130 <StartTaskSendInfo+0x25c>)
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	f00a fb53 	bl	800c630 <siprintf>
		  break;
 8001f8a:	e006      	b.n	8001f9a <StartTaskSendInfo+0xc6>
	  default:
		  sprintf((char*)poiter_to_text,"0\n");
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4a69      	ldr	r2, [pc, #420]	; (8002134 <StartTaskSendInfo+0x260>)
 8001f90:	8811      	ldrh	r1, [r2, #0]
 8001f92:	7892      	ldrb	r2, [r2, #2]
 8001f94:	8019      	strh	r1, [r3, #0]
 8001f96:	709a      	strb	r2, [r3, #2]
		  break;
 8001f98:	bf00      	nop
	  }
	  if((_mains._fl_changed>0)&&(_mains._fl_changed<10)){
 8001f9a:	4b5f      	ldr	r3, [pc, #380]	; (8002118 <StartTaskSendInfo+0x244>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00a      	beq.n	8001fb8 <StartTaskSendInfo+0xe4>
 8001fa2:	4b5d      	ldr	r3, [pc, #372]	; (8002118 <StartTaskSendInfo+0x244>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b09      	cmp	r3, #9
 8001fa8:	d806      	bhi.n	8001fb8 <StartTaskSendInfo+0xe4>
		  _mains._fl_changed=0;
 8001faa:	4b5b      	ldr	r3, [pc, #364]	; (8002118 <StartTaskSendInfo+0x244>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	701a      	strb	r2, [r3, #0]
	//	  mutex take
		  send_uart3(poiter_to_text);
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f001 fc8d 	bl	80038d0 <send_uart3>
 8001fb6:	e00e      	b.n	8001fd6 <StartTaskSendInfo+0x102>
	//	  mutex_give
	  }
	  else if(_mains._fl_changed>10){
 8001fb8:	4b57      	ldr	r3, [pc, #348]	; (8002118 <StartTaskSendInfo+0x244>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b0a      	cmp	r3, #10
 8001fbe:	d90a      	bls.n	8001fd6 <StartTaskSendInfo+0x102>
		  _mains._fl_changed=0;
 8001fc0:	4b55      	ldr	r3, [pc, #340]	; (8002118 <StartTaskSendInfo+0x244>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	701a      	strb	r2, [r3, #0]
	  	 //	  mutex take
	  	  if(verifyConnection()){
 8001fc6:	f000 fb3d 	bl	8002644 <verifyConnection>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d002      	beq.n	8001fd6 <StartTaskSendInfo+0x102>
	  		  send_bth(poiter_to_text);
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f000 fb47 	bl	8002664 <send_bth>
	  	  }
	  	//	  mutex_give
	  }
	  vPortFree(poiter_to_text);
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f008 fec8 	bl	800ad6c <vPortFree>
	  osDelay(500);
 8001fdc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fe0:	f006 f840 	bl	8008064 <osDelay>

	  poiter_to_text= pvPortMalloc(10);
 8001fe4:	200a      	movs	r0, #10
 8001fe6:	f008 fdf9 	bl	800abdc <pvPortMalloc>
 8001fea:	60f8      	str	r0, [r7, #12]
	  switch (_mains._fl_sys_changed){
 8001fec:	4b4a      	ldr	r3, [pc, #296]	; (8002118 <StartTaskSendInfo+0x244>)
 8001fee:	785b      	ldrb	r3, [r3, #1]
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	2b06      	cmp	r3, #6
 8001ff4:	d86f      	bhi.n	80020d6 <StartTaskSendInfo+0x202>
 8001ff6:	a201      	add	r2, pc, #4	; (adr r2, 8001ffc <StartTaskSendInfo+0x128>)
 8001ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffc:	08002019 	.word	0x08002019
 8002000:	08002075 	.word	0x08002075
 8002004:	08002075 	.word	0x08002075
 8002008:	080020a1 	.word	0x080020a1
 800200c:	080020a1 	.word	0x080020a1
 8002010:	080020a1 	.word	0x080020a1
 8002014:	080020a1 	.word	0x080020a1
	  case 1 : // temperature changed sensor
		  sprintf((char*)poiter_to_text,"T%d,%d\r\n",(_mains._actual_temp/10),(_mains._actual_temp%10));
 8002018:	4b3f      	ldr	r3, [pc, #252]	; (8002118 <StartTaskSendInfo+0x244>)
 800201a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800201e:	4a46      	ldr	r2, [pc, #280]	; (8002138 <StartTaskSendInfo+0x264>)
 8002020:	fb82 1203 	smull	r1, r2, r2, r3
 8002024:	1092      	asrs	r2, r2, #2
 8002026:	17db      	asrs	r3, r3, #31
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	b21b      	sxth	r3, r3
 800202c:	4618      	mov	r0, r3
 800202e:	4b3a      	ldr	r3, [pc, #232]	; (8002118 <StartTaskSendInfo+0x244>)
 8002030:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8002034:	4b40      	ldr	r3, [pc, #256]	; (8002138 <StartTaskSendInfo+0x264>)
 8002036:	fb83 1302 	smull	r1, r3, r3, r2
 800203a:	1099      	asrs	r1, r3, #2
 800203c:	17d3      	asrs	r3, r2, #31
 800203e:	1ac9      	subs	r1, r1, r3
 8002040:	460b      	mov	r3, r1
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	440b      	add	r3, r1
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	b21b      	sxth	r3, r3
 800204c:	4602      	mov	r2, r0
 800204e:	493b      	ldr	r1, [pc, #236]	; (800213c <StartTaskSendInfo+0x268>)
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f00a faed 	bl	800c630 <siprintf>
		  _mains._fl_sys_changed &= ~(1);
 8002056:	4b30      	ldr	r3, [pc, #192]	; (8002118 <StartTaskSendInfo+0x244>)
 8002058:	785b      	ldrb	r3, [r3, #1]
 800205a:	f023 0301 	bic.w	r3, r3, #1
 800205e:	b2da      	uxtb	r2, r3
 8002060:	4b2d      	ldr	r3, [pc, #180]	; (8002118 <StartTaskSendInfo+0x244>)
 8002062:	705a      	strb	r2, [r3, #1]
		  _mains._fl_sys_changed |= (128);
 8002064:	4b2c      	ldr	r3, [pc, #176]	; (8002118 <StartTaskSendInfo+0x244>)
 8002066:	785b      	ldrb	r3, [r3, #1]
 8002068:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800206c:	b2da      	uxtb	r2, r3
 800206e:	4b2a      	ldr	r3, [pc, #168]	; (8002118 <StartTaskSendInfo+0x244>)
 8002070:	705a      	strb	r2, [r3, #1]
	  	  break;
 8002072:	e037      	b.n	80020e4 <StartTaskSendInfo+0x210>
	  case 2 : // humidity changed sensor
	  case 3 : // humidity changed sensor
	  	  sprintf((char*)poiter_to_text,"H%d\r\n",_mains._actual_humm);
 8002074:	4b28      	ldr	r3, [pc, #160]	; (8002118 <StartTaskSendInfo+0x244>)
 8002076:	7bdb      	ldrb	r3, [r3, #15]
 8002078:	461a      	mov	r2, r3
 800207a:	4931      	ldr	r1, [pc, #196]	; (8002140 <StartTaskSendInfo+0x26c>)
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f00a fad7 	bl	800c630 <siprintf>
	  	_mains._fl_sys_changed &= ~(2);
 8002082:	4b25      	ldr	r3, [pc, #148]	; (8002118 <StartTaskSendInfo+0x244>)
 8002084:	785b      	ldrb	r3, [r3, #1]
 8002086:	f023 0302 	bic.w	r3, r3, #2
 800208a:	b2da      	uxtb	r2, r3
 800208c:	4b22      	ldr	r3, [pc, #136]	; (8002118 <StartTaskSendInfo+0x244>)
 800208e:	705a      	strb	r2, [r3, #1]
	  	_mains._fl_sys_changed |= (128);
 8002090:	4b21      	ldr	r3, [pc, #132]	; (8002118 <StartTaskSendInfo+0x244>)
 8002092:	785b      	ldrb	r3, [r3, #1]
 8002094:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002098:	b2da      	uxtb	r2, r3
 800209a:	4b1f      	ldr	r3, [pc, #124]	; (8002118 <StartTaskSendInfo+0x244>)
 800209c:	705a      	strb	r2, [r3, #1]
	  	  break;
 800209e:	e021      	b.n	80020e4 <StartTaskSendInfo+0x210>
	  case 4 : // light changed sensor
	  case 5 : // light changed sensor
	  case 6 : // light changed sensor
	  case 7 : // light changed sensor
	  	  sprintf((char*)poiter_to_text,"L%d\r\n",(_mains._actual_lux/10));
 80020a0:	4b1d      	ldr	r3, [pc, #116]	; (8002118 <StartTaskSendInfo+0x244>)
 80020a2:	899b      	ldrh	r3, [r3, #12]
 80020a4:	4a27      	ldr	r2, [pc, #156]	; (8002144 <StartTaskSendInfo+0x270>)
 80020a6:	fba2 2303 	umull	r2, r3, r2, r3
 80020aa:	08db      	lsrs	r3, r3, #3
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	461a      	mov	r2, r3
 80020b0:	4925      	ldr	r1, [pc, #148]	; (8002148 <StartTaskSendInfo+0x274>)
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f00a fabc 	bl	800c630 <siprintf>
	  	_mains._fl_sys_changed &= ~(4);
 80020b8:	4b17      	ldr	r3, [pc, #92]	; (8002118 <StartTaskSendInfo+0x244>)
 80020ba:	785b      	ldrb	r3, [r3, #1]
 80020bc:	f023 0304 	bic.w	r3, r3, #4
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	4b15      	ldr	r3, [pc, #84]	; (8002118 <StartTaskSendInfo+0x244>)
 80020c4:	705a      	strb	r2, [r3, #1]
	  	_mains._fl_sys_changed |= (128);
 80020c6:	4b14      	ldr	r3, [pc, #80]	; (8002118 <StartTaskSendInfo+0x244>)
 80020c8:	785b      	ldrb	r3, [r3, #1]
 80020ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	4b11      	ldr	r3, [pc, #68]	; (8002118 <StartTaskSendInfo+0x244>)
 80020d2:	705a      	strb	r2, [r3, #1]
	  	  break;
 80020d4:	e006      	b.n	80020e4 <StartTaskSendInfo+0x210>
	  default:
		  sprintf((char*)poiter_to_text,"0\n");
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	4a16      	ldr	r2, [pc, #88]	; (8002134 <StartTaskSendInfo+0x260>)
 80020da:	8811      	ldrh	r1, [r2, #0]
 80020dc:	7892      	ldrb	r2, [r2, #2]
 80020de:	8019      	strh	r1, [r3, #0]
 80020e0:	709a      	strb	r2, [r3, #2]
		  break;
 80020e2:	bf00      	nop
	  }
	  if(_mains._fl_sys_changed>0){
 80020e4:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <StartTaskSendInfo+0x244>)
 80020e6:	785b      	ldrb	r3, [r3, #1]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00d      	beq.n	8002108 <StartTaskSendInfo+0x234>
		  //	  mutex take
		  _mains._fl_sys_changed=0;
 80020ec:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <StartTaskSendInfo+0x244>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	705a      	strb	r2, [r3, #1]
		  send_uart3(poiter_to_text);
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f001 fbec 	bl	80038d0 <send_uart3>
		  if(verifyConnection()){
 80020f8:	f000 faa4 	bl	8002644 <verifyConnection>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d002      	beq.n	8002108 <StartTaskSendInfo+0x234>
			  send_bth(poiter_to_text);
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 faae 	bl	8002664 <send_bth>
		  }
	  }
	  //	  mutex_give
	  vPortFree(poiter_to_text);
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f008 fe2f 	bl	800ad6c <vPortFree>
	  osDelay(500);
 800210e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002112:	f005 ffa7 	bl	8008064 <osDelay>
  {
 8002116:	e6e1      	b.n	8001edc <StartTaskSendInfo+0x8>
 8002118:	20004710 	.word	0x20004710
 800211c:	0800e648 	.word	0x0800e648
 8002120:	0800e650 	.word	0x0800e650
 8002124:	0800e658 	.word	0x0800e658
 8002128:	0800e660 	.word	0x0800e660
 800212c:	0800e668 	.word	0x0800e668
 8002130:	0800e670 	.word	0x0800e670
 8002134:	0800e678 	.word	0x0800e678
 8002138:	66666667 	.word	0x66666667
 800213c:	0800e67c 	.word	0x0800e67c
 8002140:	0800e688 	.word	0x0800e688
 8002144:	cccccccd 	.word	0xcccccccd
 8002148:	0800e690 	.word	0x0800e690

0800214c <StartTaskProcessInfo>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskProcessInfo */
void StartTaskProcessInfo(void const * argument)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskProcessInfo */
  /* Infinite loop */
  for(;;)
  {
//	  uint8_t received_value=0;
	  ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8002154:	f04f 31ff 	mov.w	r1, #4294967295
 8002158:	2001      	movs	r0, #1
 800215a:	f007 fd45 	bl	8009be8 <ulTaskNotifyTake>
//	  printf("Process_Info_function\n");
	  if(uart2_received_flag){
 800215e:	4b0b      	ldr	r3, [pc, #44]	; (800218c <StartTaskProcessInfo+0x40>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d004      	beq.n	8002170 <StartTaskProcessInfo+0x24>
		  uart2_received_flag=0;
 8002166:	4b09      	ldr	r3, [pc, #36]	; (800218c <StartTaskProcessInfo+0x40>)
 8002168:	2200      	movs	r2, #0
 800216a:	701a      	strb	r2, [r3, #0]
		  receive_bth();
 800216c:	f000 fa98 	bl	80026a0 <receive_bth>
	  }
	  if(uart3_received_flag){
 8002170:	4b07      	ldr	r3, [pc, #28]	; (8002190 <StartTaskProcessInfo+0x44>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d004      	beq.n	8002182 <StartTaskProcessInfo+0x36>
		  uart3_received_flag=0;
 8002178:	4b05      	ldr	r3, [pc, #20]	; (8002190 <StartTaskProcessInfo+0x44>)
 800217a:	2200      	movs	r2, #0
 800217c:	701a      	strb	r2, [r3, #0]
//		  printf("recebeu");
		  receive_uart3();
 800217e:	f001 fbc5 	bl	800390c <receive_uart3>
	  }
    osDelay(1);
 8002182:	2001      	movs	r0, #1
 8002184:	f005 ff6e 	bl	8008064 <osDelay>
	  ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8002188:	e7e4      	b.n	8002154 <StartTaskProcessInfo+0x8>
 800218a:	bf00      	nop
 800218c:	200008ba 	.word	0x200008ba
 8002190:	200008bb 	.word	0x200008bb
 8002194:	00000000 	.word	0x00000000

08002198 <StartTaskAquireTemp>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskAquireTemp */
void StartTaskAquireTemp(void const * argument)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
	  /* FORCED*/
	  int16_t temperature;
	  static int16_t last_temperature=0;
	  uint8_t humidity;
	  static uint8_t last_humidity=0;
	  rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
 80021a0:	492f      	ldr	r1, [pc, #188]	; (8002260 <StartTaskAquireTemp+0xc8>)
 80021a2:	2001      	movs	r0, #1
 80021a4:	f7fe fc39 	bl	8000a1a <bme280_set_sensor_mode>
 80021a8:	4603      	mov	r3, r0
 80021aa:	461a      	mov	r2, r3
 80021ac:	4b2d      	ldr	r3, [pc, #180]	; (8002264 <StartTaskAquireTemp+0xcc>)
 80021ae:	701a      	strb	r2, [r3, #0]
	  osDelay(40);
 80021b0:	2028      	movs	r0, #40	; 0x28
 80021b2:	f005 ff57 	bl	8008064 <osDelay>
	  rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 80021b6:	4a2a      	ldr	r2, [pc, #168]	; (8002260 <StartTaskAquireTemp+0xc8>)
 80021b8:	492b      	ldr	r1, [pc, #172]	; (8002268 <StartTaskAquireTemp+0xd0>)
 80021ba:	2007      	movs	r0, #7
 80021bc:	f7fe fca9 	bl	8000b12 <bme280_get_sensor_data>
 80021c0:	4603      	mov	r3, r0
 80021c2:	461a      	mov	r2, r3
 80021c4:	4b27      	ldr	r3, [pc, #156]	; (8002264 <StartTaskAquireTemp+0xcc>)
 80021c6:	701a      	strb	r2, [r3, #0]
	  if(rslt == BME280_OK){
 80021c8:	4b26      	ldr	r3, [pc, #152]	; (8002264 <StartTaskAquireTemp+0xcc>)
 80021ca:	f993 3000 	ldrsb.w	r3, [r3]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d13e      	bne.n	8002250 <StartTaskAquireTemp+0xb8>
		  temperature = comp_data.temperature / 10;      // ºC
 80021d2:	4b25      	ldr	r3, [pc, #148]	; (8002268 <StartTaskAquireTemp+0xd0>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	4a25      	ldr	r2, [pc, #148]	; (800226c <StartTaskAquireTemp+0xd4>)
 80021d8:	fb82 1203 	smull	r1, r2, r2, r3
 80021dc:	1092      	asrs	r2, r2, #2
 80021de:	17db      	asrs	r3, r3, #31
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	81fb      	strh	r3, [r7, #14]
		  humidity = comp_data.humidity / 1024.0;           // %
 80021e4:	4b20      	ldr	r3, [pc, #128]	; (8002268 <StartTaskAquireTemp+0xd0>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	ee07 3a90 	vmov	s15, r3
 80021ec:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80021f0:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8002258 <StartTaskAquireTemp+0xc0>
 80021f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80021f8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80021fc:	edc7 7a00 	vstr	s15, [r7]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	737b      	strb	r3, [r7, #13]
		  _mains._actual_temp=temperature;
 8002204:	4a1a      	ldr	r2, [pc, #104]	; (8002270 <StartTaskAquireTemp+0xd8>)
 8002206:	89fb      	ldrh	r3, [r7, #14]
 8002208:	8113      	strh	r3, [r2, #8]
		  _mains._actual_humm=humidity;
 800220a:	4a19      	ldr	r2, [pc, #100]	; (8002270 <StartTaskAquireTemp+0xd8>)
 800220c:	7b7b      	ldrb	r3, [r7, #13]
 800220e:	73d3      	strb	r3, [r2, #15]
		  if(last_temperature!=temperature){
 8002210:	4b18      	ldr	r3, [pc, #96]	; (8002274 <StartTaskAquireTemp+0xdc>)
 8002212:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002216:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800221a:	429a      	cmp	r2, r3
 800221c:	d009      	beq.n	8002232 <StartTaskAquireTemp+0x9a>
			  _mains._fl_sys_changed|=1;
 800221e:	4b14      	ldr	r3, [pc, #80]	; (8002270 <StartTaskAquireTemp+0xd8>)
 8002220:	785b      	ldrb	r3, [r3, #1]
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	b2da      	uxtb	r2, r3
 8002228:	4b11      	ldr	r3, [pc, #68]	; (8002270 <StartTaskAquireTemp+0xd8>)
 800222a:	705a      	strb	r2, [r3, #1]
			  last_temperature=temperature;
 800222c:	4a11      	ldr	r2, [pc, #68]	; (8002274 <StartTaskAquireTemp+0xdc>)
 800222e:	89fb      	ldrh	r3, [r7, #14]
 8002230:	8013      	strh	r3, [r2, #0]
		  }
		  if(last_humidity!=humidity){
 8002232:	4b11      	ldr	r3, [pc, #68]	; (8002278 <StartTaskAquireTemp+0xe0>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	7b7a      	ldrb	r2, [r7, #13]
 8002238:	429a      	cmp	r2, r3
 800223a:	d009      	beq.n	8002250 <StartTaskAquireTemp+0xb8>
			  _mains._fl_sys_changed|=2;
 800223c:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <StartTaskAquireTemp+0xd8>)
 800223e:	785b      	ldrb	r3, [r3, #1]
 8002240:	f043 0302 	orr.w	r3, r3, #2
 8002244:	b2da      	uxtb	r2, r3
 8002246:	4b0a      	ldr	r3, [pc, #40]	; (8002270 <StartTaskAquireTemp+0xd8>)
 8002248:	705a      	strb	r2, [r3, #1]
			  last_humidity=humidity;
 800224a:	4a0b      	ldr	r2, [pc, #44]	; (8002278 <StartTaskAquireTemp+0xe0>)
 800224c:	7b7b      	ldrb	r3, [r7, #13]
 800224e:	7013      	strb	r3, [r2, #0]
		  }
//		  xQueueOverwrite(Queue_Real_TempHandle, &temperature);
//		  xQueueOverwrite(Queue_Real_HumHandle, &humidity);
	  }
	  osDelay(60);	// periodo de amostragem de 100ms
 8002250:	203c      	movs	r0, #60	; 0x3c
 8002252:	f005 ff07 	bl	8008064 <osDelay>
  {
 8002256:	e7a3      	b.n	80021a0 <StartTaskAquireTemp+0x8>
 8002258:	00000000 	.word	0x00000000
 800225c:	40900000 	.word	0x40900000
 8002260:	20004720 	.word	0x20004720
 8002264:	20004760 	.word	0x20004760
 8002268:	20004764 	.word	0x20004764
 800226c:	66666667 	.word	0x66666667
 8002270:	20004710 	.word	0x20004710
 8002274:	200008ac 	.word	0x200008ac
 8002278:	200008ae 	.word	0x200008ae

0800227c <StartTaskAquireBright>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskAquireBright */
void StartTaskAquireBright(void const * argument)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskAquireBright */
  /* Infinite loop */
  for(;;)
  {
	  uint16_t ir_value=0;
 8002284:	2300      	movs	r3, #0
 8002286:	81bb      	strh	r3, [r7, #12]
	  uint16_t vl_value=0;
 8002288:	2300      	movs	r3, #0
 800228a:	817b      	strh	r3, [r7, #10]
	  uint16_t lux_value=0;
 800228c:	2300      	movs	r3, #0
 800228e:	81fb      	strh	r3, [r7, #14]
	  static uint16_t last_lux_value=0;
	  enable(&in_sensor);
 8002290:	4817      	ldr	r0, [pc, #92]	; (80022f0 <StartTaskAquireBright+0x74>)
 8002292:	f000 ffe5 	bl	8003260 <enable>
	  osDelay(15);
 8002296:	200f      	movs	r0, #15
 8002298:	f005 fee4 	bl	8008064 <osDelay>
	  getData (&in_sensor, &vl_value, &ir_value);
 800229c:	f107 020c 	add.w	r2, r7, #12
 80022a0:	f107 030a 	add.w	r3, r7, #10
 80022a4:	4619      	mov	r1, r3
 80022a6:	4812      	ldr	r0, [pc, #72]	; (80022f0 <StartTaskAquireBright+0x74>)
 80022a8:	f000 fff4 	bl	8003294 <getData>
	  disable(&in_sensor);
 80022ac:	4810      	ldr	r0, [pc, #64]	; (80022f0 <StartTaskAquireBright+0x74>)
 80022ae:	f000 ffe4 	bl	800327a <disable>
	  lux_value=TSL2561_calculateLux(vl_value, ir_value);
 80022b2:	897b      	ldrh	r3, [r7, #10]
 80022b4:	89ba      	ldrh	r2, [r7, #12]
 80022b6:	4611      	mov	r1, r2
 80022b8:	4618      	mov	r0, r3
 80022ba:	f001 f891 	bl	80033e0 <TSL2561_calculateLux>
 80022be:	4603      	mov	r3, r0
 80022c0:	81fb      	strh	r3, [r7, #14]
	  //mandar para queue
	  _mains._actual_lux=lux_value;
 80022c2:	4a0c      	ldr	r2, [pc, #48]	; (80022f4 <StartTaskAquireBright+0x78>)
 80022c4:	89fb      	ldrh	r3, [r7, #14]
 80022c6:	8193      	strh	r3, [r2, #12]
	  if(last_lux_value!=lux_value){
 80022c8:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <StartTaskAquireBright+0x7c>)
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	89fa      	ldrh	r2, [r7, #14]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d009      	beq.n	80022e6 <StartTaskAquireBright+0x6a>
		  _mains._fl_sys_changed|=4;
 80022d2:	4b08      	ldr	r3, [pc, #32]	; (80022f4 <StartTaskAquireBright+0x78>)
 80022d4:	785b      	ldrb	r3, [r3, #1]
 80022d6:	f043 0304 	orr.w	r3, r3, #4
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <StartTaskAquireBright+0x78>)
 80022de:	705a      	strb	r2, [r3, #1]
		  last_lux_value=lux_value;
 80022e0:	4a05      	ldr	r2, [pc, #20]	; (80022f8 <StartTaskAquireBright+0x7c>)
 80022e2:	89fb      	ldrh	r3, [r7, #14]
 80022e4:	8013      	strh	r3, [r2, #0]
	  }
//	  xQueueOverwrite(Queue_Real_LuminHandle, &lux_value);
	  osDelay(135);	// periodo de amostragem de 150ms
 80022e6:	2087      	movs	r0, #135	; 0x87
 80022e8:	f005 febc 	bl	8008064 <osDelay>
  {
 80022ec:	e7ca      	b.n	8002284 <StartTaskAquireBright+0x8>
 80022ee:	bf00      	nop
 80022f0:	200048a4 	.word	0x200048a4
 80022f4:	20004710 	.word	0x20004710
 80022f8:	200008b0 	.word	0x200008b0

080022fc <StartTaskSetSecureMode>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSetSecureMode */
void StartTaskSetSecureMode(void const * argument)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSetSecureMode */
  /* Infinite loop */
  for(;;)
  {
	  ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8002304:	f04f 31ff 	mov.w	r1, #4294967295
 8002308:	2001      	movs	r0, #1
 800230a:	f007 fc6d 	bl	8009be8 <ulTaskNotifyTake>
	  printf("Task_secure_active");
 800230e:	4807      	ldr	r0, [pc, #28]	; (800232c <StartTaskSetSecureMode+0x30>)
 8002310:	f00a f966 	bl	800c5e0 <iprintf>
	  osTimerStart(Fast_TimerHandle,5000);	// 300 000 ms --> 5 min
 8002314:	4b06      	ldr	r3, [pc, #24]	; (8002330 <StartTaskSetSecureMode+0x34>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f241 3188 	movw	r1, #5000	; 0x1388
 800231c:	4618      	mov	r0, r3
 800231e:	f005 fee9 	bl	80080f4 <osTimerStart>

    osDelay(10);
 8002322:	200a      	movs	r0, #10
 8002324:	f005 fe9e 	bl	8008064 <osDelay>
	  ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8002328:	e7ec      	b.n	8002304 <StartTaskSetSecureMode+0x8>
 800232a:	bf00      	nop
 800232c:	0800e698 	.word	0x0800e698
 8002330:	20004790 	.word	0x20004790

08002334 <StartTaskRlControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskRlControl */
void StartTaskRlControl(void const * argument)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskRlControl */
  /* Infinite loop */
  for(;;)
  {
	  ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 800233c:	f04f 31ff 	mov.w	r1, #4294967295
 8002340:	2001      	movs	r0, #1
 8002342:	f007 fc51 	bl	8009be8 <ulTaskNotifyTake>
//	  printf("RL_Control_function");
//	  uint8_t states_rl=0;

	  if((_mains._fl_fan_control==1)&&((_mains._fl_states_rl==1)||(_mains._fl_states_rl==2))){
 8002346:	4b05      	ldr	r3, [pc, #20]	; (800235c <StartTaskRlControl+0x28>)
 8002348:	791b      	ldrb	r3, [r3, #4]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d102      	bne.n	8002354 <StartTaskRlControl+0x20>
 800234e:	4b03      	ldr	r3, [pc, #12]	; (800235c <StartTaskRlControl+0x28>)
 8002350:	799b      	ldrb	r3, [r3, #6]
 8002352:	2b01      	cmp	r3, #1

	  }
    osDelay(1);
 8002354:	2001      	movs	r0, #1
 8002356:	f005 fe85 	bl	8008064 <osDelay>
	  ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 800235a:	e7ef      	b.n	800233c <StartTaskRlControl+0x8>
 800235c:	20004710 	.word	0x20004710

08002360 <StartTaskLightActuator>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskLightActuator */
void StartTaskLightActuator(void const * argument)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskLightActuator */
  /* Infinite loop */
  for(;;)
  {

	  ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8002368:	f04f 31ff 	mov.w	r1, #4294967295
 800236c:	2001      	movs	r0, #1
 800236e:	f007 fc3b 	bl	8009be8 <ulTaskNotifyTake>
	  actuate_light((5+(_mains._setpoint_lux/1.06)+(-(_mains._setpoint_lux/1.06)+(_mains._setpoint_lux/3)+(_mains._actual_lux/10))*_mains._fl_lux_mode));
 8002372:	4b27      	ldr	r3, [pc, #156]	; (8002410 <StartTaskLightActuator+0xb0>)
 8002374:	7b9b      	ldrb	r3, [r3, #14]
 8002376:	ee07 3a90 	vmov	s15, r3
 800237a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800237e:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8002408 <StartTaskLightActuator+0xa8>
 8002382:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002386:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 800238a:	ee37 6b06 	vadd.f64	d6, d7, d6
 800238e:	4b20      	ldr	r3, [pc, #128]	; (8002410 <StartTaskLightActuator+0xb0>)
 8002390:	7b9b      	ldrb	r3, [r3, #14]
 8002392:	4a20      	ldr	r2, [pc, #128]	; (8002414 <StartTaskLightActuator+0xb4>)
 8002394:	fba2 2303 	umull	r2, r3, r2, r3
 8002398:	085b      	lsrs	r3, r3, #1
 800239a:	b2db      	uxtb	r3, r3
 800239c:	ee07 3a90 	vmov	s15, r3
 80023a0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80023a4:	4b1a      	ldr	r3, [pc, #104]	; (8002410 <StartTaskLightActuator+0xb0>)
 80023a6:	7b9b      	ldrb	r3, [r3, #14]
 80023a8:	ee07 3a90 	vmov	s15, r3
 80023ac:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80023b0:	ed9f 3b15 	vldr	d3, [pc, #84]	; 8002408 <StartTaskLightActuator+0xa8>
 80023b4:	ee84 7b03 	vdiv.f64	d7, d4, d3
 80023b8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80023bc:	4b14      	ldr	r3, [pc, #80]	; (8002410 <StartTaskLightActuator+0xb0>)
 80023be:	899b      	ldrh	r3, [r3, #12]
 80023c0:	4a15      	ldr	r2, [pc, #84]	; (8002418 <StartTaskLightActuator+0xb8>)
 80023c2:	fba2 2303 	umull	r2, r3, r2, r3
 80023c6:	08db      	lsrs	r3, r3, #3
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	ee07 3a90 	vmov	s15, r3
 80023ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80023d2:	ee35 5b07 	vadd.f64	d5, d5, d7
 80023d6:	4b0e      	ldr	r3, [pc, #56]	; (8002410 <StartTaskLightActuator+0xb0>)
 80023d8:	795b      	ldrb	r3, [r3, #5]
 80023da:	ee07 3a90 	vmov	s15, r3
 80023de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80023e2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80023e6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80023ea:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80023ee:	edc7 7a00 	vstr	s15, [r7]
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fe f978 	bl	80006ec <actuate_light>
	  osDelay(10);
 80023fc:	200a      	movs	r0, #10
 80023fe:	f005 fe31 	bl	8008064 <osDelay>
	  ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8002402:	e7b1      	b.n	8002368 <StartTaskLightActuator+0x8>
 8002404:	f3af 8000 	nop.w
 8002408:	8f5c28f6 	.word	0x8f5c28f6
 800240c:	3ff0f5c2 	.word	0x3ff0f5c2
 8002410:	20004710 	.word	0x20004710
 8002414:	aaaaaaab 	.word	0xaaaaaaab
 8002418:	cccccccd 	.word	0xcccccccd

0800241c <Callback_Fast_Timer>:
  /* USER CODE END StartTaskLightActuator */
}

/* Callback_Fast_Timer function */
void Callback_Fast_Timer(void const * argument)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback_Fast_Timer */
//	printf("Fast_Timer_ends");
	osTimerStart(Slow_TimerHandle,10000);	// 600 000 ms --> 10 min
 8002424:	4b07      	ldr	r3, [pc, #28]	; (8002444 <Callback_Fast_Timer+0x28>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f242 7110 	movw	r1, #10000	; 0x2710
 800242c:	4618      	mov	r0, r3
 800242e:	f005 fe61 	bl	80080f4 <osTimerStart>
	//block the motor
	_mains._fl_motor_blocked=1;
 8002432:	4b05      	ldr	r3, [pc, #20]	; (8002448 <Callback_Fast_Timer+0x2c>)
 8002434:	2201      	movs	r2, #1
 8002436:	70da      	strb	r2, [r3, #3]
	stop_motor();
 8002438:	f7ff fb5e 	bl	8001af8 <stop_motor>
  /* USER CODE END Callback_Fast_Timer */
}
 800243c:	bf00      	nop
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	2000478c 	.word	0x2000478c
 8002448:	20004710 	.word	0x20004710

0800244c <Callback_Slow_Timer>:

/* Callback_Slow_Timer function */
void Callback_Slow_Timer(void const * argument)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback_Slow_Timer */
//	printf("Slow_Timer_ends");
	//unblock the motor
	_mains._fl_motor_blocked=0;
 8002454:	4b04      	ldr	r3, [pc, #16]	; (8002468 <Callback_Slow_Timer+0x1c>)
 8002456:	2200      	movs	r2, #0
 8002458:	70da      	strb	r2, [r3, #3]
  /* USER CODE END Callback_Slow_Timer */
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	20004710 	.word	0x20004710

0800246c <Callback_Sampling_Timer>:

/* Callback_Sampling_Timer function */
void Callback_Sampling_Timer(void const * argument)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback_Sampling_Timer */
//	xTaskNotifyGive( vTaskRlControlHandle );
	xTaskNotifyGive( vTaskLightActuaHandle );
 8002474:	4b05      	ldr	r3, [pc, #20]	; (800248c <Callback_Sampling_Timer+0x20>)
 8002476:	6818      	ldr	r0, [r3, #0]
 8002478:	2300      	movs	r3, #0
 800247a:	2202      	movs	r2, #2
 800247c:	2100      	movs	r1, #0
 800247e:	f007 fbfb 	bl	8009c78 <xTaskGenericNotify>
  /* USER CODE END Callback_Sampling_Timer */
}
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	2000479c 	.word	0x2000479c

08002490 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08c      	sub	sp, #48	; 0x30
 8002494:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002496:	f107 031c 	add.w	r3, r7, #28
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	605a      	str	r2, [r3, #4]
 80024a0:	609a      	str	r2, [r3, #8]
 80024a2:	60da      	str	r2, [r3, #12]
 80024a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024a6:	4b55      	ldr	r3, [pc, #340]	; (80025fc <MX_GPIO_Init+0x16c>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	4a54      	ldr	r2, [pc, #336]	; (80025fc <MX_GPIO_Init+0x16c>)
 80024ac:	f043 0304 	orr.w	r3, r3, #4
 80024b0:	6313      	str	r3, [r2, #48]	; 0x30
 80024b2:	4b52      	ldr	r3, [pc, #328]	; (80025fc <MX_GPIO_Init+0x16c>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	f003 0304 	and.w	r3, r3, #4
 80024ba:	61bb      	str	r3, [r7, #24]
 80024bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024be:	4b4f      	ldr	r3, [pc, #316]	; (80025fc <MX_GPIO_Init+0x16c>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	4a4e      	ldr	r2, [pc, #312]	; (80025fc <MX_GPIO_Init+0x16c>)
 80024c4:	f043 0320 	orr.w	r3, r3, #32
 80024c8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ca:	4b4c      	ldr	r3, [pc, #304]	; (80025fc <MX_GPIO_Init+0x16c>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	f003 0320 	and.w	r3, r3, #32
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024d6:	4b49      	ldr	r3, [pc, #292]	; (80025fc <MX_GPIO_Init+0x16c>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	4a48      	ldr	r2, [pc, #288]	; (80025fc <MX_GPIO_Init+0x16c>)
 80024dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024e0:	6313      	str	r3, [r2, #48]	; 0x30
 80024e2:	4b46      	ldr	r3, [pc, #280]	; (80025fc <MX_GPIO_Init+0x16c>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ee:	4b43      	ldr	r3, [pc, #268]	; (80025fc <MX_GPIO_Init+0x16c>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	4a42      	ldr	r2, [pc, #264]	; (80025fc <MX_GPIO_Init+0x16c>)
 80024f4:	f043 0302 	orr.w	r3, r3, #2
 80024f8:	6313      	str	r3, [r2, #48]	; 0x30
 80024fa:	4b40      	ldr	r3, [pc, #256]	; (80025fc <MX_GPIO_Init+0x16c>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002506:	4b3d      	ldr	r3, [pc, #244]	; (80025fc <MX_GPIO_Init+0x16c>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	4a3c      	ldr	r2, [pc, #240]	; (80025fc <MX_GPIO_Init+0x16c>)
 800250c:	f043 0310 	orr.w	r3, r3, #16
 8002510:	6313      	str	r3, [r2, #48]	; 0x30
 8002512:	4b3a      	ldr	r3, [pc, #232]	; (80025fc <MX_GPIO_Init+0x16c>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	f003 0310 	and.w	r3, r3, #16
 800251a:	60bb      	str	r3, [r7, #8]
 800251c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800251e:	4b37      	ldr	r3, [pc, #220]	; (80025fc <MX_GPIO_Init+0x16c>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	4a36      	ldr	r2, [pc, #216]	; (80025fc <MX_GPIO_Init+0x16c>)
 8002524:	f043 0308 	orr.w	r3, r3, #8
 8002528:	6313      	str	r3, [r2, #48]	; 0x30
 800252a:	4b34      	ldr	r3, [pc, #208]	; (80025fc <MX_GPIO_Init+0x16c>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	607b      	str	r3, [r7, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002536:	4b31      	ldr	r3, [pc, #196]	; (80025fc <MX_GPIO_Init+0x16c>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	4a30      	ldr	r2, [pc, #192]	; (80025fc <MX_GPIO_Init+0x16c>)
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	6313      	str	r3, [r2, #48]	; 0x30
 8002542:	4b2e      	ldr	r3, [pc, #184]	; (80025fc <MX_GPIO_Init+0x16c>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	603b      	str	r3, [r7, #0]
 800254c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800254e:	2200      	movs	r2, #0
 8002550:	f244 0181 	movw	r1, #16513	; 0x4081
 8002554:	482a      	ldr	r0, [pc, #168]	; (8002600 <MX_GPIO_Init+0x170>)
 8002556:	f001 fdb3 	bl	80040c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, H_bridge_A_Pin|H_bridge_B_Pin, GPIO_PIN_RESET);
 800255a:	2200      	movs	r2, #0
 800255c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8002560:	4828      	ldr	r0, [pc, #160]	; (8002604 <MX_GPIO_Init+0x174>)
 8002562:	f001 fdad 	bl	80040c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002566:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800256a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800256c:	4b26      	ldr	r3, [pc, #152]	; (8002608 <MX_GPIO_Init+0x178>)
 800256e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002570:	2300      	movs	r3, #0
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002574:	f107 031c 	add.w	r3, r7, #28
 8002578:	4619      	mov	r1, r3
 800257a:	4824      	ldr	r0, [pc, #144]	; (800260c <MX_GPIO_Init+0x17c>)
 800257c:	f001 fbde 	bl	8003d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SEC_SIGN_Pin;
 8002580:	2310      	movs	r3, #16
 8002582:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002584:	4b22      	ldr	r3, [pc, #136]	; (8002610 <MX_GPIO_Init+0x180>)
 8002586:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002588:	2301      	movs	r3, #1
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SEC_SIGN_GPIO_Port, &GPIO_InitStruct);
 800258c:	f107 031c 	add.w	r3, r7, #28
 8002590:	4619      	mov	r1, r3
 8002592:	481c      	ldr	r0, [pc, #112]	; (8002604 <MX_GPIO_Init+0x174>)
 8002594:	f001 fbd2 	bl	8003d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002598:	f244 0381 	movw	r3, #16513	; 0x4081
 800259c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800259e:	2301      	movs	r3, #1
 80025a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a6:	2300      	movs	r3, #0
 80025a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025aa:	f107 031c 	add.w	r3, r7, #28
 80025ae:	4619      	mov	r1, r3
 80025b0:	4813      	ldr	r0, [pc, #76]	; (8002600 <MX_GPIO_Init+0x170>)
 80025b2:	f001 fbc3 	bl	8003d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = H_bridge_A_Pin|H_bridge_B_Pin;
 80025b6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80025ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025bc:	2301      	movs	r3, #1
 80025be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c4:	2300      	movs	r3, #0
 80025c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025c8:	f107 031c 	add.w	r3, r7, #28
 80025cc:	4619      	mov	r1, r3
 80025ce:	480d      	ldr	r0, [pc, #52]	; (8002604 <MX_GPIO_Init+0x174>)
 80025d0:	f001 fbb4 	bl	8003d3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80025d4:	2200      	movs	r2, #0
 80025d6:	2105      	movs	r1, #5
 80025d8:	200a      	movs	r0, #10
 80025da:	f001 fb63 	bl	8003ca4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80025de:	200a      	movs	r0, #10
 80025e0:	f001 fb7c 	bl	8003cdc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80025e4:	2200      	movs	r2, #0
 80025e6:	2105      	movs	r1, #5
 80025e8:	2028      	movs	r0, #40	; 0x28
 80025ea:	f001 fb5b 	bl	8003ca4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80025ee:	2028      	movs	r0, #40	; 0x28
 80025f0:	f001 fb74 	bl	8003cdc <HAL_NVIC_EnableIRQ>

}
 80025f4:	bf00      	nop
 80025f6:	3730      	adds	r7, #48	; 0x30
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40023800 	.word	0x40023800
 8002600:	40020400 	.word	0x40020400
 8002604:	40021400 	.word	0x40021400
 8002608:	10110000 	.word	0x10110000
 800260c:	40020800 	.word	0x40020800
 8002610:	10210000 	.word	0x10210000

08002614 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	80fb      	strh	r3, [r7, #6]
	if((GPIO_Pin==SEC_SIGN_Pin)||(GPIO_Pin==USER_Btn_Pin)){
 800261e:	88fb      	ldrh	r3, [r7, #6]
 8002620:	2b10      	cmp	r3, #16
 8002622:	d003      	beq.n	800262c <HAL_GPIO_EXTI_Callback+0x18>
 8002624:	88fb      	ldrh	r3, [r7, #6]
 8002626:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800262a:	d105      	bne.n	8002638 <HAL_GPIO_EXTI_Callback+0x24>
		vTaskNotifyGiveFromISR( vTaskSetSecureMHandle, NULL );
 800262c:	4b04      	ldr	r3, [pc, #16]	; (8002640 <HAL_GPIO_EXTI_Callback+0x2c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2100      	movs	r1, #0
 8002632:	4618      	mov	r0, r3
 8002634:	f007 fbd8 	bl	8009de8 <vTaskNotifyGiveFromISR>
	}
	else{

	}
}
 8002638:	bf00      	nop
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	200047bc 	.word	0x200047bc

08002644 <verifyConnection>:
extern osMessageQId Queue_Real_LuminHandle;

extern uint8_t flag_motor_control;


bool verifyConnection(void){
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(BTH_ST_GPIO_Port,BTH_ST_Pin)==1){
 8002648:	2110      	movs	r1, #16
 800264a:	4805      	ldr	r0, [pc, #20]	; (8002660 <verifyConnection+0x1c>)
 800264c:	f001 fd20 	bl	8004090 <HAL_GPIO_ReadPin>
 8002650:	4603      	mov	r3, r0
 8002652:	2b01      	cmp	r3, #1
 8002654:	d101      	bne.n	800265a <verifyConnection+0x16>
		return true;
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <verifyConnection+0x18>
	}
	else {
		return false;
 800265a:	2300      	movs	r3, #0
	}
}
 800265c:	4618      	mov	r0, r3
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40020c00 	.word	0x40020c00

08002664 <send_bth>:

bool send_bth(uint8_t *str){
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
	// transmit via uart 2
	uint8_t count;
	for(count=1;str[count]!='\n';count++){}
 800266c:	2301      	movs	r3, #1
 800266e:	73fb      	strb	r3, [r7, #15]
 8002670:	e002      	b.n	8002678 <send_bth+0x14>
 8002672:	7bfb      	ldrb	r3, [r7, #15]
 8002674:	3301      	adds	r3, #1
 8002676:	73fb      	strb	r3, [r7, #15]
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	4413      	add	r3, r2
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b0a      	cmp	r3, #10
 8002682:	d1f6      	bne.n	8002672 <send_bth+0xe>
	HAL_UART_Transmit(&huart2, str, count,50);
 8002684:	7bfb      	ldrb	r3, [r7, #15]
 8002686:	b29a      	uxth	r2, r3
 8002688:	2332      	movs	r3, #50	; 0x32
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	4803      	ldr	r0, [pc, #12]	; (800269c <send_bth+0x38>)
 800268e:	f004 fcd3 	bl	8007038 <HAL_UART_Transmit>
	return true;
 8002692:	2301      	movs	r3, #1
}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	2000494c 	.word	0x2000494c

080026a0 <receive_bth>:

bool receive_bth(void){
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
	uint8_t tam=0;
 80026a6:	2300      	movs	r3, #0
 80026a8:	71fb      	strb	r3, [r7, #7]
	static uint8_t val=0;
	atu_index=(Rx_Uart2_index&15);
 80026aa:	4b56      	ldr	r3, [pc, #344]	; (8002804 <receive_bth+0x164>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	4b54      	ldr	r3, [pc, #336]	; (8002808 <receive_bth+0x168>)
 80026b6:	701a      	strb	r2, [r3, #0]
		if(atu_index!=ant_index){
 80026b8:	4b53      	ldr	r3, [pc, #332]	; (8002808 <receive_bth+0x168>)
 80026ba:	781a      	ldrb	r2, [r3, #0]
 80026bc:	4b53      	ldr	r3, [pc, #332]	; (800280c <receive_bth+0x16c>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	f000 8094 	beq.w	80027ee <receive_bth+0x14e>
			for(int x=0;x<=(atu_index-ant_index);x++){
 80026c6:	2300      	movs	r3, #0
 80026c8:	603b      	str	r3, [r7, #0]
 80026ca:	e015      	b.n	80026f8 <receive_bth+0x58>
				bth_rx_buffer[x]=Rx_Uart2[x+ant_index];
 80026cc:	4b4f      	ldr	r3, [pc, #316]	; (800280c <receive_bth+0x16c>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	4413      	add	r3, r2
 80026d6:	4a4e      	ldr	r2, [pc, #312]	; (8002810 <receive_bth+0x170>)
 80026d8:	5cd1      	ldrb	r1, [r2, r3]
 80026da:	4a4e      	ldr	r2, [pc, #312]	; (8002814 <receive_bth+0x174>)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	4413      	add	r3, r2
 80026e0:	460a      	mov	r2, r1
 80026e2:	701a      	strb	r2, [r3, #0]
				bth_rx_buffer[x+1]=0;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	3301      	adds	r3, #1
 80026e8:	4a4a      	ldr	r2, [pc, #296]	; (8002814 <receive_bth+0x174>)
 80026ea:	2100      	movs	r1, #0
 80026ec:	54d1      	strb	r1, [r2, r3]
				tam=x;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	71fb      	strb	r3, [r7, #7]
			for(int x=0;x<=(atu_index-ant_index);x++){
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	3301      	adds	r3, #1
 80026f6:	603b      	str	r3, [r7, #0]
 80026f8:	4b43      	ldr	r3, [pc, #268]	; (8002808 <receive_bth+0x168>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	461a      	mov	r2, r3
 80026fe:	4b43      	ldr	r3, [pc, #268]	; (800280c <receive_bth+0x16c>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	dde0      	ble.n	80026cc <receive_bth+0x2c>
			}
			switch(bth_rx_buffer[0]){
 800270a:	4b42      	ldr	r3, [pc, #264]	; (8002814 <receive_bth+0x174>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b4d      	cmp	r3, #77	; 0x4d
 8002710:	d057      	beq.n	80027c2 <receive_bth+0x122>
 8002712:	2b54      	cmp	r3, #84	; 0x54
 8002714:	d002      	beq.n	800271c <receive_bth+0x7c>
 8002716:	2b4c      	cmp	r3, #76	; 0x4c
 8002718:	d018      	beq.n	800274c <receive_bth+0xac>
						_mains._fl_motor_control=0;
						flag_motor_control=0;
					}
					break;
				default:
					break;
 800271a:	e069      	b.n	80027f0 <receive_bth+0x150>
					val=(((bth_rx_buffer[1]-'0')*10)+(bth_rx_buffer[2]-'0'));
 800271c:	4b3d      	ldr	r3, [pc, #244]	; (8002814 <receive_bth+0x174>)
 800271e:	785b      	ldrb	r3, [r3, #1]
 8002720:	461a      	mov	r2, r3
 8002722:	0092      	lsls	r2, r2, #2
 8002724:	4413      	add	r3, r2
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	b2da      	uxtb	r2, r3
 800272a:	4b3a      	ldr	r3, [pc, #232]	; (8002814 <receive_bth+0x174>)
 800272c:	789b      	ldrb	r3, [r3, #2]
 800272e:	4413      	add	r3, r2
 8002730:	b2db      	uxtb	r3, r3
 8002732:	3b10      	subs	r3, #16
 8002734:	b2da      	uxtb	r2, r3
 8002736:	4b38      	ldr	r3, [pc, #224]	; (8002818 <receive_bth+0x178>)
 8002738:	701a      	strb	r2, [r3, #0]
					_mains._setpoint_temp=val;
 800273a:	4b37      	ldr	r3, [pc, #220]	; (8002818 <receive_bth+0x178>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	b25a      	sxtb	r2, r3
 8002740:	4b36      	ldr	r3, [pc, #216]	; (800281c <receive_bth+0x17c>)
 8002742:	729a      	strb	r2, [r3, #10]
					_mains._fl_changed=1;
 8002744:	4b35      	ldr	r3, [pc, #212]	; (800281c <receive_bth+0x17c>)
 8002746:	2201      	movs	r2, #1
 8002748:	701a      	strb	r2, [r3, #0]
					break;
 800274a:	e051      	b.n	80027f0 <receive_bth+0x150>
					if(bth_rx_buffer[1]=='M'){
 800274c:	4b31      	ldr	r3, [pc, #196]	; (8002814 <receive_bth+0x174>)
 800274e:	785b      	ldrb	r3, [r3, #1]
 8002750:	2b4d      	cmp	r3, #77	; 0x4d
 8002752:	d10d      	bne.n	8002770 <receive_bth+0xd0>
						val=(bth_rx_buffer[2]-'0');
 8002754:	4b2f      	ldr	r3, [pc, #188]	; (8002814 <receive_bth+0x174>)
 8002756:	789b      	ldrb	r3, [r3, #2]
 8002758:	3b30      	subs	r3, #48	; 0x30
 800275a:	b2da      	uxtb	r2, r3
 800275c:	4b2e      	ldr	r3, [pc, #184]	; (8002818 <receive_bth+0x178>)
 800275e:	701a      	strb	r2, [r3, #0]
						_mains._fl_lux_mode=val;
 8002760:	4b2d      	ldr	r3, [pc, #180]	; (8002818 <receive_bth+0x178>)
 8002762:	781a      	ldrb	r2, [r3, #0]
 8002764:	4b2d      	ldr	r3, [pc, #180]	; (800281c <receive_bth+0x17c>)
 8002766:	715a      	strb	r2, [r3, #5]
						_mains._fl_changed=2;
 8002768:	4b2c      	ldr	r3, [pc, #176]	; (800281c <receive_bth+0x17c>)
 800276a:	2202      	movs	r2, #2
 800276c:	701a      	strb	r2, [r3, #0]
					break;
 800276e:	e03f      	b.n	80027f0 <receive_bth+0x150>
						if(tam==6){val = 100;}
 8002770:	79fb      	ldrb	r3, [r7, #7]
 8002772:	2b06      	cmp	r3, #6
 8002774:	d102      	bne.n	800277c <receive_bth+0xdc>
 8002776:	4b28      	ldr	r3, [pc, #160]	; (8002818 <receive_bth+0x178>)
 8002778:	2264      	movs	r2, #100	; 0x64
 800277a:	701a      	strb	r2, [r3, #0]
						if(tam==5){val = (((bth_rx_buffer[1]-'0')*10)+(bth_rx_buffer[2]-'0'));
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	2b05      	cmp	r3, #5
 8002780:	d10e      	bne.n	80027a0 <receive_bth+0x100>
 8002782:	4b24      	ldr	r3, [pc, #144]	; (8002814 <receive_bth+0x174>)
 8002784:	785b      	ldrb	r3, [r3, #1]
 8002786:	461a      	mov	r2, r3
 8002788:	0092      	lsls	r2, r2, #2
 800278a:	4413      	add	r3, r2
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	b2da      	uxtb	r2, r3
 8002790:	4b20      	ldr	r3, [pc, #128]	; (8002814 <receive_bth+0x174>)
 8002792:	789b      	ldrb	r3, [r3, #2]
 8002794:	4413      	add	r3, r2
 8002796:	b2db      	uxtb	r3, r3
 8002798:	3b10      	subs	r3, #16
 800279a:	b2da      	uxtb	r2, r3
 800279c:	4b1e      	ldr	r3, [pc, #120]	; (8002818 <receive_bth+0x178>)
 800279e:	701a      	strb	r2, [r3, #0]
						if(tam==4){val = ((bth_rx_buffer[1]-'0'));
 80027a0:	79fb      	ldrb	r3, [r7, #7]
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	d105      	bne.n	80027b2 <receive_bth+0x112>
 80027a6:	4b1b      	ldr	r3, [pc, #108]	; (8002814 <receive_bth+0x174>)
 80027a8:	785b      	ldrb	r3, [r3, #1]
 80027aa:	3b30      	subs	r3, #48	; 0x30
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	4b1a      	ldr	r3, [pc, #104]	; (8002818 <receive_bth+0x178>)
 80027b0:	701a      	strb	r2, [r3, #0]
						_mains._setpoint_lux=val;
 80027b2:	4b19      	ldr	r3, [pc, #100]	; (8002818 <receive_bth+0x178>)
 80027b4:	781a      	ldrb	r2, [r3, #0]
 80027b6:	4b19      	ldr	r3, [pc, #100]	; (800281c <receive_bth+0x17c>)
 80027b8:	739a      	strb	r2, [r3, #14]
						_mains._fl_changed=3;
 80027ba:	4b18      	ldr	r3, [pc, #96]	; (800281c <receive_bth+0x17c>)
 80027bc:	2203      	movs	r2, #3
 80027be:	701a      	strb	r2, [r3, #0]
					break;
 80027c0:	e016      	b.n	80027f0 <receive_bth+0x150>
					if((bth_rx_buffer[1]-'0')==1){
 80027c2:	4b14      	ldr	r3, [pc, #80]	; (8002814 <receive_bth+0x174>)
 80027c4:	785b      	ldrb	r3, [r3, #1]
 80027c6:	2b31      	cmp	r3, #49	; 0x31
 80027c8:	d108      	bne.n	80027dc <receive_bth+0x13c>
						_mains._fl_motor_control=1;
 80027ca:	4b14      	ldr	r3, [pc, #80]	; (800281c <receive_bth+0x17c>)
 80027cc:	2201      	movs	r2, #1
 80027ce:	709a      	strb	r2, [r3, #2]
						flag_motor_control=1;
 80027d0:	4b13      	ldr	r3, [pc, #76]	; (8002820 <receive_bth+0x180>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	701a      	strb	r2, [r3, #0]
						start_motor();
 80027d6:	f7ff f987 	bl	8001ae8 <start_motor>
					break;
 80027da:	e009      	b.n	80027f0 <receive_bth+0x150>
						stop_motor();
 80027dc:	f7ff f98c 	bl	8001af8 <stop_motor>
						_mains._fl_motor_control=0;
 80027e0:	4b0e      	ldr	r3, [pc, #56]	; (800281c <receive_bth+0x17c>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	709a      	strb	r2, [r3, #2]
						flag_motor_control=0;
 80027e6:	4b0e      	ldr	r3, [pc, #56]	; (8002820 <receive_bth+0x180>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	701a      	strb	r2, [r3, #0]
					break;
 80027ec:	e000      	b.n	80027f0 <receive_bth+0x150>
			}
		}
 80027ee:	bf00      	nop
	ant_index=atu_index;
 80027f0:	4b05      	ldr	r3, [pc, #20]	; (8002808 <receive_bth+0x168>)
 80027f2:	781a      	ldrb	r2, [r3, #0]
 80027f4:	4b05      	ldr	r3, [pc, #20]	; (800280c <receive_bth+0x16c>)
 80027f6:	701a      	strb	r2, [r3, #0]
	return true;
 80027f8:	2301      	movs	r3, #1
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	200008b8 	.word	0x200008b8
 8002808:	200047c0 	.word	0x200047c0
 800280c:	200047c1 	.word	0x200047c1
 8002810:	2000492c 	.word	0x2000492c
 8002814:	200047c4 	.word	0x200047c4
 8002818:	200008b2 	.word	0x200008b2
 800281c:	20004710 	.word	0x20004710
 8002820:	20000200 	.word	0x20000200

08002824 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002828:	4b1b      	ldr	r3, [pc, #108]	; (8002898 <MX_I2C1_Init+0x74>)
 800282a:	4a1c      	ldr	r2, [pc, #112]	; (800289c <MX_I2C1_Init+0x78>)
 800282c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800282e:	4b1a      	ldr	r3, [pc, #104]	; (8002898 <MX_I2C1_Init+0x74>)
 8002830:	4a1b      	ldr	r2, [pc, #108]	; (80028a0 <MX_I2C1_Init+0x7c>)
 8002832:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002834:	4b18      	ldr	r3, [pc, #96]	; (8002898 <MX_I2C1_Init+0x74>)
 8002836:	2200      	movs	r2, #0
 8002838:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800283a:	4b17      	ldr	r3, [pc, #92]	; (8002898 <MX_I2C1_Init+0x74>)
 800283c:	2201      	movs	r2, #1
 800283e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002840:	4b15      	ldr	r3, [pc, #84]	; (8002898 <MX_I2C1_Init+0x74>)
 8002842:	2200      	movs	r2, #0
 8002844:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002846:	4b14      	ldr	r3, [pc, #80]	; (8002898 <MX_I2C1_Init+0x74>)
 8002848:	2200      	movs	r2, #0
 800284a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800284c:	4b12      	ldr	r3, [pc, #72]	; (8002898 <MX_I2C1_Init+0x74>)
 800284e:	2200      	movs	r2, #0
 8002850:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002852:	4b11      	ldr	r3, [pc, #68]	; (8002898 <MX_I2C1_Init+0x74>)
 8002854:	2200      	movs	r2, #0
 8002856:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002858:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <MX_I2C1_Init+0x74>)
 800285a:	2200      	movs	r2, #0
 800285c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800285e:	480e      	ldr	r0, [pc, #56]	; (8002898 <MX_I2C1_Init+0x74>)
 8002860:	f001 fc7a 	bl	8004158 <HAL_I2C_Init>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800286a:	f000 fa51 	bl	8002d10 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800286e:	2100      	movs	r1, #0
 8002870:	4809      	ldr	r0, [pc, #36]	; (8002898 <MX_I2C1_Init+0x74>)
 8002872:	f002 f8cb 	bl	8004a0c <HAL_I2CEx_ConfigAnalogFilter>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800287c:	f000 fa48 	bl	8002d10 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002880:	2100      	movs	r1, #0
 8002882:	4805      	ldr	r0, [pc, #20]	; (8002898 <MX_I2C1_Init+0x74>)
 8002884:	f002 f90d 	bl	8004aa2 <HAL_I2CEx_ConfigDigitalFilter>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800288e:	f000 fa3f 	bl	8002d10 <Error_Handler>
  }

}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	200047d8 	.word	0x200047d8
 800289c:	40005400 	.word	0x40005400
 80028a0:	20404768 	.word	0x20404768

080028a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b08a      	sub	sp, #40	; 0x28
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ac:	f107 0314 	add.w	r3, r7, #20
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	605a      	str	r2, [r3, #4]
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	60da      	str	r2, [r3, #12]
 80028ba:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a17      	ldr	r2, [pc, #92]	; (8002920 <HAL_I2C_MspInit+0x7c>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d128      	bne.n	8002918 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028c6:	4b17      	ldr	r3, [pc, #92]	; (8002924 <HAL_I2C_MspInit+0x80>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	4a16      	ldr	r2, [pc, #88]	; (8002924 <HAL_I2C_MspInit+0x80>)
 80028cc:	f043 0302 	orr.w	r3, r3, #2
 80028d0:	6313      	str	r3, [r2, #48]	; 0x30
 80028d2:	4b14      	ldr	r3, [pc, #80]	; (8002924 <HAL_I2C_MspInit+0x80>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80028de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028e4:	2312      	movs	r3, #18
 80028e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028e8:	2301      	movs	r3, #1
 80028ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ec:	2303      	movs	r3, #3
 80028ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028f0:	2304      	movs	r3, #4
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f4:	f107 0314 	add.w	r3, r7, #20
 80028f8:	4619      	mov	r1, r3
 80028fa:	480b      	ldr	r0, [pc, #44]	; (8002928 <HAL_I2C_MspInit+0x84>)
 80028fc:	f001 fa1e 	bl	8003d3c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002900:	4b08      	ldr	r3, [pc, #32]	; (8002924 <HAL_I2C_MspInit+0x80>)
 8002902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002904:	4a07      	ldr	r2, [pc, #28]	; (8002924 <HAL_I2C_MspInit+0x80>)
 8002906:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800290a:	6413      	str	r3, [r2, #64]	; 0x40
 800290c:	4b05      	ldr	r3, [pc, #20]	; (8002924 <HAL_I2C_MspInit+0x80>)
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002918:	bf00      	nop
 800291a:	3728      	adds	r7, #40	; 0x28
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40005400 	.word	0x40005400
 8002924:	40023800 	.word	0x40023800
 8002928:	40020400 	.word	0x40020400

0800292c <write8>:
    @param  reg I2C register to write the value to
    @param  value The 8-bit value we're writing to the register
    @param _addr address of device
*/
/**************************************************************************/
void write8 (uint8_t reg, uint8_t value, int8_t _addr){
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af02      	add	r7, sp, #8
 8002932:	4603      	mov	r3, r0
 8002934:	71fb      	strb	r3, [r7, #7]
 8002936:	460b      	mov	r3, r1
 8002938:	71bb      	strb	r3, [r7, #6]
 800293a:	4613      	mov	r3, r2
 800293c:	717b      	strb	r3, [r7, #5]
	uint8_t  buf[1]={0};
 800293e:	2300      	movs	r3, #0
 8002940:	733b      	strb	r3, [r7, #12]
	buf[0] =reg;
 8002942:	79fb      	ldrb	r3, [r7, #7]
 8002944:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1, _addr, buf, 1, HAL_MAX_DELAY);
 8002946:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800294a:	b299      	uxth	r1, r3
 800294c:	f107 020c 	add.w	r2, r7, #12
 8002950:	f04f 33ff 	mov.w	r3, #4294967295
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	2301      	movs	r3, #1
 8002958:	480a      	ldr	r0, [pc, #40]	; (8002984 <write8+0x58>)
 800295a:	f001 fc8d 	bl	8004278 <HAL_I2C_Master_Transmit>
	buf[0] =value;
 800295e:	79bb      	ldrb	r3, [r7, #6]
 8002960:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1, _addr, buf, 1, HAL_MAX_DELAY);
 8002962:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002966:	b299      	uxth	r1, r3
 8002968:	f107 020c 	add.w	r2, r7, #12
 800296c:	f04f 33ff 	mov.w	r3, #4294967295
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	2301      	movs	r3, #1
 8002974:	4803      	ldr	r0, [pc, #12]	; (8002984 <write8+0x58>)
 8002976:	f001 fc7f 	bl	8004278 <HAL_I2C_Master_Transmit>
}
 800297a:	bf00      	nop
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	200047d8 	.word	0x200047d8

08002988 <read8>:
    @param  reg I2C register to read from
    @param _addr address of device
    @returns 8-bit value containing single byte data read
*/
/**************************************************************************/
uint8_t read8(uint8_t reg, int8_t _addr){
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af02      	add	r7, sp, #8
 800298e:	4603      	mov	r3, r0
 8002990:	460a      	mov	r2, r1
 8002992:	71fb      	strb	r3, [r7, #7]
 8002994:	4613      	mov	r3, r2
 8002996:	71bb      	strb	r3, [r7, #6]
	uint8_t  buf[1]={0};
 8002998:	2300      	movs	r3, #0
 800299a:	733b      	strb	r3, [r7, #12]
	buf[0] =reg;
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1, _addr, buf, 1, HAL_MAX_DELAY);
 80029a0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80029a4:	b299      	uxth	r1, r3
 80029a6:	f107 020c 	add.w	r2, r7, #12
 80029aa:	f04f 33ff 	mov.w	r3, #4294967295
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	2301      	movs	r3, #1
 80029b2:	480b      	ldr	r0, [pc, #44]	; (80029e0 <read8+0x58>)
 80029b4:	f001 fc60 	bl	8004278 <HAL_I2C_Master_Transmit>
	buf[0] =0;
 80029b8:	2300      	movs	r3, #0
 80029ba:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Receive(&hi2c1, _addr, buf, 1, HAL_MAX_DELAY);
 80029bc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80029c0:	b299      	uxth	r1, r3
 80029c2:	f107 020c 	add.w	r2, r7, #12
 80029c6:	f04f 33ff 	mov.w	r3, #4294967295
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	2301      	movs	r3, #1
 80029ce:	4804      	ldr	r0, [pc, #16]	; (80029e0 <read8+0x58>)
 80029d0:	f001 fd46 	bl	8004460 <HAL_I2C_Master_Receive>
	return buf[0];
 80029d4:	7b3b      	ldrb	r3, [r7, #12]
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	200047d8 	.word	0x200047d8

080029e4 <read16>:
    @param  reg I2C register to read from
    @param _addr address of device
    @returns 16-bit value containing 2-byte data read
*/
/**************************************************************************/
uint16_t read16(uint8_t reg, int8_t _addr){
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af02      	add	r7, sp, #8
 80029ea:	4603      	mov	r3, r0
 80029ec:	460a      	mov	r2, r1
 80029ee:	71fb      	strb	r3, [r7, #7]
 80029f0:	4613      	mov	r3, r2
 80029f2:	71bb      	strb	r3, [r7, #6]
  uint16_t x;
  uint8_t  buf[2]={0,0};
 80029f4:	2300      	movs	r3, #0
 80029f6:	733b      	strb	r3, [r7, #12]
 80029f8:	2300      	movs	r3, #0
 80029fa:	737b      	strb	r3, [r7, #13]
  buf[0] =reg;
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Master_Transmit(&hi2c1, _addr, buf, 1, HAL_MAX_DELAY);
 8002a00:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002a04:	b299      	uxth	r1, r3
 8002a06:	f107 020c 	add.w	r2, r7, #12
 8002a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	2301      	movs	r3, #1
 8002a12:	4810      	ldr	r0, [pc, #64]	; (8002a54 <read16+0x70>)
 8002a14:	f001 fc30 	bl	8004278 <HAL_I2C_Master_Transmit>
  buf[0] =0;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Master_Receive(&hi2c1, _addr, buf, 2, HAL_MAX_DELAY);
 8002a1c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002a20:	b299      	uxth	r1, r3
 8002a22:	f107 020c 	add.w	r2, r7, #12
 8002a26:	f04f 33ff 	mov.w	r3, #4294967295
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	4809      	ldr	r0, [pc, #36]	; (8002a54 <read16+0x70>)
 8002a30:	f001 fd16 	bl	8004460 <HAL_I2C_Master_Receive>
  x=buf[0];
 8002a34:	7b3b      	ldrb	r3, [r7, #12]
 8002a36:	81fb      	strh	r3, [r7, #14]
  x <<= 8;
 8002a38:	89fb      	ldrh	r3, [r7, #14]
 8002a3a:	021b      	lsls	r3, r3, #8
 8002a3c:	81fb      	strh	r3, [r7, #14]
  x |= buf[1];
 8002a3e:	7b7b      	ldrb	r3, [r7, #13]
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	89fb      	ldrh	r3, [r7, #14]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	81fb      	strh	r3, [r7, #14]
  return x;
 8002a48:	89fb      	ldrh	r3, [r7, #14]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	200047d8 	.word	0x200047d8

08002a58 <user_i2c_read>:

  return x;
}

int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af02      	add	r7, sp, #8
 8002a5e:	603a      	str	r2, [r7, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	4603      	mov	r3, r0
 8002a64:	71fb      	strb	r3, [r7, #7]
 8002a66:	460b      	mov	r3, r1
 8002a68:	71bb      	strb	r3, [r7, #6]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	80bb      	strh	r3, [r7, #4]
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	b299      	uxth	r1, r3
 8002a76:	1dba      	adds	r2, r7, #6
 8002a78:	230a      	movs	r3, #10
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	4811      	ldr	r0, [pc, #68]	; (8002ac4 <user_i2c_read+0x6c>)
 8002a80:	f001 fbfa 	bl	8004278 <HAL_I2C_Master_Transmit>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <user_i2c_read+0x38>
 8002a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8e:	e015      	b.n	8002abc <user_i2c_read+0x64>
  if(HAL_I2C_Master_Receive(&hi2c1, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	b21b      	sxth	r3, r3
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	b21b      	sxth	r3, r3
 8002a9c:	b299      	uxth	r1, r3
 8002a9e:	88ba      	ldrh	r2, [r7, #4]
 8002aa0:	230a      	movs	r3, #10
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	4806      	ldr	r0, [pc, #24]	; (8002ac4 <user_i2c_read+0x6c>)
 8002aaa:	f001 fcd9 	bl	8004460 <HAL_I2C_Master_Receive>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <user_i2c_read+0x62>
 8002ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab8:	e000      	b.n	8002abc <user_i2c_read+0x64>

  return 0;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	200047d8 	.word	0x200047d8

08002ac8 <user_delay_ms>:

void user_delay_ms(uint32_t period)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f001 f80d 	bl	8003af0 <HAL_Delay>
}
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
	...

08002ae0 <user_i2c_write>:

int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af02      	add	r7, sp, #8
 8002ae6:	603a      	str	r2, [r7, #0]
 8002ae8:	461a      	mov	r2, r3
 8002aea:	4603      	mov	r3, r0
 8002aec:	71fb      	strb	r3, [r7, #7]
 8002aee:	460b      	mov	r3, r1
 8002af0:	71bb      	strb	r3, [r7, #6]
 8002af2:	4613      	mov	r3, r2
 8002af4:	80bb      	strh	r3, [r7, #4]
  int8_t *buf;
  buf = malloc(len +1);
 8002af6:	88bb      	ldrh	r3, [r7, #4]
 8002af8:	3301      	adds	r3, #1
 8002afa:	4618      	mov	r0, r3
 8002afc:	f009 f868 	bl	800bbd0 <malloc>
 8002b00:	4603      	mov	r3, r0
 8002b02:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 8002b04:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	88ba      	ldrh	r2, [r7, #4]
 8002b12:	6839      	ldr	r1, [r7, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f009 f86b 	bl	800bbf0 <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	b299      	uxth	r1, r3
 8002b22:	88bb      	ldrh	r3, [r7, #4]
 8002b24:	3301      	adds	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	f04f 33ff 	mov.w	r3, #4294967295
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	4808      	ldr	r0, [pc, #32]	; (8002b54 <user_i2c_write+0x74>)
 8002b34:	f001 fba0 	bl	8004278 <HAL_I2C_Master_Transmit>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d002      	beq.n	8002b44 <user_i2c_write+0x64>
 8002b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b42:	e003      	b.n	8002b4c <user_i2c_write+0x6c>

  free(buf);
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f009 f84b 	bl	800bbe0 <free>
  return 0;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	200047d8 	.word	0x200047d8

08002b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b5c:	f000 ff9b 	bl	8003a96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b60:	f000 f82e 	bl	8002bc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b64:	f7ff fc94 	bl	8002490 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002b68:	f000 fd56 	bl	8003618 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8002b6c:	f7ff fe5a 	bl	8002824 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002b70:	f000 fd22 	bl	80035b8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002b74:	f000 fa4c 	bl	8003010 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize configured peripherals */
  /* Initialize UART_BTH */
  init_UART2();
 8002b78:	f000 fe10 	bl	800379c <init_UART2>
  /* Initialize UART_RASP */
  init_UART3();
 8002b7c:	f000 fe00 	bl	8003780 <init_UART3>
  /* Initialize PWM CHANNELS */
//  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
//  htim3.Instance->CCR4=0;
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8002b80:	2100      	movs	r1, #0
 8002b82:	480d      	ldr	r0, [pc, #52]	; (8002bb8 <main+0x60>)
 8002b84:	f003 f9c4 	bl	8005f10 <HAL_TIM_PWM_Start>
//  htim1.Instance->CCR1=0;
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8002b88:	2104      	movs	r1, #4
 8002b8a:	480b      	ldr	r0, [pc, #44]	; (8002bb8 <main+0x60>)
 8002b8c:	f003 f9c0 	bl	8005f10 <HAL_TIM_PWM_Start>
//  htim1.Instance->CCR2=0;
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8002b90:	2108      	movs	r1, #8
 8002b92:	4809      	ldr	r0, [pc, #36]	; (8002bb8 <main+0x60>)
 8002b94:	f003 f9bc 	bl	8005f10 <HAL_TIM_PWM_Start>
//  htim1.Instance->CCR3=0;
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8002b98:	210c      	movs	r1, #12
 8002b9a:	4807      	ldr	r0, [pc, #28]	; (8002bb8 <main+0x60>)
 8002b9c:	f003 f9b8 	bl	8005f10 <HAL_TIM_PWM_Start>
//  htim1.Instance->CCR4=0;
  /* Initialize LUX_SENSOR */
  TSL2561_Init(&in_sensor);
 8002ba0:	4806      	ldr	r0, [pc, #24]	; (8002bbc <main+0x64>)
 8002ba2:	f000 fb97 	bl	80032d4 <TSL2561_Init>
  /* Initialize TEMP&HUM_SENSOR */
  BME280_Init();
 8002ba6:	f7fd fdb3 	bl	8000710 <BME280_Init>

  main_vars_inti();
 8002baa:	f7fd fd71 	bl	8000690 <main_vars_inti>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002bae:	f7fe ffdf 	bl	8001b70 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002bb2:	f005 fa04 	bl	8007fbe <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002bb6:	e7fe      	b.n	8002bb6 <main+0x5e>
 8002bb8:	20004864 	.word	0x20004864
 8002bbc:	200048a4 	.word	0x200048a4

08002bc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b0b8      	sub	sp, #224	; 0xe0
 8002bc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bc6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002bca:	2234      	movs	r2, #52	; 0x34
 8002bcc:	2100      	movs	r1, #0
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f009 f819 	bl	800bc06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bd4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	609a      	str	r2, [r3, #8]
 8002be0:	60da      	str	r2, [r3, #12]
 8002be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002be4:	f107 0308 	add.w	r3, r7, #8
 8002be8:	2290      	movs	r2, #144	; 0x90
 8002bea:	2100      	movs	r1, #0
 8002bec:	4618      	mov	r0, r3
 8002bee:	f009 f80a 	bl	800bc06 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002bf2:	f001 ffa3 	bl	8004b3c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bf6:	4b3b      	ldr	r3, [pc, #236]	; (8002ce4 <SystemClock_Config+0x124>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	4a3a      	ldr	r2, [pc, #232]	; (8002ce4 <SystemClock_Config+0x124>)
 8002bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c00:	6413      	str	r3, [r2, #64]	; 0x40
 8002c02:	4b38      	ldr	r3, [pc, #224]	; (8002ce4 <SystemClock_Config+0x124>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	607b      	str	r3, [r7, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c0e:	4b36      	ldr	r3, [pc, #216]	; (8002ce8 <SystemClock_Config+0x128>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a35      	ldr	r2, [pc, #212]	; (8002ce8 <SystemClock_Config+0x128>)
 8002c14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	4b33      	ldr	r3, [pc, #204]	; (8002ce8 <SystemClock_Config+0x128>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c22:	603b      	str	r3, [r7, #0]
 8002c24:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c26:	2301      	movs	r3, #1
 8002c28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002c2c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002c30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c34:	2302      	movs	r3, #2
 8002c36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002c42:	2304      	movs	r3, #4
 8002c44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002c48:	23d8      	movs	r3, #216	; 0xd8
 8002c4a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002c54:	2309      	movs	r3, #9
 8002c56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c5a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f001 ffcc 	bl	8004bfc <HAL_RCC_OscConfig>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002c6a:	f000 f851 	bl	8002d10 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002c6e:	f001 ff75 	bl	8004b5c <HAL_PWREx_EnableOverDrive>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002c78:	f000 f84a 	bl	8002d10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c7c:	230f      	movs	r3, #15
 8002c7e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c82:	2302      	movs	r3, #2
 8002c84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002c8e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002c9e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002ca2:	2107      	movs	r1, #7
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f002 fa57 	bl	8005158 <HAL_RCC_ClockConfig>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8002cb0:	f000 f82e 	bl	8002d10 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 8002cb4:	f44f 4383 	mov.w	r3, #16768	; 0x4180
 8002cb8:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cc6:	f107 0308 	add.w	r3, r7, #8
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f002 fc6e 	bl	80055ac <HAL_RCCEx_PeriphCLKConfig>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <SystemClock_Config+0x11a>
  {
    Error_Handler();
 8002cd6:	f000 f81b 	bl	8002d10 <Error_Handler>
  }
}
 8002cda:	bf00      	nop
 8002cdc:	37e0      	adds	r7, #224	; 0xe0
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	40007000 	.word	0x40007000

08002cec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a04      	ldr	r2, [pc, #16]	; (8002d0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d101      	bne.n	8002d02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002cfe:	f000 fed7 	bl	8003ab0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002d02:	bf00      	nop
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40000400 	.word	0x40000400

08002d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002d14:	bf00      	nop
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
	...

08002d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d26:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <HAL_MspInit+0x4c>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	4a10      	ldr	r2, [pc, #64]	; (8002d6c <HAL_MspInit+0x4c>)
 8002d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d30:	6413      	str	r3, [r2, #64]	; 0x40
 8002d32:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <HAL_MspInit+0x4c>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3a:	607b      	str	r3, [r7, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d3e:	4b0b      	ldr	r3, [pc, #44]	; (8002d6c <HAL_MspInit+0x4c>)
 8002d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d42:	4a0a      	ldr	r2, [pc, #40]	; (8002d6c <HAL_MspInit+0x4c>)
 8002d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d48:	6453      	str	r3, [r2, #68]	; 0x44
 8002d4a:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <HAL_MspInit+0x4c>)
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d52:	603b      	str	r3, [r7, #0]
 8002d54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d56:	2200      	movs	r2, #0
 8002d58:	210f      	movs	r1, #15
 8002d5a:	f06f 0001 	mvn.w	r0, #1
 8002d5e:	f000 ffa1 	bl	8003ca4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d62:	bf00      	nop
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40023800 	.word	0x40023800

08002d70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08c      	sub	sp, #48	; 0x30
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8002d80:	2200      	movs	r2, #0
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	201d      	movs	r0, #29
 8002d86:	f000 ff8d 	bl	8003ca4 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d8a:	201d      	movs	r0, #29
 8002d8c:	f000 ffa6 	bl	8003cdc <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8002d90:	4b1f      	ldr	r3, [pc, #124]	; (8002e10 <HAL_InitTick+0xa0>)
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	4a1e      	ldr	r2, [pc, #120]	; (8002e10 <HAL_InitTick+0xa0>)
 8002d96:	f043 0302 	orr.w	r3, r3, #2
 8002d9a:	6413      	str	r3, [r2, #64]	; 0x40
 8002d9c:	4b1c      	ldr	r3, [pc, #112]	; (8002e10 <HAL_InitTick+0xa0>)
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002da8:	f107 0210 	add.w	r2, r7, #16
 8002dac:	f107 0314 	add.w	r3, r7, #20
 8002db0:	4611      	mov	r1, r2
 8002db2:	4618      	mov	r0, r3
 8002db4:	f002 fbc8 	bl	8005548 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002db8:	f002 fb9e 	bl	80054f8 <HAL_RCC_GetPCLK1Freq>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc4:	4a13      	ldr	r2, [pc, #76]	; (8002e14 <HAL_InitTick+0xa4>)
 8002dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dca:	0c9b      	lsrs	r3, r3, #18
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8002dd0:	4b11      	ldr	r3, [pc, #68]	; (8002e18 <HAL_InitTick+0xa8>)
 8002dd2:	4a12      	ldr	r2, [pc, #72]	; (8002e1c <HAL_InitTick+0xac>)
 8002dd4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8002dd6:	4b10      	ldr	r3, [pc, #64]	; (8002e18 <HAL_InitTick+0xa8>)
 8002dd8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ddc:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8002dde:	4a0e      	ldr	r2, [pc, #56]	; (8002e18 <HAL_InitTick+0xa8>)
 8002de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de2:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8002de4:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <HAL_InitTick+0xa8>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dea:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <HAL_InitTick+0xa8>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8002df0:	4809      	ldr	r0, [pc, #36]	; (8002e18 <HAL_InitTick+0xa8>)
 8002df2:	f003 f801 	bl	8005df8 <HAL_TIM_Base_Init>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d104      	bne.n	8002e06 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8002dfc:	4806      	ldr	r0, [pc, #24]	; (8002e18 <HAL_InitTick+0xa8>)
 8002dfe:	f003 f827 	bl	8005e50 <HAL_TIM_Base_Start_IT>
 8002e02:	4603      	mov	r3, r0
 8002e04:	e000      	b.n	8002e08 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3730      	adds	r7, #48	; 0x30
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40023800 	.word	0x40023800
 8002e14:	431bde83 	.word	0x431bde83
 8002e18:	20004824 	.word	0x20004824
 8002e1c:	40000400 	.word	0x40000400

08002e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e32:	e7fe      	b.n	8002e32 <HardFault_Handler+0x4>

08002e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e38:	e7fe      	b.n	8002e38 <MemManage_Handler+0x4>

08002e3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e3e:	e7fe      	b.n	8002e3e <BusFault_Handler+0x4>

08002e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e44:	e7fe      	b.n	8002e44 <UsageFault_Handler+0x4>

08002e46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e46:	b480      	push	{r7}
 8002e48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002e58:	2010      	movs	r0, #16
 8002e5a:	f001 f965 	bl	8004128 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}
	...

08002e64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e68:	4802      	ldr	r0, [pc, #8]	; (8002e74 <TIM3_IRQHandler+0x10>)
 8002e6a:	f003 f895 	bl	8005f98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e6e:	bf00      	nop
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	20004824 	.word	0x20004824

08002e78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002e7c:	4802      	ldr	r0, [pc, #8]	; (8002e88 <USART2_IRQHandler+0x10>)
 8002e7e:	f004 fa0f 	bl	80072a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	2000494c 	.word	0x2000494c

08002e8c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002e90:	4802      	ldr	r0, [pc, #8]	; (8002e9c <USART3_IRQHandler+0x10>)
 8002e92:	f004 fa05 	bl	80072a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002e96:	bf00      	nop
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	200048ac 	.word	0x200048ac

08002ea0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002ea4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002ea8:	f001 f93e 	bl	8004128 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002eac:	bf00      	nop
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	e00a      	b.n	8002ed8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ec2:	f3af 8000 	nop.w
 8002ec6:	4601      	mov	r1, r0
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	60ba      	str	r2, [r7, #8]
 8002ece:	b2ca      	uxtb	r2, r1
 8002ed0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	617b      	str	r3, [r7, #20]
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	dbf0      	blt.n	8002ec2 <_read+0x12>
	}

return len;
 8002ee0:	687b      	ldr	r3, [r7, #4]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b086      	sub	sp, #24
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	60f8      	str	r0, [r7, #12]
 8002ef2:	60b9      	str	r1, [r7, #8]
 8002ef4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	617b      	str	r3, [r7, #20]
 8002efa:	e009      	b.n	8002f10 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	1c5a      	adds	r2, r3, #1
 8002f00:	60ba      	str	r2, [r7, #8]
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 fcc5 	bl	8003894 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	617b      	str	r3, [r7, #20]
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	dbf1      	blt.n	8002efc <_write+0x12>
	}
	return len;
 8002f18:	687b      	ldr	r3, [r7, #4]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3718      	adds	r7, #24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <_close>:

int _close(int file)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
	return -1;
 8002f2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
 8002f42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f4a:	605a      	str	r2, [r3, #4]
	return 0;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <_isatty>:

int _isatty(int file)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
	return 1;
 8002f62:	2301      	movs	r3, #1
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
	return 0;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
	...

08002f8c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002f94:	4b11      	ldr	r3, [pc, #68]	; (8002fdc <_sbrk+0x50>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d102      	bne.n	8002fa2 <_sbrk+0x16>
		heap_end = &end;
 8002f9c:	4b0f      	ldr	r3, [pc, #60]	; (8002fdc <_sbrk+0x50>)
 8002f9e:	4a10      	ldr	r2, [pc, #64]	; (8002fe0 <_sbrk+0x54>)
 8002fa0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002fa2:	4b0e      	ldr	r3, [pc, #56]	; (8002fdc <_sbrk+0x50>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002fa8:	4b0c      	ldr	r3, [pc, #48]	; (8002fdc <_sbrk+0x50>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4413      	add	r3, r2
 8002fb0:	466a      	mov	r2, sp
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d907      	bls.n	8002fc6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002fb6:	f008 fde1 	bl	800bb7c <__errno>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	230c      	movs	r3, #12
 8002fbe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc4:	e006      	b.n	8002fd4 <_sbrk+0x48>
	}

	heap_end += incr;
 8002fc6:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <_sbrk+0x50>)
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	4a03      	ldr	r2, [pc, #12]	; (8002fdc <_sbrk+0x50>)
 8002fd0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	200008b4 	.word	0x200008b4
 8002fe0:	20004a28 	.word	0x20004a28

08002fe4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fe8:	4b08      	ldr	r3, [pc, #32]	; (800300c <SystemInit+0x28>)
 8002fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fee:	4a07      	ldr	r2, [pc, #28]	; (800300c <SystemInit+0x28>)
 8002ff0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ff4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ff8:	4b04      	ldr	r3, [pc, #16]	; (800300c <SystemInit+0x28>)
 8002ffa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ffe:	609a      	str	r2, [r3, #8]
#endif
}
 8003000:	bf00      	nop
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	e000ed00 	.word	0xe000ed00

08003010 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b09a      	sub	sp, #104	; 0x68
 8003014:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003016:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	605a      	str	r2, [r3, #4]
 8003020:	609a      	str	r2, [r3, #8]
 8003022:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003024:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003030:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	605a      	str	r2, [r3, #4]
 800303a:	609a      	str	r2, [r3, #8]
 800303c:	60da      	str	r2, [r3, #12]
 800303e:	611a      	str	r2, [r3, #16]
 8003040:	615a      	str	r2, [r3, #20]
 8003042:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003044:	1d3b      	adds	r3, r7, #4
 8003046:	222c      	movs	r2, #44	; 0x2c
 8003048:	2100      	movs	r1, #0
 800304a:	4618      	mov	r0, r3
 800304c:	f008 fddb 	bl	800bc06 <memset>

  htim1.Instance = TIM1;
 8003050:	4b55      	ldr	r3, [pc, #340]	; (80031a8 <MX_TIM1_Init+0x198>)
 8003052:	4a56      	ldr	r2, [pc, #344]	; (80031ac <MX_TIM1_Init+0x19c>)
 8003054:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 108-1;
 8003056:	4b54      	ldr	r3, [pc, #336]	; (80031a8 <MX_TIM1_Init+0x198>)
 8003058:	226b      	movs	r2, #107	; 0x6b
 800305a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800305c:	4b52      	ldr	r3, [pc, #328]	; (80031a8 <MX_TIM1_Init+0x198>)
 800305e:	2200      	movs	r2, #0
 8003060:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8003062:	4b51      	ldr	r3, [pc, #324]	; (80031a8 <MX_TIM1_Init+0x198>)
 8003064:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003068:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800306a:	4b4f      	ldr	r3, [pc, #316]	; (80031a8 <MX_TIM1_Init+0x198>)
 800306c:	2200      	movs	r2, #0
 800306e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003070:	4b4d      	ldr	r3, [pc, #308]	; (80031a8 <MX_TIM1_Init+0x198>)
 8003072:	2200      	movs	r2, #0
 8003074:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003076:	4b4c      	ldr	r3, [pc, #304]	; (80031a8 <MX_TIM1_Init+0x198>)
 8003078:	2200      	movs	r2, #0
 800307a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800307c:	484a      	ldr	r0, [pc, #296]	; (80031a8 <MX_TIM1_Init+0x198>)
 800307e:	f002 febb 	bl	8005df8 <HAL_TIM_Base_Init>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003088:	f7ff fe42 	bl	8002d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800308c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003090:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003092:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003096:	4619      	mov	r1, r3
 8003098:	4843      	ldr	r0, [pc, #268]	; (80031a8 <MX_TIM1_Init+0x198>)
 800309a:	f003 f9b5 	bl	8006408 <HAL_TIM_ConfigClockSource>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80030a4:	f7ff fe34 	bl	8002d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80030a8:	483f      	ldr	r0, [pc, #252]	; (80031a8 <MX_TIM1_Init+0x198>)
 80030aa:	f002 fefb 	bl	8005ea4 <HAL_TIM_PWM_Init>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80030b4:	f7ff fe2c 	bl	8002d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030b8:	2300      	movs	r3, #0
 80030ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80030bc:	2300      	movs	r3, #0
 80030be:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030c0:	2300      	movs	r3, #0
 80030c2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80030c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80030c8:	4619      	mov	r1, r3
 80030ca:	4837      	ldr	r0, [pc, #220]	; (80031a8 <MX_TIM1_Init+0x198>)
 80030cc:	f003 fe3c 	bl	8006d48 <HAL_TIMEx_MasterConfigSynchronization>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80030d6:	f7ff fe1b 	bl	8002d10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030da:	2360      	movs	r3, #96	; 0x60
 80030dc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80030de:	2300      	movs	r3, #0
 80030e0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030e2:	2300      	movs	r3, #0
 80030e4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80030e6:	2300      	movs	r3, #0
 80030e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030ea:	2300      	movs	r3, #0
 80030ec:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80030ee:	2300      	movs	r3, #0
 80030f0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80030f2:	2300      	movs	r3, #0
 80030f4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80030fa:	2200      	movs	r2, #0
 80030fc:	4619      	mov	r1, r3
 80030fe:	482a      	ldr	r0, [pc, #168]	; (80031a8 <MX_TIM1_Init+0x198>)
 8003100:	f003 f86a 	bl	80061d8 <HAL_TIM_PWM_ConfigChannel>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800310a:	f7ff fe01 	bl	8002d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800310e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003112:	2204      	movs	r2, #4
 8003114:	4619      	mov	r1, r3
 8003116:	4824      	ldr	r0, [pc, #144]	; (80031a8 <MX_TIM1_Init+0x198>)
 8003118:	f003 f85e 	bl	80061d8 <HAL_TIM_PWM_ConfigChannel>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8003122:	f7ff fdf5 	bl	8002d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003126:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800312a:	2208      	movs	r2, #8
 800312c:	4619      	mov	r1, r3
 800312e:	481e      	ldr	r0, [pc, #120]	; (80031a8 <MX_TIM1_Init+0x198>)
 8003130:	f003 f852 	bl	80061d8 <HAL_TIM_PWM_ConfigChannel>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800313a:	f7ff fde9 	bl	8002d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800313e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003142:	220c      	movs	r2, #12
 8003144:	4619      	mov	r1, r3
 8003146:	4818      	ldr	r0, [pc, #96]	; (80031a8 <MX_TIM1_Init+0x198>)
 8003148:	f003 f846 	bl	80061d8 <HAL_TIM_PWM_ConfigChannel>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8003152:	f7ff fddd 	bl	8002d10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003156:	2300      	movs	r3, #0
 8003158:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800315a:	2300      	movs	r3, #0
 800315c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800315e:	2300      	movs	r3, #0
 8003160:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003162:	2300      	movs	r3, #0
 8003164:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003166:	2300      	movs	r3, #0
 8003168:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800316a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800316e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003170:	2300      	movs	r3, #0
 8003172:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003174:	2300      	movs	r3, #0
 8003176:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003178:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800317c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800317e:	2300      	movs	r3, #0
 8003180:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003182:	2300      	movs	r3, #0
 8003184:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003186:	1d3b      	adds	r3, r7, #4
 8003188:	4619      	mov	r1, r3
 800318a:	4807      	ldr	r0, [pc, #28]	; (80031a8 <MX_TIM1_Init+0x198>)
 800318c:	f003 fe6a 	bl	8006e64 <HAL_TIMEx_ConfigBreakDeadTime>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8003196:	f7ff fdbb 	bl	8002d10 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800319a:	4803      	ldr	r0, [pc, #12]	; (80031a8 <MX_TIM1_Init+0x198>)
 800319c:	f000 f828 	bl	80031f0 <HAL_TIM_MspPostInit>

}
 80031a0:	bf00      	nop
 80031a2:	3768      	adds	r7, #104	; 0x68
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	20004864 	.word	0x20004864
 80031ac:	40010000 	.word	0x40010000

080031b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a0a      	ldr	r2, [pc, #40]	; (80031e8 <HAL_TIM_Base_MspInit+0x38>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d10b      	bne.n	80031da <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80031c2:	4b0a      	ldr	r3, [pc, #40]	; (80031ec <HAL_TIM_Base_MspInit+0x3c>)
 80031c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c6:	4a09      	ldr	r2, [pc, #36]	; (80031ec <HAL_TIM_Base_MspInit+0x3c>)
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	6453      	str	r3, [r2, #68]	; 0x44
 80031ce:	4b07      	ldr	r3, [pc, #28]	; (80031ec <HAL_TIM_Base_MspInit+0x3c>)
 80031d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80031da:	bf00      	nop
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	40010000 	.word	0x40010000
 80031ec:	40023800 	.word	0x40023800

080031f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b088      	sub	sp, #32
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f8:	f107 030c 	add.w	r3, r7, #12
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	605a      	str	r2, [r3, #4]
 8003202:	609a      	str	r2, [r3, #8]
 8003204:	60da      	str	r2, [r3, #12]
 8003206:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a11      	ldr	r2, [pc, #68]	; (8003254 <HAL_TIM_MspPostInit+0x64>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d11c      	bne.n	800324c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003212:	4b11      	ldr	r3, [pc, #68]	; (8003258 <HAL_TIM_MspPostInit+0x68>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	4a10      	ldr	r2, [pc, #64]	; (8003258 <HAL_TIM_MspPostInit+0x68>)
 8003218:	f043 0310 	orr.w	r3, r3, #16
 800321c:	6313      	str	r3, [r2, #48]	; 0x30
 800321e:	4b0e      	ldr	r3, [pc, #56]	; (8003258 <HAL_TIM_MspPostInit+0x68>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	f003 0310 	and.w	r3, r3, #16
 8003226:	60bb      	str	r3, [r7, #8]
 8003228:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800322a:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800322e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003230:	2302      	movs	r3, #2
 8003232:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003238:	2300      	movs	r3, #0
 800323a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800323c:	2301      	movs	r3, #1
 800323e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003240:	f107 030c 	add.w	r3, r7, #12
 8003244:	4619      	mov	r1, r3
 8003246:	4805      	ldr	r0, [pc, #20]	; (800325c <HAL_TIM_MspPostInit+0x6c>)
 8003248:	f000 fd78 	bl	8003d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800324c:	bf00      	nop
 800324e:	3720      	adds	r7, #32
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40010000 	.word	0x40010000
 8003258:	40023800 	.word	0x40023800
 800325c:	40021000 	.word	0x40021000

08003260 <enable>:
/*!
    Enables the device
    @param sensor The all parameters of sensor
*/
/**************************************************************************/
void enable(Lux_sensor *sensor){
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Enable the device by setting the control bit to 0x03 */
  write8(TSL2561_COMMAND_BIT | TSL2561_REGISTER_CONTROL, TSL2561_CONTROL_POWERON, LUX_SENSOR_ADDR);
 8003268:	2252      	movs	r2, #82	; 0x52
 800326a:	2103      	movs	r1, #3
 800326c:	2080      	movs	r0, #128	; 0x80
 800326e:	f7ff fb5d 	bl	800292c <write8>
}
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <disable>:
/*!
    Disables the device (putting it in lower power sleep mode)
    @param sensor The all parameters of sensor
*/
/**************************************************************************/
void disable(Lux_sensor *sensor){
 800327a:	b580      	push	{r7, lr}
 800327c:	b082      	sub	sp, #8
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  /* Turn the device off to save power */
  write8(TSL2561_COMMAND_BIT | TSL2561_REGISTER_CONTROL, TSL2561_CONTROL_POWEROFF,LUX_SENSOR_ADDR);
 8003282:	2252      	movs	r2, #82	; 0x52
 8003284:	2100      	movs	r1, #0
 8003286:	2080      	movs	r0, #128	; 0x80
 8003288:	f7ff fb50 	bl	800292c <write8>
}
 800328c:	bf00      	nop
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <getData>:
/**************************************************************************/
/*!
    Private function to read luminosity on both channels
*/
/**************************************************************************/
void getData (Lux_sensor *sensor, uint16_t *broadband, uint16_t *ir){
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]

  /* Reads a two byte value from channel 0 (visible + infrared) */
  *broadband = read16(TSL2561_COMMAND_BIT | TSL2561_WORD_BIT | TSL2561_REGISTER_CHAN0_LOW, sensor->_addr);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f993 3000 	ldrsb.w	r3, [r3]
 80032a6:	4619      	mov	r1, r3
 80032a8:	20ac      	movs	r0, #172	; 0xac
 80032aa:	f7ff fb9b 	bl	80029e4 <read16>
 80032ae:	4603      	mov	r3, r0
 80032b0:	461a      	mov	r2, r3
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	801a      	strh	r2, [r3, #0]

  /* Reads a two byte value from channel 1 (infrared) */
  *ir = read16(TSL2561_COMMAND_BIT | TSL2561_WORD_BIT | TSL2561_REGISTER_CHAN1_LOW, sensor->_addr);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f993 3000 	ldrsb.w	r3, [r3]
 80032bc:	4619      	mov	r1, r3
 80032be:	20ae      	movs	r0, #174	; 0xae
 80032c0:	f7ff fb90 	bl	80029e4 <read16>
 80032c4:	4603      	mov	r3, r0
 80032c6:	461a      	mov	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	801a      	strh	r2, [r3, #0]

}
 80032cc:	bf00      	nop
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <TSL2561_Init>:
    @brief Initialize the sensor
    @param sensor The all parameters of sensor
    @param hi2c Pointer to I2c channel in use (I2C address of this chip is 0x29)
*/
/**************************************************************************/
bool TSL2561_Init(Lux_sensor *sensor){
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
	sensor->_addr = LUX_SENSOR_ADDR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2252      	movs	r2, #82	; 0x52
 80032e0:	701a      	strb	r2, [r3, #0]
	sensor->_tsl2561IntegrationTime = TSL2561_INTEGRATIONTIME_13MS;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	709a      	strb	r2, [r3, #2]
	sensor->_tsl2561Gain = TSL2561_GAIN_1X;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	70da      	strb	r2, [r3, #3]
  /* Make sure we're actually connected */
    uint8_t x = read8(TSL2561_REGISTER_ID, sensor->_addr);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f993 3000 	ldrsb.w	r3, [r3]
 80032f4:	4619      	mov	r1, r3
 80032f6:	200a      	movs	r0, #10
 80032f8:	f7ff fb46 	bl	8002988 <read8>
 80032fc:	4603      	mov	r3, r0
 80032fe:	73fb      	strb	r3, [r7, #15]
    if (x & 0x05) { // ID code for TSL2561
 8003300:	7bfb      	ldrb	r3, [r7, #15]
 8003302:	f003 0305 	and.w	r3, r3, #5
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <TSL2561_Init+0x3a>
      return false;
 800330a:	2300      	movs	r3, #0
 800330c:	e012      	b.n	8003334 <TSL2561_Init+0x60>
    }
    sensor->_tsl2561Initialised = true;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	705a      	strb	r2, [r3, #1]

    /* Set default integration time and gain */
    TSL2561_setIntegrationTime(sensor, sensor->_tsl2561IntegrationTime);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	789b      	ldrb	r3, [r3, #2]
 8003318:	4619      	mov	r1, r3
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f80e 	bl	800333c <TSL2561_setIntegrationTime>
    TSL2561_setGain(sensor, sensor->_tsl2561Gain);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	78db      	ldrb	r3, [r3, #3]
 8003324:	4619      	mov	r1, r3
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f831 	bl	800338e <TSL2561_setGain>

    /* Note: by default, the device is in power down mode on bootup */
    disable(sensor);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7ff ffa4 	bl	800327a <disable>
return true;
 8003332:	2301      	movs	r3, #1
}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <TSL2561_setIntegrationTime>:
	take longer to run readings.
	@param sensor The all parameters of sensor
    @param time The amount of time we'd like to add up values
*/
/**************************************************************************/
void TSL2561_setIntegrationTime(Lux_sensor *sensor, tsl2561IntegrationTime_t time){
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	460b      	mov	r3, r1
 8003346:	70fb      	strb	r3, [r7, #3]
  if (!sensor->_tsl2561Initialised) TSL2561_Init(sensor);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	785b      	ldrb	r3, [r3, #1]
 800334c:	f083 0301 	eor.w	r3, r3, #1
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d002      	beq.n	800335c <TSL2561_setIntegrationTime+0x20>
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7ff ffbc 	bl	80032d4 <TSL2561_Init>

  /* Enable the device by setting the control bit to 0x03 */
  enable(sensor);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f7ff ff7f 	bl	8003260 <enable>

  /* Update the timing register */
  write8(TSL2561_COMMAND_BIT | TSL2561_REGISTER_TIMING, time | sensor->_tsl2561Gain, sensor->_addr);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	78da      	ldrb	r2, [r3, #3]
 8003366:	78fb      	ldrb	r3, [r7, #3]
 8003368:	4313      	orrs	r3, r2
 800336a:	b2d9      	uxtb	r1, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f993 3000 	ldrsb.w	r3, [r3]
 8003372:	461a      	mov	r2, r3
 8003374:	2081      	movs	r0, #129	; 0x81
 8003376:	f7ff fad9 	bl	800292c <write8>

  /* Update value placeholders */
  sensor->_tsl2561IntegrationTime = time;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	78fa      	ldrb	r2, [r7, #3]
 800337e:	709a      	strb	r2, [r3, #2]

  /* Turn the device off to save power */
  disable(sensor);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f7ff ff7a 	bl	800327a <disable>
}
 8003386:	bf00      	nop
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <TSL2561_setGain>:
    @brief  Adjusts the gain on the TSL2561 (adjusts the sensitivity to light)
    @param sensor The all parameters of sensor
    @param gain The value we'd like to set the gain to
*/
/**************************************************************************/
void TSL2561_setGain(Lux_sensor *sensor, tsl2561Gain_t gain){
 800338e:	b580      	push	{r7, lr}
 8003390:	b082      	sub	sp, #8
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
 8003396:	460b      	mov	r3, r1
 8003398:	70fb      	strb	r3, [r7, #3]
  if (!sensor->_tsl2561Initialised) TSL2561_Init(sensor);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	785b      	ldrb	r3, [r3, #1]
 800339e:	f083 0301 	eor.w	r3, r3, #1
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d002      	beq.n	80033ae <TSL2561_setGain+0x20>
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7ff ff93 	bl	80032d4 <TSL2561_Init>

  /* Enable the device by setting the control bit to 0x03 */
  enable(sensor);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7ff ff56 	bl	8003260 <enable>

  /* Update the timing register */
  write8(TSL2561_COMMAND_BIT | TSL2561_REGISTER_TIMING, sensor->_tsl2561IntegrationTime | gain, sensor->_addr);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	789a      	ldrb	r2, [r3, #2]
 80033b8:	78fb      	ldrb	r3, [r7, #3]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	b2d9      	uxtb	r1, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f993 3000 	ldrsb.w	r3, [r3]
 80033c4:	461a      	mov	r2, r3
 80033c6:	2081      	movs	r0, #129	; 0x81
 80033c8:	f7ff fab0 	bl	800292c <write8>

  /* Update value placeholders */
  sensor->_tsl2561Gain = gain;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	78fa      	ldrb	r2, [r7, #3]
 80033d0:	70da      	strb	r2, [r3, #3]

  /* Turn the device off to save power */
  disable(sensor);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7ff ff51 	bl	800327a <disable>
}
 80033d8:	bf00      	nop
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <TSL2561_calculateLux>:
    @param  ir The 16-bit sensor reading from the IR-only light diode.
    @returns The integer Lux value we calcuated.
             Returns 0 if the sensor values are unreliable, or 65536 if the sensor is saturated.
*/
/**************************************************************************/
uint16_t TSL2561_calculateLux(uint16_t broadband, uint16_t ir) {
 80033e0:	b590      	push	{r4, r7, lr}
 80033e2:	ed2d 8b04 	vpush	{d8-d9}
 80033e6:	b087      	sub	sp, #28
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	4603      	mov	r3, r0
 80033ec:	460a      	mov	r2, r1
 80033ee:	80fb      	strh	r3, [r7, #6]
 80033f0:	4613      	mov	r3, r2
 80033f2:	80bb      	strh	r3, [r7, #4]
	double ratio=0;
 80033f4:	f04f 0300 	mov.w	r3, #0
 80033f8:	f04f 0400 	mov.w	r4, #0
 80033fc:	e9c7 3402 	strd	r3, r4, [r7, #8]
	uint16_t x=0;
 8003400:	2300      	movs	r3, #0
 8003402:	82fb      	strh	r3, [r7, #22]
		// Convert from unsigned integer to floating point
	ratio = ir / broadband;
 8003404:	88ba      	ldrh	r2, [r7, #4]
 8003406:	88fb      	ldrh	r3, [r7, #6]
 8003408:	fbb2 f3f3 	udiv	r3, r2, r3
 800340c:	b29b      	uxth	r3, r3
 800340e:	ee07 3a90 	vmov	s15, r3
 8003412:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003416:	ed87 7b02 	vstr	d7, [r7, #8]
	if(ratio<=0.5){x = 0.0304 * broadband - 0.062 * ir * pow(ratio,1.4);}
 800341a:	ed97 7b02 	vldr	d7, [r7, #8]
 800341e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8003422:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800342a:	d823      	bhi.n	8003474 <TSL2561_calculateLux+0x94>
 800342c:	88fb      	ldrh	r3, [r7, #6]
 800342e:	ee07 3a90 	vmov	s15, r3
 8003432:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003436:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8003558 <TSL2561_calculateLux+0x178>
 800343a:	ee27 8b06 	vmul.f64	d8, d7, d6
 800343e:	88bb      	ldrh	r3, [r7, #4]
 8003440:	ee07 3a90 	vmov	s15, r3
 8003444:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003448:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8003560 <TSL2561_calculateLux+0x180>
 800344c:	ee27 9b06 	vmul.f64	d9, d7, d6
 8003450:	ed9f 1b45 	vldr	d1, [pc, #276]	; 8003568 <TSL2561_calculateLux+0x188>
 8003454:	ed97 0b02 	vldr	d0, [r7, #8]
 8003458:	f007 fda2 	bl	800afa0 <pow>
 800345c:	eeb0 7b40 	vmov.f64	d7, d0
 8003460:	ee29 7b07 	vmul.f64	d7, d9, d7
 8003464:	ee38 7b47 	vsub.f64	d7, d8, d7
 8003468:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800346c:	ee17 3a90 	vmov	r3, s15
 8003470:	82fb      	strh	r3, [r7, #22]
 8003472:	e06a      	b.n	800354a <TSL2561_calculateLux+0x16a>
	else if(ratio<=0.61){x = 0.0224 * broadband - 0.031 * ir;}
 8003474:	ed97 7b02 	vldr	d7, [r7, #8]
 8003478:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8003570 <TSL2561_calculateLux+0x190>
 800347c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003484:	d819      	bhi.n	80034ba <TSL2561_calculateLux+0xda>
 8003486:	88fb      	ldrh	r3, [r7, #6]
 8003488:	ee07 3a90 	vmov	s15, r3
 800348c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003490:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8003578 <TSL2561_calculateLux+0x198>
 8003494:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003498:	88bb      	ldrh	r3, [r7, #4]
 800349a:	ee07 3a90 	vmov	s15, r3
 800349e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80034a2:	ed9f 5b37 	vldr	d5, [pc, #220]	; 8003580 <TSL2561_calculateLux+0x1a0>
 80034a6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80034aa:	ee36 7b47 	vsub.f64	d7, d6, d7
 80034ae:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80034b2:	ee17 3a90 	vmov	r3, s15
 80034b6:	82fb      	strh	r3, [r7, #22]
 80034b8:	e047      	b.n	800354a <TSL2561_calculateLux+0x16a>
	else if(ratio<=0.8){x = 0.0128 * broadband - 0.0153 * ir;}
 80034ba:	ed97 7b02 	vldr	d7, [r7, #8]
 80034be:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8003588 <TSL2561_calculateLux+0x1a8>
 80034c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80034c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ca:	d819      	bhi.n	8003500 <TSL2561_calculateLux+0x120>
 80034cc:	88fb      	ldrh	r3, [r7, #6]
 80034ce:	ee07 3a90 	vmov	s15, r3
 80034d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80034d6:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 8003590 <TSL2561_calculateLux+0x1b0>
 80034da:	ee27 6b06 	vmul.f64	d6, d7, d6
 80034de:	88bb      	ldrh	r3, [r7, #4]
 80034e0:	ee07 3a90 	vmov	s15, r3
 80034e4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80034e8:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8003598 <TSL2561_calculateLux+0x1b8>
 80034ec:	ee27 7b05 	vmul.f64	d7, d7, d5
 80034f0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80034f4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80034f8:	ee17 3a90 	vmov	r3, s15
 80034fc:	82fb      	strh	r3, [r7, #22]
 80034fe:	e024      	b.n	800354a <TSL2561_calculateLux+0x16a>
	else if(ratio<=1.3){x = 0.00146 * broadband - 0.00112 * ir;}
 8003500:	ed97 7b02 	vldr	d7, [r7, #8]
 8003504:	ed9f 6b26 	vldr	d6, [pc, #152]	; 80035a0 <TSL2561_calculateLux+0x1c0>
 8003508:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800350c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003510:	d819      	bhi.n	8003546 <TSL2561_calculateLux+0x166>
 8003512:	88fb      	ldrh	r3, [r7, #6]
 8003514:	ee07 3a90 	vmov	s15, r3
 8003518:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800351c:	ed9f 6b22 	vldr	d6, [pc, #136]	; 80035a8 <TSL2561_calculateLux+0x1c8>
 8003520:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003524:	88bb      	ldrh	r3, [r7, #4]
 8003526:	ee07 3a90 	vmov	s15, r3
 800352a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800352e:	ed9f 5b20 	vldr	d5, [pc, #128]	; 80035b0 <TSL2561_calculateLux+0x1d0>
 8003532:	ee27 7b05 	vmul.f64	d7, d7, d5
 8003536:	ee36 7b47 	vsub.f64	d7, d6, d7
 800353a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800353e:	ee17 3a90 	vmov	r3, s15
 8003542:	82fb      	strh	r3, [r7, #22]
 8003544:	e001      	b.n	800354a <TSL2561_calculateLux+0x16a>
	else{x=0;}
 8003546:	2300      	movs	r3, #0
 8003548:	82fb      	strh	r3, [r7, #22]
  return x;
 800354a:	8afb      	ldrh	r3, [r7, #22]
}
 800354c:	4618      	mov	r0, r3
 800354e:	371c      	adds	r7, #28
 8003550:	46bd      	mov	sp, r7
 8003552:	ecbd 8b04 	vpop	{d8-d9}
 8003556:	bd90      	pop	{r4, r7, pc}
 8003558:	77318fc5 	.word	0x77318fc5
 800355c:	3f9f212d 	.word	0x3f9f212d
 8003560:	c8b43958 	.word	0xc8b43958
 8003564:	3fafbe76 	.word	0x3fafbe76
 8003568:	66666666 	.word	0x66666666
 800356c:	3ff66666 	.word	0x3ff66666
 8003570:	b851eb85 	.word	0xb851eb85
 8003574:	3fe3851e 	.word	0x3fe3851e
 8003578:	8db8bac7 	.word	0x8db8bac7
 800357c:	3f96f006 	.word	0x3f96f006
 8003580:	c8b43958 	.word	0xc8b43958
 8003584:	3f9fbe76 	.word	0x3f9fbe76
 8003588:	9999999a 	.word	0x9999999a
 800358c:	3fe99999 	.word	0x3fe99999
 8003590:	eb1c432d 	.word	0xeb1c432d
 8003594:	3f8a36e2 	.word	0x3f8a36e2
 8003598:	3d07c84b 	.word	0x3d07c84b
 800359c:	3f8f559b 	.word	0x3f8f559b
 80035a0:	cccccccd 	.word	0xcccccccd
 80035a4:	3ff4cccc 	.word	0x3ff4cccc
 80035a8:	102363b2 	.word	0x102363b2
 80035ac:	3f57ebaf 	.word	0x3f57ebaf
 80035b0:	d7c6fbd2 	.word	0xd7c6fbd2
 80035b4:	3f52599e 	.word	0x3f52599e

080035b8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80035bc:	4b14      	ldr	r3, [pc, #80]	; (8003610 <MX_USART2_UART_Init+0x58>)
 80035be:	4a15      	ldr	r2, [pc, #84]	; (8003614 <MX_USART2_UART_Init+0x5c>)
 80035c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80035c2:	4b13      	ldr	r3, [pc, #76]	; (8003610 <MX_USART2_UART_Init+0x58>)
 80035c4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80035c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80035ca:	4b11      	ldr	r3, [pc, #68]	; (8003610 <MX_USART2_UART_Init+0x58>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80035d0:	4b0f      	ldr	r3, [pc, #60]	; (8003610 <MX_USART2_UART_Init+0x58>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80035d6:	4b0e      	ldr	r3, [pc, #56]	; (8003610 <MX_USART2_UART_Init+0x58>)
 80035d8:	2200      	movs	r2, #0
 80035da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80035dc:	4b0c      	ldr	r3, [pc, #48]	; (8003610 <MX_USART2_UART_Init+0x58>)
 80035de:	220c      	movs	r2, #12
 80035e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035e2:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <MX_USART2_UART_Init+0x58>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80035e8:	4b09      	ldr	r3, [pc, #36]	; (8003610 <MX_USART2_UART_Init+0x58>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80035ee:	4b08      	ldr	r3, [pc, #32]	; (8003610 <MX_USART2_UART_Init+0x58>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80035f4:	4b06      	ldr	r3, [pc, #24]	; (8003610 <MX_USART2_UART_Init+0x58>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80035fa:	4805      	ldr	r0, [pc, #20]	; (8003610 <MX_USART2_UART_Init+0x58>)
 80035fc:	f003 fcce 	bl	8006f9c <HAL_UART_Init>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003606:	f7ff fb83 	bl	8002d10 <Error_Handler>
  }

}
 800360a:	bf00      	nop
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	2000494c 	.word	0x2000494c
 8003614:	40004400 	.word	0x40004400

08003618 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800361c:	4b14      	ldr	r3, [pc, #80]	; (8003670 <MX_USART3_UART_Init+0x58>)
 800361e:	4a15      	ldr	r2, [pc, #84]	; (8003674 <MX_USART3_UART_Init+0x5c>)
 8003620:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003622:	4b13      	ldr	r3, [pc, #76]	; (8003670 <MX_USART3_UART_Init+0x58>)
 8003624:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003628:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800362a:	4b11      	ldr	r3, [pc, #68]	; (8003670 <MX_USART3_UART_Init+0x58>)
 800362c:	2200      	movs	r2, #0
 800362e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003630:	4b0f      	ldr	r3, [pc, #60]	; (8003670 <MX_USART3_UART_Init+0x58>)
 8003632:	2200      	movs	r2, #0
 8003634:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003636:	4b0e      	ldr	r3, [pc, #56]	; (8003670 <MX_USART3_UART_Init+0x58>)
 8003638:	2200      	movs	r2, #0
 800363a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800363c:	4b0c      	ldr	r3, [pc, #48]	; (8003670 <MX_USART3_UART_Init+0x58>)
 800363e:	220c      	movs	r2, #12
 8003640:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003642:	4b0b      	ldr	r3, [pc, #44]	; (8003670 <MX_USART3_UART_Init+0x58>)
 8003644:	2200      	movs	r2, #0
 8003646:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003648:	4b09      	ldr	r3, [pc, #36]	; (8003670 <MX_USART3_UART_Init+0x58>)
 800364a:	2200      	movs	r2, #0
 800364c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800364e:	4b08      	ldr	r3, [pc, #32]	; (8003670 <MX_USART3_UART_Init+0x58>)
 8003650:	2200      	movs	r2, #0
 8003652:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003654:	4b06      	ldr	r3, [pc, #24]	; (8003670 <MX_USART3_UART_Init+0x58>)
 8003656:	2200      	movs	r2, #0
 8003658:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800365a:	4805      	ldr	r0, [pc, #20]	; (8003670 <MX_USART3_UART_Init+0x58>)
 800365c:	f003 fc9e 	bl	8006f9c <HAL_UART_Init>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003666:	f7ff fb53 	bl	8002d10 <Error_Handler>
  }

}
 800366a:	bf00      	nop
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	200048ac 	.word	0x200048ac
 8003674:	40004800 	.word	0x40004800

08003678 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b08c      	sub	sp, #48	; 0x30
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003680:	f107 031c 	add.w	r3, r7, #28
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	605a      	str	r2, [r3, #4]
 800368a:	609a      	str	r2, [r3, #8]
 800368c:	60da      	str	r2, [r3, #12]
 800368e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a36      	ldr	r2, [pc, #216]	; (8003770 <HAL_UART_MspInit+0xf8>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d130      	bne.n	80036fc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800369a:	4b36      	ldr	r3, [pc, #216]	; (8003774 <HAL_UART_MspInit+0xfc>)
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	4a35      	ldr	r2, [pc, #212]	; (8003774 <HAL_UART_MspInit+0xfc>)
 80036a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036a4:	6413      	str	r3, [r2, #64]	; 0x40
 80036a6:	4b33      	ldr	r3, [pc, #204]	; (8003774 <HAL_UART_MspInit+0xfc>)
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ae:	61bb      	str	r3, [r7, #24]
 80036b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036b2:	4b30      	ldr	r3, [pc, #192]	; (8003774 <HAL_UART_MspInit+0xfc>)
 80036b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b6:	4a2f      	ldr	r2, [pc, #188]	; (8003774 <HAL_UART_MspInit+0xfc>)
 80036b8:	f043 0308 	orr.w	r3, r3, #8
 80036bc:	6313      	str	r3, [r2, #48]	; 0x30
 80036be:	4b2d      	ldr	r3, [pc, #180]	; (8003774 <HAL_UART_MspInit+0xfc>)
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	617b      	str	r3, [r7, #20]
 80036c8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80036ca:	2360      	movs	r3, #96	; 0x60
 80036cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ce:	2302      	movs	r3, #2
 80036d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d2:	2300      	movs	r3, #0
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036d6:	2303      	movs	r3, #3
 80036d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80036da:	2307      	movs	r3, #7
 80036dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036de:	f107 031c 	add.w	r3, r7, #28
 80036e2:	4619      	mov	r1, r3
 80036e4:	4824      	ldr	r0, [pc, #144]	; (8003778 <HAL_UART_MspInit+0x100>)
 80036e6:	f000 fb29 	bl	8003d3c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80036ea:	2200      	movs	r2, #0
 80036ec:	2105      	movs	r1, #5
 80036ee:	2026      	movs	r0, #38	; 0x26
 80036f0:	f000 fad8 	bl	8003ca4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80036f4:	2026      	movs	r0, #38	; 0x26
 80036f6:	f000 faf1 	bl	8003cdc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80036fa:	e035      	b.n	8003768 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a1e      	ldr	r2, [pc, #120]	; (800377c <HAL_UART_MspInit+0x104>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d130      	bne.n	8003768 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003706:	4b1b      	ldr	r3, [pc, #108]	; (8003774 <HAL_UART_MspInit+0xfc>)
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	4a1a      	ldr	r2, [pc, #104]	; (8003774 <HAL_UART_MspInit+0xfc>)
 800370c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003710:	6413      	str	r3, [r2, #64]	; 0x40
 8003712:	4b18      	ldr	r3, [pc, #96]	; (8003774 <HAL_UART_MspInit+0xfc>)
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800371a:	613b      	str	r3, [r7, #16]
 800371c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800371e:	4b15      	ldr	r3, [pc, #84]	; (8003774 <HAL_UART_MspInit+0xfc>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003722:	4a14      	ldr	r2, [pc, #80]	; (8003774 <HAL_UART_MspInit+0xfc>)
 8003724:	f043 0308 	orr.w	r3, r3, #8
 8003728:	6313      	str	r3, [r2, #48]	; 0x30
 800372a:	4b12      	ldr	r3, [pc, #72]	; (8003774 <HAL_UART_MspInit+0xfc>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003736:	f44f 7340 	mov.w	r3, #768	; 0x300
 800373a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800373c:	2302      	movs	r3, #2
 800373e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003740:	2300      	movs	r3, #0
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003744:	2303      	movs	r3, #3
 8003746:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003748:	2307      	movs	r3, #7
 800374a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800374c:	f107 031c 	add.w	r3, r7, #28
 8003750:	4619      	mov	r1, r3
 8003752:	4809      	ldr	r0, [pc, #36]	; (8003778 <HAL_UART_MspInit+0x100>)
 8003754:	f000 faf2 	bl	8003d3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003758:	2200      	movs	r2, #0
 800375a:	2105      	movs	r1, #5
 800375c:	2027      	movs	r0, #39	; 0x27
 800375e:	f000 faa1 	bl	8003ca4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003762:	2027      	movs	r0, #39	; 0x27
 8003764:	f000 faba 	bl	8003cdc <HAL_NVIC_EnableIRQ>
}
 8003768:	bf00      	nop
 800376a:	3730      	adds	r7, #48	; 0x30
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40004400 	.word	0x40004400
 8003774:	40023800 	.word	0x40023800
 8003778:	40020c00 	.word	0x40020c00
 800377c:	40004800 	.word	0x40004800

08003780 <init_UART3>:
  }
}

/* USER CODE BEGIN 1 */

void init_UART3(void){
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, &Rx_Uart3[0], 1);
 8003784:	2201      	movs	r2, #1
 8003786:	4903      	ldr	r1, [pc, #12]	; (8003794 <init_UART3+0x14>)
 8003788:	4803      	ldr	r0, [pc, #12]	; (8003798 <init_UART3+0x18>)
 800378a:	f003 fce7 	bl	800715c <HAL_UART_Receive_IT>
}
 800378e:	bf00      	nop
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	200049cc 	.word	0x200049cc
 8003798:	200048ac 	.word	0x200048ac

0800379c <init_UART2>:

void init_UART2(void){
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &Rx_Uart2[0], 1);
 80037a0:	2201      	movs	r2, #1
 80037a2:	4903      	ldr	r1, [pc, #12]	; (80037b0 <init_UART2+0x14>)
 80037a4:	4803      	ldr	r0, [pc, #12]	; (80037b4 <init_UART2+0x18>)
 80037a6:	f003 fcd9 	bl	800715c <HAL_UART_Receive_IT>
}
 80037aa:	bf00      	nop
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	2000492c 	.word	0x2000492c
 80037b4:	2000494c 	.word	0x2000494c

080037b8 <HAL_UART_RxCpltCallback>:
   @brief  Reception Complete callback for UART 2 e UART 3
   	   	   Uart 2 Receives bluetooth messages
   	   	   Uart 3 Receives via Usb
*/
/**************************************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){ //foi a uart2 que gerou a interrupçao?
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a28      	ldr	r2, [pc, #160]	; (8003868 <HAL_UART_RxCpltCallback+0xb0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d122      	bne.n	8003810 <HAL_UART_RxCpltCallback+0x58>
		HAL_UART_Receive_IT(&huart2,&Rx_Uart2[ (++Rx_Uart2_index & 15) ],1);
 80037ca:	4b28      	ldr	r3, [pc, #160]	; (800386c <HAL_UART_RxCpltCallback+0xb4>)
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	3301      	adds	r3, #1
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	4b26      	ldr	r3, [pc, #152]	; (800386c <HAL_UART_RxCpltCallback+0xb4>)
 80037d4:	701a      	strb	r2, [r3, #0]
 80037d6:	4b25      	ldr	r3, [pc, #148]	; (800386c <HAL_UART_RxCpltCallback+0xb4>)
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	4a24      	ldr	r2, [pc, #144]	; (8003870 <HAL_UART_RxCpltCallback+0xb8>)
 80037e0:	4413      	add	r3, r2
 80037e2:	2201      	movs	r2, #1
 80037e4:	4619      	mov	r1, r3
 80037e6:	4823      	ldr	r0, [pc, #140]	; (8003874 <HAL_UART_RxCpltCallback+0xbc>)
 80037e8:	f003 fcb8 	bl	800715c <HAL_UART_Receive_IT>
		if(Rx_Uart2[(Rx_Uart2_index & 15)-1]=='\n'){// if received endline character
 80037ec:	4b1f      	ldr	r3, [pc, #124]	; (800386c <HAL_UART_RxCpltCallback+0xb4>)
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	f003 030f 	and.w	r3, r3, #15
 80037f4:	3b01      	subs	r3, #1
 80037f6:	4a1e      	ldr	r2, [pc, #120]	; (8003870 <HAL_UART_RxCpltCallback+0xb8>)
 80037f8:	5cd3      	ldrb	r3, [r2, r3]
 80037fa:	2b0a      	cmp	r3, #10
 80037fc:	d108      	bne.n	8003810 <HAL_UART_RxCpltCallback+0x58>
			uart2_received_flag=1;
 80037fe:	4b1e      	ldr	r3, [pc, #120]	; (8003878 <HAL_UART_RxCpltCallback+0xc0>)
 8003800:	2201      	movs	r2, #1
 8003802:	701a      	strb	r2, [r3, #0]
			vTaskNotifyGiveFromISR( vTaskProcessInfHandle, NULL );
 8003804:	4b1d      	ldr	r3, [pc, #116]	; (800387c <HAL_UART_RxCpltCallback+0xc4>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2100      	movs	r1, #0
 800380a:	4618      	mov	r0, r3
 800380c:	f006 faec 	bl	8009de8 <vTaskNotifyGiveFromISR>
		}
	}
	if(huart->Instance == USART3) { //foi a uart3 que gerou a interrupçao?
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a1a      	ldr	r2, [pc, #104]	; (8003880 <HAL_UART_RxCpltCallback+0xc8>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d122      	bne.n	8003860 <HAL_UART_RxCpltCallback+0xa8>
		HAL_UART_Receive_IT(&huart3,&Rx_Uart3[ (++Rx_Uart3_index & 15) ],1);
 800381a:	4b1a      	ldr	r3, [pc, #104]	; (8003884 <HAL_UART_RxCpltCallback+0xcc>)
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	3301      	adds	r3, #1
 8003820:	b2da      	uxtb	r2, r3
 8003822:	4b18      	ldr	r3, [pc, #96]	; (8003884 <HAL_UART_RxCpltCallback+0xcc>)
 8003824:	701a      	strb	r2, [r3, #0]
 8003826:	4b17      	ldr	r3, [pc, #92]	; (8003884 <HAL_UART_RxCpltCallback+0xcc>)
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	4a16      	ldr	r2, [pc, #88]	; (8003888 <HAL_UART_RxCpltCallback+0xd0>)
 8003830:	4413      	add	r3, r2
 8003832:	2201      	movs	r2, #1
 8003834:	4619      	mov	r1, r3
 8003836:	4815      	ldr	r0, [pc, #84]	; (800388c <HAL_UART_RxCpltCallback+0xd4>)
 8003838:	f003 fc90 	bl	800715c <HAL_UART_Receive_IT>
		if(Rx_Uart3[(Rx_Uart3_index & 15)-1]=='\n'){ // if received endline character
 800383c:	4b11      	ldr	r3, [pc, #68]	; (8003884 <HAL_UART_RxCpltCallback+0xcc>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	f003 030f 	and.w	r3, r3, #15
 8003844:	3b01      	subs	r3, #1
 8003846:	4a10      	ldr	r2, [pc, #64]	; (8003888 <HAL_UART_RxCpltCallback+0xd0>)
 8003848:	5cd3      	ldrb	r3, [r2, r3]
 800384a:	2b0a      	cmp	r3, #10
 800384c:	d108      	bne.n	8003860 <HAL_UART_RxCpltCallback+0xa8>
			uart3_received_flag=1;
 800384e:	4b10      	ldr	r3, [pc, #64]	; (8003890 <HAL_UART_RxCpltCallback+0xd8>)
 8003850:	2201      	movs	r2, #1
 8003852:	701a      	strb	r2, [r3, #0]
			vTaskNotifyGiveFromISR( vTaskProcessInfHandle, NULL );
 8003854:	4b09      	ldr	r3, [pc, #36]	; (800387c <HAL_UART_RxCpltCallback+0xc4>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2100      	movs	r1, #0
 800385a:	4618      	mov	r0, r3
 800385c:	f006 fac4 	bl	8009de8 <vTaskNotifyGiveFromISR>
		}
	}
}
 8003860:	bf00      	nop
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40004400 	.word	0x40004400
 800386c:	200008b8 	.word	0x200008b8
 8003870:	2000492c 	.word	0x2000492c
 8003874:	2000494c 	.word	0x2000494c
 8003878:	200008ba 	.word	0x200008ba
 800387c:	200047b8 	.word	0x200047b8
 8003880:	40004800 	.word	0x40004800
 8003884:	200008b9 	.word	0x200008b9
 8003888:	200049cc 	.word	0x200049cc
 800388c:	200048ac 	.word	0x200048ac
 8003890:	200008bb 	.word	0x200008bb

08003894 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNCU__ */

PUTCHAR_PROTOTYPE
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
	char n_l= 13;
 800389c:	230d      	movs	r3, #13
 800389e:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch,1,0xFFFF);
 80038a0:	1d39      	adds	r1, r7, #4
 80038a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038a6:	2201      	movs	r2, #1
 80038a8:	4808      	ldr	r0, [pc, #32]	; (80038cc <__io_putchar+0x38>)
 80038aa:	f003 fbc5 	bl	8007038 <HAL_UART_Transmit>
	if(ch==10){
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b0a      	cmp	r3, #10
 80038b2:	d106      	bne.n	80038c2 <__io_putchar+0x2e>
	HAL_UART_Transmit(&huart3, (uint8_t*)&n_l,1,100);
 80038b4:	f107 010f 	add.w	r1, r7, #15
 80038b8:	2364      	movs	r3, #100	; 0x64
 80038ba:	2201      	movs	r2, #1
 80038bc:	4803      	ldr	r0, [pc, #12]	; (80038cc <__io_putchar+0x38>)
 80038be:	f003 fbbb 	bl	8007038 <HAL_UART_Transmit>
	}

	return ch;
 80038c2:	687b      	ldr	r3, [r7, #4]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	200048ac 	.word	0x200048ac

080038d0 <send_uart3>:

bool send_uart3(uint8_t *str){
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
	// transmit via uart 3
	uint8_t count;
	for(count=1;str[count]!='\n';count++){}
 80038d8:	2301      	movs	r3, #1
 80038da:	73fb      	strb	r3, [r7, #15]
 80038dc:	e002      	b.n	80038e4 <send_uart3+0x14>
 80038de:	7bfb      	ldrb	r3, [r7, #15]
 80038e0:	3301      	adds	r3, #1
 80038e2:	73fb      	strb	r3, [r7, #15]
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	4413      	add	r3, r2
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b0a      	cmp	r3, #10
 80038ee:	d1f6      	bne.n	80038de <send_uart3+0xe>
	HAL_UART_Transmit(&huart3, str, count,50);
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	2332      	movs	r3, #50	; 0x32
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	4803      	ldr	r0, [pc, #12]	; (8003908 <send_uart3+0x38>)
 80038fa:	f003 fb9d 	bl	8007038 <HAL_UART_Transmit>
	return true;
 80038fe:	2301      	movs	r3, #1
}
 8003900:	4618      	mov	r0, r3
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	200048ac 	.word	0x200048ac

0800390c <receive_uart3>:

bool receive_uart3(void){
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0

	uint8_t tam=0;
 8003912:	2300      	movs	r3, #0
 8003914:	71fb      	strb	r3, [r7, #7]
	uint8_t val=0;
 8003916:	2300      	movs	r3, #0
 8003918:	71bb      	strb	r3, [r7, #6]
//	int8_t aux temp=0;
	uart3_atual_index=(Rx_Uart3_index&15);
 800391a:	4b44      	ldr	r3, [pc, #272]	; (8003a2c <receive_uart3+0x120>)
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	b2da      	uxtb	r2, r3
 8003924:	4b42      	ldr	r3, [pc, #264]	; (8003a30 <receive_uart3+0x124>)
 8003926:	701a      	strb	r2, [r3, #0]
		if(uart3_atual_index!=uart3_ant_index){
 8003928:	4b41      	ldr	r3, [pc, #260]	; (8003a30 <receive_uart3+0x124>)
 800392a:	781a      	ldrb	r2, [r3, #0]
 800392c:	4b41      	ldr	r3, [pc, #260]	; (8003a34 <receive_uart3+0x128>)
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	429a      	cmp	r2, r3
 8003932:	d06f      	beq.n	8003a14 <receive_uart3+0x108>

			for(int x=0;x<=(uart3_atual_index-uart3_ant_index);x++){
 8003934:	2300      	movs	r3, #0
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	e015      	b.n	8003966 <receive_uart3+0x5a>
				Uart3_Buffer[x]=Rx_Uart3[x+uart3_ant_index];
 800393a:	4b3e      	ldr	r3, [pc, #248]	; (8003a34 <receive_uart3+0x128>)
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	461a      	mov	r2, r3
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	4413      	add	r3, r2
 8003944:	4a3c      	ldr	r2, [pc, #240]	; (8003a38 <receive_uart3+0x12c>)
 8003946:	5cd1      	ldrb	r1, [r2, r3]
 8003948:	4a3c      	ldr	r2, [pc, #240]	; (8003a3c <receive_uart3+0x130>)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	4413      	add	r3, r2
 800394e:	460a      	mov	r2, r1
 8003950:	701a      	strb	r2, [r3, #0]
				Uart3_Buffer[x+1]=0;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	3301      	adds	r3, #1
 8003956:	4a39      	ldr	r2, [pc, #228]	; (8003a3c <receive_uart3+0x130>)
 8003958:	2100      	movs	r1, #0
 800395a:	54d1      	strb	r1, [r2, r3]
				tam=x;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	71fb      	strb	r3, [r7, #7]
			for(int x=0;x<=(uart3_atual_index-uart3_ant_index);x++){
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	3301      	adds	r3, #1
 8003964:	603b      	str	r3, [r7, #0]
 8003966:	4b32      	ldr	r3, [pc, #200]	; (8003a30 <receive_uart3+0x124>)
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	461a      	mov	r2, r3
 800396c:	4b31      	ldr	r3, [pc, #196]	; (8003a34 <receive_uart3+0x128>)
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	429a      	cmp	r2, r3
 8003976:	dde0      	ble.n	800393a <receive_uart3+0x2e>
			}
			switch(Uart3_Buffer[0]){
 8003978:	4b30      	ldr	r3, [pc, #192]	; (8003a3c <receive_uart3+0x130>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b4c      	cmp	r3, #76	; 0x4c
 800397e:	d017      	beq.n	80039b0 <receive_uart3+0xa4>
 8003980:	2b54      	cmp	r3, #84	; 0x54
 8003982:	d000      	beq.n	8003986 <receive_uart3+0x7a>
					_mains._setpoint_lux=val;
					_mains._fl_changed=13;
				}
				break;
			default:
				break;
 8003984:	e047      	b.n	8003a16 <receive_uart3+0x10a>
				val=(((Uart3_Buffer[1]-'0')*10)+(Uart3_Buffer[2]-'0'));
 8003986:	4b2d      	ldr	r3, [pc, #180]	; (8003a3c <receive_uart3+0x130>)
 8003988:	785b      	ldrb	r3, [r3, #1]
 800398a:	461a      	mov	r2, r3
 800398c:	0092      	lsls	r2, r2, #2
 800398e:	4413      	add	r3, r2
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	b2da      	uxtb	r2, r3
 8003994:	4b29      	ldr	r3, [pc, #164]	; (8003a3c <receive_uart3+0x130>)
 8003996:	789b      	ldrb	r3, [r3, #2]
 8003998:	4413      	add	r3, r2
 800399a:	b2db      	uxtb	r3, r3
 800399c:	3b10      	subs	r3, #16
 800399e:	71bb      	strb	r3, [r7, #6]
				_mains._setpoint_temp=val;
 80039a0:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80039a4:	4b26      	ldr	r3, [pc, #152]	; (8003a40 <receive_uart3+0x134>)
 80039a6:	729a      	strb	r2, [r3, #10]
				_mains._fl_changed=11;
 80039a8:	4b25      	ldr	r3, [pc, #148]	; (8003a40 <receive_uart3+0x134>)
 80039aa:	220b      	movs	r2, #11
 80039ac:	701a      	strb	r2, [r3, #0]
				break;
 80039ae:	e032      	b.n	8003a16 <receive_uart3+0x10a>
				if(Uart3_Buffer[1]=='M'){
 80039b0:	4b22      	ldr	r3, [pc, #136]	; (8003a3c <receive_uart3+0x130>)
 80039b2:	785b      	ldrb	r3, [r3, #1]
 80039b4:	2b4d      	cmp	r3, #77	; 0x4d
 80039b6:	d10a      	bne.n	80039ce <receive_uart3+0xc2>
					val=(Uart3_Buffer[2]-'0');
 80039b8:	4b20      	ldr	r3, [pc, #128]	; (8003a3c <receive_uart3+0x130>)
 80039ba:	789b      	ldrb	r3, [r3, #2]
 80039bc:	3b30      	subs	r3, #48	; 0x30
 80039be:	71bb      	strb	r3, [r7, #6]
					_mains._fl_lux_mode=val;
 80039c0:	4a1f      	ldr	r2, [pc, #124]	; (8003a40 <receive_uart3+0x134>)
 80039c2:	79bb      	ldrb	r3, [r7, #6]
 80039c4:	7153      	strb	r3, [r2, #5]
					_mains._fl_changed=12;
 80039c6:	4b1e      	ldr	r3, [pc, #120]	; (8003a40 <receive_uart3+0x134>)
 80039c8:	220c      	movs	r2, #12
 80039ca:	701a      	strb	r2, [r3, #0]
				break;
 80039cc:	e023      	b.n	8003a16 <receive_uart3+0x10a>
					if(tam==6){val = 100;}
 80039ce:	79fb      	ldrb	r3, [r7, #7]
 80039d0:	2b06      	cmp	r3, #6
 80039d2:	d101      	bne.n	80039d8 <receive_uart3+0xcc>
 80039d4:	2364      	movs	r3, #100	; 0x64
 80039d6:	71bb      	strb	r3, [r7, #6]
					if(tam==5){val = (((Uart3_Buffer[1]-'0')*10)+(Uart3_Buffer[2]-'0'));
 80039d8:	79fb      	ldrb	r3, [r7, #7]
 80039da:	2b05      	cmp	r3, #5
 80039dc:	d10c      	bne.n	80039f8 <receive_uart3+0xec>
 80039de:	4b17      	ldr	r3, [pc, #92]	; (8003a3c <receive_uart3+0x130>)
 80039e0:	785b      	ldrb	r3, [r3, #1]
 80039e2:	461a      	mov	r2, r3
 80039e4:	0092      	lsls	r2, r2, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	4b13      	ldr	r3, [pc, #76]	; (8003a3c <receive_uart3+0x130>)
 80039ee:	789b      	ldrb	r3, [r3, #2]
 80039f0:	4413      	add	r3, r2
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	3b10      	subs	r3, #16
 80039f6:	71bb      	strb	r3, [r7, #6]
					if(tam==4){val = ((Uart3_Buffer[1]-'0'));
 80039f8:	79fb      	ldrb	r3, [r7, #7]
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d103      	bne.n	8003a06 <receive_uart3+0xfa>
 80039fe:	4b0f      	ldr	r3, [pc, #60]	; (8003a3c <receive_uart3+0x130>)
 8003a00:	785b      	ldrb	r3, [r3, #1]
 8003a02:	3b30      	subs	r3, #48	; 0x30
 8003a04:	71bb      	strb	r3, [r7, #6]
					_mains._setpoint_lux=val;
 8003a06:	4a0e      	ldr	r2, [pc, #56]	; (8003a40 <receive_uart3+0x134>)
 8003a08:	79bb      	ldrb	r3, [r7, #6]
 8003a0a:	7393      	strb	r3, [r2, #14]
					_mains._fl_changed=13;
 8003a0c:	4b0c      	ldr	r3, [pc, #48]	; (8003a40 <receive_uart3+0x134>)
 8003a0e:	220d      	movs	r2, #13
 8003a10:	701a      	strb	r2, [r3, #0]
				break;
 8003a12:	e000      	b.n	8003a16 <receive_uart3+0x10a>
			}
		}
 8003a14:	bf00      	nop
	uart3_ant_index=uart3_atual_index;
 8003a16:	4b06      	ldr	r3, [pc, #24]	; (8003a30 <receive_uart3+0x124>)
 8003a18:	781a      	ldrb	r2, [r3, #0]
 8003a1a:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <receive_uart3+0x128>)
 8003a1c:	701a      	strb	r2, [r3, #0]
	return true;
 8003a1e:	2301      	movs	r3, #1
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	200008b9 	.word	0x200008b9
 8003a30:	200008bc 	.word	0x200008bc
 8003a34:	200008bd 	.word	0x200008bd
 8003a38:	200049cc 	.word	0x200049cc
 8003a3c:	2000493c 	.word	0x2000493c
 8003a40:	20004710 	.word	0x20004710

08003a44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003a44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003a48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003a4a:	e003      	b.n	8003a54 <LoopCopyDataInit>

08003a4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003a4c:	4b0c      	ldr	r3, [pc, #48]	; (8003a80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003a4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003a50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003a52:	3104      	adds	r1, #4

08003a54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003a54:	480b      	ldr	r0, [pc, #44]	; (8003a84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003a56:	4b0c      	ldr	r3, [pc, #48]	; (8003a88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003a58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003a5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003a5c:	d3f6      	bcc.n	8003a4c <CopyDataInit>
  ldr  r2, =_sbss
 8003a5e:	4a0b      	ldr	r2, [pc, #44]	; (8003a8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003a60:	e002      	b.n	8003a68 <LoopFillZerobss>

08003a62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003a62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003a64:	f842 3b04 	str.w	r3, [r2], #4

08003a68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003a68:	4b09      	ldr	r3, [pc, #36]	; (8003a90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003a6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003a6c:	d3f9      	bcc.n	8003a62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a6e:	f7ff fab9 	bl	8002fe4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a72:	f008 f889 	bl	800bb88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a76:	f7ff f86f 	bl	8002b58 <main>
  bx  lr    
 8003a7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a7c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003a80:	0800e9f8 	.word	0x0800e9f8
  ldr  r0, =_sdata
 8003a84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003a88:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8003a8c:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8003a90:	20004a24 	.word	0x20004a24

08003a94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a94:	e7fe      	b.n	8003a94 <ADC_IRQHandler>

08003a96 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a9a:	2003      	movs	r0, #3
 8003a9c:	f000 f8f7 	bl	8003c8e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003aa0:	2000      	movs	r0, #0
 8003aa2:	f7ff f965 	bl	8002d70 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003aa6:	f7ff f93b 	bl	8002d20 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ab4:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <HAL_IncTick+0x20>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <HAL_IncTick+0x24>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4413      	add	r3, r2
 8003ac0:	4a04      	ldr	r2, [pc, #16]	; (8003ad4 <HAL_IncTick+0x24>)
 8003ac2:	6013      	str	r3, [r2, #0]
}
 8003ac4:	bf00      	nop
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	20000008 	.word	0x20000008
 8003ad4:	200049dc 	.word	0x200049dc

08003ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  return uwTick;
 8003adc:	4b03      	ldr	r3, [pc, #12]	; (8003aec <HAL_GetTick+0x14>)
 8003ade:	681b      	ldr	r3, [r3, #0]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	200049dc 	.word	0x200049dc

08003af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003af8:	f7ff ffee 	bl	8003ad8 <HAL_GetTick>
 8003afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b08:	d005      	beq.n	8003b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b0a:	4b09      	ldr	r3, [pc, #36]	; (8003b30 <HAL_Delay+0x40>)
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4413      	add	r3, r2
 8003b14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b16:	bf00      	nop
 8003b18:	f7ff ffde 	bl	8003ad8 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d8f7      	bhi.n	8003b18 <HAL_Delay+0x28>
  {
  }
}
 8003b28:	bf00      	nop
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	20000008 	.word	0x20000008

08003b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f003 0307 	and.w	r3, r3, #7
 8003b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b44:	4b0b      	ldr	r3, [pc, #44]	; (8003b74 <__NVIC_SetPriorityGrouping+0x40>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b50:	4013      	ands	r3, r2
 8003b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003b5c:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <__NVIC_SetPriorityGrouping+0x44>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b62:	4a04      	ldr	r2, [pc, #16]	; (8003b74 <__NVIC_SetPriorityGrouping+0x40>)
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	60d3      	str	r3, [r2, #12]
}
 8003b68:	bf00      	nop
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr
 8003b74:	e000ed00 	.word	0xe000ed00
 8003b78:	05fa0000 	.word	0x05fa0000

08003b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b80:	4b04      	ldr	r3, [pc, #16]	; (8003b94 <__NVIC_GetPriorityGrouping+0x18>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	0a1b      	lsrs	r3, r3, #8
 8003b86:	f003 0307 	and.w	r3, r3, #7
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	e000ed00 	.word	0xe000ed00

08003b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	db0b      	blt.n	8003bc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003baa:	79fb      	ldrb	r3, [r7, #7]
 8003bac:	f003 021f 	and.w	r2, r3, #31
 8003bb0:	4907      	ldr	r1, [pc, #28]	; (8003bd0 <__NVIC_EnableIRQ+0x38>)
 8003bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb6:	095b      	lsrs	r3, r3, #5
 8003bb8:	2001      	movs	r0, #1
 8003bba:	fa00 f202 	lsl.w	r2, r0, r2
 8003bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	e000e100 	.word	0xe000e100

08003bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	4603      	mov	r3, r0
 8003bdc:	6039      	str	r1, [r7, #0]
 8003bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	db0a      	blt.n	8003bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	490c      	ldr	r1, [pc, #48]	; (8003c20 <__NVIC_SetPriority+0x4c>)
 8003bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf2:	0112      	lsls	r2, r2, #4
 8003bf4:	b2d2      	uxtb	r2, r2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bfc:	e00a      	b.n	8003c14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	4908      	ldr	r1, [pc, #32]	; (8003c24 <__NVIC_SetPriority+0x50>)
 8003c04:	79fb      	ldrb	r3, [r7, #7]
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	3b04      	subs	r3, #4
 8003c0c:	0112      	lsls	r2, r2, #4
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	440b      	add	r3, r1
 8003c12:	761a      	strb	r2, [r3, #24]
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	e000e100 	.word	0xe000e100
 8003c24:	e000ed00 	.word	0xe000ed00

08003c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b089      	sub	sp, #36	; 0x24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	f1c3 0307 	rsb	r3, r3, #7
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	bf28      	it	cs
 8003c46:	2304      	movcs	r3, #4
 8003c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	2b06      	cmp	r3, #6
 8003c50:	d902      	bls.n	8003c58 <NVIC_EncodePriority+0x30>
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	3b03      	subs	r3, #3
 8003c56:	e000      	b.n	8003c5a <NVIC_EncodePriority+0x32>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	fa02 f303 	lsl.w	r3, r2, r3
 8003c66:	43da      	mvns	r2, r3
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	401a      	ands	r2, r3
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c70:	f04f 31ff 	mov.w	r1, #4294967295
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	fa01 f303 	lsl.w	r3, r1, r3
 8003c7a:	43d9      	mvns	r1, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c80:	4313      	orrs	r3, r2
         );
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3724      	adds	r7, #36	; 0x24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b082      	sub	sp, #8
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7ff ff4c 	bl	8003b34 <__NVIC_SetPriorityGrouping>
}
 8003c9c:	bf00      	nop
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	4603      	mov	r3, r0
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
 8003cb0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cb6:	f7ff ff61 	bl	8003b7c <__NVIC_GetPriorityGrouping>
 8003cba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	68b9      	ldr	r1, [r7, #8]
 8003cc0:	6978      	ldr	r0, [r7, #20]
 8003cc2:	f7ff ffb1 	bl	8003c28 <NVIC_EncodePriority>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ccc:	4611      	mov	r1, r2
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff ff80 	bl	8003bd4 <__NVIC_SetPriority>
}
 8003cd4:	bf00      	nop
 8003cd6:	3718      	adds	r7, #24
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff ff54 	bl	8003b98 <__NVIC_EnableIRQ>
}
 8003cf0:	bf00      	nop
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d004      	beq.n	8003d16 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2280      	movs	r2, #128	; 0x80
 8003d10:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e00c      	b.n	8003d30 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2205      	movs	r2, #5
 8003d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0201 	bic.w	r2, r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b089      	sub	sp, #36	; 0x24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003d46:	2300      	movs	r3, #0
 8003d48:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003d52:	2300      	movs	r3, #0
 8003d54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d56:	2300      	movs	r3, #0
 8003d58:	61fb      	str	r3, [r7, #28]
 8003d5a:	e175      	b.n	8004048 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	f040 8164 	bne.w	8004042 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d00b      	beq.n	8003d9a <HAL_GPIO_Init+0x5e>
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d007      	beq.n	8003d9a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d8e:	2b11      	cmp	r3, #17
 8003d90:	d003      	beq.n	8003d9a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	2b12      	cmp	r3, #18
 8003d98:	d130      	bne.n	8003dfc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	2203      	movs	r2, #3
 8003da6:	fa02 f303 	lsl.w	r3, r2, r3
 8003daa:	43db      	mvns	r3, r3
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	4013      	ands	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	68da      	ldr	r2, [r3, #12]
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd8:	43db      	mvns	r3, r3
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	091b      	lsrs	r3, r3, #4
 8003de6:	f003 0201 	and.w	r2, r3, #1
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	2203      	movs	r2, #3
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	4013      	ands	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d003      	beq.n	8003e3c <HAL_GPIO_Init+0x100>
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2b12      	cmp	r3, #18
 8003e3a:	d123      	bne.n	8003e84 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	08da      	lsrs	r2, r3, #3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3208      	adds	r2, #8
 8003e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	220f      	movs	r2, #15
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	08da      	lsrs	r2, r3, #3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	3208      	adds	r2, #8
 8003e7e:	69b9      	ldr	r1, [r7, #24]
 8003e80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	2203      	movs	r2, #3
 8003e90:	fa02 f303 	lsl.w	r3, r2, r3
 8003e94:	43db      	mvns	r3, r3
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f003 0203 	and.w	r2, r3, #3
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 80be 	beq.w	8004042 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ec6:	4b65      	ldr	r3, [pc, #404]	; (800405c <HAL_GPIO_Init+0x320>)
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eca:	4a64      	ldr	r2, [pc, #400]	; (800405c <HAL_GPIO_Init+0x320>)
 8003ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ed2:	4b62      	ldr	r3, [pc, #392]	; (800405c <HAL_GPIO_Init+0x320>)
 8003ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003ede:	4a60      	ldr	r2, [pc, #384]	; (8004060 <HAL_GPIO_Init+0x324>)
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	089b      	lsrs	r3, r3, #2
 8003ee4:	3302      	adds	r3, #2
 8003ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	f003 0303 	and.w	r3, r3, #3
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	220f      	movs	r2, #15
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	43db      	mvns	r3, r3
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	4013      	ands	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a57      	ldr	r2, [pc, #348]	; (8004064 <HAL_GPIO_Init+0x328>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d037      	beq.n	8003f7a <HAL_GPIO_Init+0x23e>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a56      	ldr	r2, [pc, #344]	; (8004068 <HAL_GPIO_Init+0x32c>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d031      	beq.n	8003f76 <HAL_GPIO_Init+0x23a>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a55      	ldr	r2, [pc, #340]	; (800406c <HAL_GPIO_Init+0x330>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d02b      	beq.n	8003f72 <HAL_GPIO_Init+0x236>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a54      	ldr	r2, [pc, #336]	; (8004070 <HAL_GPIO_Init+0x334>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d025      	beq.n	8003f6e <HAL_GPIO_Init+0x232>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a53      	ldr	r2, [pc, #332]	; (8004074 <HAL_GPIO_Init+0x338>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d01f      	beq.n	8003f6a <HAL_GPIO_Init+0x22e>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a52      	ldr	r2, [pc, #328]	; (8004078 <HAL_GPIO_Init+0x33c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d019      	beq.n	8003f66 <HAL_GPIO_Init+0x22a>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a51      	ldr	r2, [pc, #324]	; (800407c <HAL_GPIO_Init+0x340>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d013      	beq.n	8003f62 <HAL_GPIO_Init+0x226>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a50      	ldr	r2, [pc, #320]	; (8004080 <HAL_GPIO_Init+0x344>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d00d      	beq.n	8003f5e <HAL_GPIO_Init+0x222>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a4f      	ldr	r2, [pc, #316]	; (8004084 <HAL_GPIO_Init+0x348>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d007      	beq.n	8003f5a <HAL_GPIO_Init+0x21e>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a4e      	ldr	r2, [pc, #312]	; (8004088 <HAL_GPIO_Init+0x34c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d101      	bne.n	8003f56 <HAL_GPIO_Init+0x21a>
 8003f52:	2309      	movs	r3, #9
 8003f54:	e012      	b.n	8003f7c <HAL_GPIO_Init+0x240>
 8003f56:	230a      	movs	r3, #10
 8003f58:	e010      	b.n	8003f7c <HAL_GPIO_Init+0x240>
 8003f5a:	2308      	movs	r3, #8
 8003f5c:	e00e      	b.n	8003f7c <HAL_GPIO_Init+0x240>
 8003f5e:	2307      	movs	r3, #7
 8003f60:	e00c      	b.n	8003f7c <HAL_GPIO_Init+0x240>
 8003f62:	2306      	movs	r3, #6
 8003f64:	e00a      	b.n	8003f7c <HAL_GPIO_Init+0x240>
 8003f66:	2305      	movs	r3, #5
 8003f68:	e008      	b.n	8003f7c <HAL_GPIO_Init+0x240>
 8003f6a:	2304      	movs	r3, #4
 8003f6c:	e006      	b.n	8003f7c <HAL_GPIO_Init+0x240>
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e004      	b.n	8003f7c <HAL_GPIO_Init+0x240>
 8003f72:	2302      	movs	r3, #2
 8003f74:	e002      	b.n	8003f7c <HAL_GPIO_Init+0x240>
 8003f76:	2301      	movs	r3, #1
 8003f78:	e000      	b.n	8003f7c <HAL_GPIO_Init+0x240>
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	69fa      	ldr	r2, [r7, #28]
 8003f7e:	f002 0203 	and.w	r2, r2, #3
 8003f82:	0092      	lsls	r2, r2, #2
 8003f84:	4093      	lsls	r3, r2
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003f8c:	4934      	ldr	r1, [pc, #208]	; (8004060 <HAL_GPIO_Init+0x324>)
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	089b      	lsrs	r3, r3, #2
 8003f92:	3302      	adds	r3, #2
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f9a:	4b3c      	ldr	r3, [pc, #240]	; (800408c <HAL_GPIO_Init+0x350>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	43db      	mvns	r3, r3
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fbe:	4a33      	ldr	r2, [pc, #204]	; (800408c <HAL_GPIO_Init+0x350>)
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003fc4:	4b31      	ldr	r3, [pc, #196]	; (800408c <HAL_GPIO_Init+0x350>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fe8:	4a28      	ldr	r2, [pc, #160]	; (800408c <HAL_GPIO_Init+0x350>)
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fee:	4b27      	ldr	r3, [pc, #156]	; (800408c <HAL_GPIO_Init+0x350>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	43db      	mvns	r3, r3
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	4313      	orrs	r3, r2
 8004010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004012:	4a1e      	ldr	r2, [pc, #120]	; (800408c <HAL_GPIO_Init+0x350>)
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004018:	4b1c      	ldr	r3, [pc, #112]	; (800408c <HAL_GPIO_Init+0x350>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	43db      	mvns	r3, r3
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	4013      	ands	r3, r2
 8004026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d003      	beq.n	800403c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	4313      	orrs	r3, r2
 800403a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800403c:	4a13      	ldr	r2, [pc, #76]	; (800408c <HAL_GPIO_Init+0x350>)
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	3301      	adds	r3, #1
 8004046:	61fb      	str	r3, [r7, #28]
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	2b0f      	cmp	r3, #15
 800404c:	f67f ae86 	bls.w	8003d5c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004050:	bf00      	nop
 8004052:	3724      	adds	r7, #36	; 0x24
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	40023800 	.word	0x40023800
 8004060:	40013800 	.word	0x40013800
 8004064:	40020000 	.word	0x40020000
 8004068:	40020400 	.word	0x40020400
 800406c:	40020800 	.word	0x40020800
 8004070:	40020c00 	.word	0x40020c00
 8004074:	40021000 	.word	0x40021000
 8004078:	40021400 	.word	0x40021400
 800407c:	40021800 	.word	0x40021800
 8004080:	40021c00 	.word	0x40021c00
 8004084:	40022000 	.word	0x40022000
 8004088:	40022400 	.word	0x40022400
 800408c:	40013c00 	.word	0x40013c00

08004090 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	460b      	mov	r3, r1
 800409a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	691a      	ldr	r2, [r3, #16]
 80040a0:	887b      	ldrh	r3, [r7, #2]
 80040a2:	4013      	ands	r3, r2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d002      	beq.n	80040ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040a8:	2301      	movs	r3, #1
 80040aa:	73fb      	strb	r3, [r7, #15]
 80040ac:	e001      	b.n	80040b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040ae:	2300      	movs	r3, #0
 80040b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	460b      	mov	r3, r1
 80040ca:	807b      	strh	r3, [r7, #2]
 80040cc:	4613      	mov	r3, r2
 80040ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040d0:	787b      	ldrb	r3, [r7, #1]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040d6:	887a      	ldrh	r2, [r7, #2]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80040dc:	e003      	b.n	80040e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80040de:	887b      	ldrh	r3, [r7, #2]
 80040e0:	041a      	lsls	r2, r3, #16
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	619a      	str	r2, [r3, #24]
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
 80040fa:	460b      	mov	r3, r1
 80040fc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	695a      	ldr	r2, [r3, #20]
 8004102:	887b      	ldrh	r3, [r7, #2]
 8004104:	4013      	ands	r3, r2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d004      	beq.n	8004114 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800410a:	887b      	ldrh	r3, [r7, #2]
 800410c:	041a      	lsls	r2, r3, #16
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8004112:	e002      	b.n	800411a <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004114:	887a      	ldrh	r2, [r7, #2]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	619a      	str	r2, [r3, #24]
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
	...

08004128 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	4603      	mov	r3, r0
 8004130:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004132:	4b08      	ldr	r3, [pc, #32]	; (8004154 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004134:	695a      	ldr	r2, [r3, #20]
 8004136:	88fb      	ldrh	r3, [r7, #6]
 8004138:	4013      	ands	r3, r2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d006      	beq.n	800414c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800413e:	4a05      	ldr	r2, [pc, #20]	; (8004154 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004140:	88fb      	ldrh	r3, [r7, #6]
 8004142:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004144:	88fb      	ldrh	r3, [r7, #6]
 8004146:	4618      	mov	r0, r3
 8004148:	f7fe fa64 	bl	8002614 <HAL_GPIO_EXTI_Callback>
  }
}
 800414c:	bf00      	nop
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	40013c00 	.word	0x40013c00

08004158 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e07f      	b.n	800426a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d106      	bne.n	8004184 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7fe fb90 	bl	80028a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2224      	movs	r2, #36	; 0x24
 8004188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 0201 	bic.w	r2, r2, #1
 800419a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d107      	bne.n	80041d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041ce:	609a      	str	r2, [r3, #8]
 80041d0:	e006      	b.n	80041e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	689a      	ldr	r2, [r3, #8]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80041de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d104      	bne.n	80041f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6859      	ldr	r1, [r3, #4]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	4b1d      	ldr	r3, [pc, #116]	; (8004274 <HAL_I2C_Init+0x11c>)
 80041fe:	430b      	orrs	r3, r1
 8004200:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68da      	ldr	r2, [r3, #12]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004210:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	691a      	ldr	r2, [r3, #16]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	ea42 0103 	orr.w	r1, r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	021a      	lsls	r2, r3, #8
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	69d9      	ldr	r1, [r3, #28]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a1a      	ldr	r2, [r3, #32]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0201 	orr.w	r2, r2, #1
 800424a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2220      	movs	r2, #32
 8004256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	02008000 	.word	0x02008000

08004278 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b088      	sub	sp, #32
 800427c:	af02      	add	r7, sp, #8
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	607a      	str	r2, [r7, #4]
 8004282:	461a      	mov	r2, r3
 8004284:	460b      	mov	r3, r1
 8004286:	817b      	strh	r3, [r7, #10]
 8004288:	4613      	mov	r3, r2
 800428a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b20      	cmp	r3, #32
 8004296:	f040 80da 	bne.w	800444e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <HAL_I2C_Master_Transmit+0x30>
 80042a4:	2302      	movs	r3, #2
 80042a6:	e0d3      	b.n	8004450 <HAL_I2C_Master_Transmit+0x1d8>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042b0:	f7ff fc12 	bl	8003ad8 <HAL_GetTick>
 80042b4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	2319      	movs	r3, #25
 80042bc:	2201      	movs	r2, #1
 80042be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 f9e6 	bl	8004694 <I2C_WaitOnFlagUntilTimeout>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e0be      	b.n	8004450 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2221      	movs	r2, #33	; 0x21
 80042d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2210      	movs	r2, #16
 80042de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	893a      	ldrh	r2, [r7, #8]
 80042f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fe:	b29b      	uxth	r3, r3
 8004300:	2bff      	cmp	r3, #255	; 0xff
 8004302:	d90e      	bls.n	8004322 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	22ff      	movs	r2, #255	; 0xff
 8004308:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430e:	b2da      	uxtb	r2, r3
 8004310:	8979      	ldrh	r1, [r7, #10]
 8004312:	4b51      	ldr	r3, [pc, #324]	; (8004458 <HAL_I2C_Master_Transmit+0x1e0>)
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 fb48 	bl	80049b0 <I2C_TransferConfig>
 8004320:	e06c      	b.n	80043fc <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004326:	b29a      	uxth	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004330:	b2da      	uxtb	r2, r3
 8004332:	8979      	ldrh	r1, [r7, #10]
 8004334:	4b48      	ldr	r3, [pc, #288]	; (8004458 <HAL_I2C_Master_Transmit+0x1e0>)
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 fb37 	bl	80049b0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004342:	e05b      	b.n	80043fc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	6a39      	ldr	r1, [r7, #32]
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 f9e3 	bl	8004714 <I2C_WaitOnTXISFlagUntilTimeout>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e07b      	b.n	8004450 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	781a      	ldrb	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004372:	b29b      	uxth	r3, r3
 8004374:	3b01      	subs	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004380:	3b01      	subs	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438c:	b29b      	uxth	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d034      	beq.n	80043fc <HAL_I2C_Master_Transmit+0x184>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004396:	2b00      	cmp	r3, #0
 8004398:	d130      	bne.n	80043fc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	2200      	movs	r2, #0
 80043a2:	2180      	movs	r1, #128	; 0x80
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 f975 	bl	8004694 <I2C_WaitOnFlagUntilTimeout>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d001      	beq.n	80043b4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e04d      	b.n	8004450 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	2bff      	cmp	r3, #255	; 0xff
 80043bc:	d90e      	bls.n	80043dc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	22ff      	movs	r2, #255	; 0xff
 80043c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	8979      	ldrh	r1, [r7, #10]
 80043cc:	2300      	movs	r3, #0
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 faeb 	bl	80049b0 <I2C_TransferConfig>
 80043da:	e00f      	b.n	80043fc <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	8979      	ldrh	r1, [r7, #10]
 80043ee:	2300      	movs	r3, #0
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 fada 	bl	80049b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004400:	b29b      	uxth	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d19e      	bne.n	8004344 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	6a39      	ldr	r1, [r7, #32]
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 f9c2 	bl	8004794 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e01a      	b.n	8004450 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2220      	movs	r2, #32
 8004420:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6859      	ldr	r1, [r3, #4]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	4b0b      	ldr	r3, [pc, #44]	; (800445c <HAL_I2C_Master_Transmit+0x1e4>)
 800442e:	400b      	ands	r3, r1
 8004430:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2220      	movs	r2, #32
 8004436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800444a:	2300      	movs	r3, #0
 800444c:	e000      	b.n	8004450 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800444e:	2302      	movs	r3, #2
  }
}
 8004450:	4618      	mov	r0, r3
 8004452:	3718      	adds	r7, #24
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	80002000 	.word	0x80002000
 800445c:	fe00e800 	.word	0xfe00e800

08004460 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b088      	sub	sp, #32
 8004464:	af02      	add	r7, sp, #8
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	607a      	str	r2, [r7, #4]
 800446a:	461a      	mov	r2, r3
 800446c:	460b      	mov	r3, r1
 800446e:	817b      	strh	r3, [r7, #10]
 8004470:	4613      	mov	r3, r2
 8004472:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b20      	cmp	r3, #32
 800447e:	f040 80db 	bne.w	8004638 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004488:	2b01      	cmp	r3, #1
 800448a:	d101      	bne.n	8004490 <HAL_I2C_Master_Receive+0x30>
 800448c:	2302      	movs	r3, #2
 800448e:	e0d4      	b.n	800463a <HAL_I2C_Master_Receive+0x1da>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004498:	f7ff fb1e 	bl	8003ad8 <HAL_GetTick>
 800449c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	9300      	str	r3, [sp, #0]
 80044a2:	2319      	movs	r3, #25
 80044a4:	2201      	movs	r2, #1
 80044a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f000 f8f2 	bl	8004694 <I2C_WaitOnFlagUntilTimeout>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e0bf      	b.n	800463a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2222      	movs	r2, #34	; 0x22
 80044be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2210      	movs	r2, #16
 80044c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	893a      	ldrh	r2, [r7, #8]
 80044da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	2bff      	cmp	r3, #255	; 0xff
 80044ea:	d90e      	bls.n	800450a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	22ff      	movs	r2, #255	; 0xff
 80044f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	8979      	ldrh	r1, [r7, #10]
 80044fa:	4b52      	ldr	r3, [pc, #328]	; (8004644 <HAL_I2C_Master_Receive+0x1e4>)
 80044fc:	9300      	str	r3, [sp, #0]
 80044fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 fa54 	bl	80049b0 <I2C_TransferConfig>
 8004508:	e06d      	b.n	80045e6 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004518:	b2da      	uxtb	r2, r3
 800451a:	8979      	ldrh	r1, [r7, #10]
 800451c:	4b49      	ldr	r3, [pc, #292]	; (8004644 <HAL_I2C_Master_Receive+0x1e4>)
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f000 fa43 	bl	80049b0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800452a:	e05c      	b.n	80045e6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	6a39      	ldr	r1, [r7, #32]
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 f96b 	bl	800480c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e07c      	b.n	800463a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800455c:	3b01      	subs	r3, #1
 800455e:	b29a      	uxth	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004568:	b29b      	uxth	r3, r3
 800456a:	3b01      	subs	r3, #1
 800456c:	b29a      	uxth	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004576:	b29b      	uxth	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	d034      	beq.n	80045e6 <HAL_I2C_Master_Receive+0x186>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004580:	2b00      	cmp	r3, #0
 8004582:	d130      	bne.n	80045e6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	2200      	movs	r2, #0
 800458c:	2180      	movs	r1, #128	; 0x80
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 f880 	bl	8004694 <I2C_WaitOnFlagUntilTimeout>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e04d      	b.n	800463a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	2bff      	cmp	r3, #255	; 0xff
 80045a6:	d90e      	bls.n	80045c6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	22ff      	movs	r2, #255	; 0xff
 80045ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b2:	b2da      	uxtb	r2, r3
 80045b4:	8979      	ldrh	r1, [r7, #10]
 80045b6:	2300      	movs	r3, #0
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f000 f9f6 	bl	80049b0 <I2C_TransferConfig>
 80045c4:	e00f      	b.n	80045e6 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	8979      	ldrh	r1, [r7, #10]
 80045d8:	2300      	movs	r3, #0
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 f9e5 	bl	80049b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d19d      	bne.n	800452c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	6a39      	ldr	r1, [r7, #32]
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 f8cd 	bl	8004794 <I2C_WaitOnSTOPFlagUntilTimeout>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e01a      	b.n	800463a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2220      	movs	r2, #32
 800460a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6859      	ldr	r1, [r3, #4]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	4b0c      	ldr	r3, [pc, #48]	; (8004648 <HAL_I2C_Master_Receive+0x1e8>)
 8004618:	400b      	ands	r3, r1
 800461a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2220      	movs	r2, #32
 8004620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004634:	2300      	movs	r3, #0
 8004636:	e000      	b.n	800463a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004638:	2302      	movs	r3, #2
  }
}
 800463a:	4618      	mov	r0, r3
 800463c:	3718      	adds	r7, #24
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	80002400 	.word	0x80002400
 8004648:	fe00e800 	.word	0xfe00e800

0800464c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b02      	cmp	r3, #2
 8004660:	d103      	bne.n	800466a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2200      	movs	r2, #0
 8004668:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b01      	cmp	r3, #1
 8004676:	d007      	beq.n	8004688 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	699a      	ldr	r2, [r3, #24]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0201 	orr.w	r2, r2, #1
 8004686:	619a      	str	r2, [r3, #24]
  }
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	603b      	str	r3, [r7, #0]
 80046a0:	4613      	mov	r3, r2
 80046a2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046a4:	e022      	b.n	80046ec <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ac:	d01e      	beq.n	80046ec <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ae:	f7ff fa13 	bl	8003ad8 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d302      	bcc.n	80046c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d113      	bne.n	80046ec <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c8:	f043 0220 	orr.w	r2, r3, #32
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2220      	movs	r2, #32
 80046d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e00f      	b.n	800470c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	699a      	ldr	r2, [r3, #24]
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	4013      	ands	r3, r2
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	bf0c      	ite	eq
 80046fc:	2301      	moveq	r3, #1
 80046fe:	2300      	movne	r3, #0
 8004700:	b2db      	uxtb	r3, r3
 8004702:	461a      	mov	r2, r3
 8004704:	79fb      	ldrb	r3, [r7, #7]
 8004706:	429a      	cmp	r2, r3
 8004708:	d0cd      	beq.n	80046a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004720:	e02c      	b.n	800477c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	68b9      	ldr	r1, [r7, #8]
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f000 f8dc 	bl	80048e4 <I2C_IsAcknowledgeFailed>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e02a      	b.n	800478c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800473c:	d01e      	beq.n	800477c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800473e:	f7ff f9cb 	bl	8003ad8 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	429a      	cmp	r2, r3
 800474c:	d302      	bcc.n	8004754 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d113      	bne.n	800477c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004758:	f043 0220 	orr.w	r2, r3, #32
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2220      	movs	r2, #32
 8004764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e007      	b.n	800478c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b02      	cmp	r3, #2
 8004788:	d1cb      	bne.n	8004722 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047a0:	e028      	b.n	80047f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	68b9      	ldr	r1, [r7, #8]
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 f89c 	bl	80048e4 <I2C_IsAcknowledgeFailed>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e026      	b.n	8004804 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b6:	f7ff f98f 	bl	8003ad8 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d302      	bcc.n	80047cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d113      	bne.n	80047f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d0:	f043 0220 	orr.w	r2, r3, #32
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2220      	movs	r2, #32
 80047dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e007      	b.n	8004804 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b20      	cmp	r3, #32
 8004800:	d1cf      	bne.n	80047a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004818:	e055      	b.n	80048c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	68b9      	ldr	r1, [r7, #8]
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 f860 	bl	80048e4 <I2C_IsAcknowledgeFailed>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e053      	b.n	80048d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	f003 0320 	and.w	r3, r3, #32
 8004838:	2b20      	cmp	r3, #32
 800483a:	d129      	bne.n	8004890 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	f003 0304 	and.w	r3, r3, #4
 8004846:	2b04      	cmp	r3, #4
 8004848:	d105      	bne.n	8004856 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004852:	2300      	movs	r3, #0
 8004854:	e03f      	b.n	80048d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2220      	movs	r2, #32
 800485c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6859      	ldr	r1, [r3, #4]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	4b1d      	ldr	r3, [pc, #116]	; (80048e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800486a:	400b      	ands	r3, r1
 800486c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2220      	movs	r2, #32
 8004878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e022      	b.n	80048d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004890:	f7ff f922 	bl	8003ad8 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	429a      	cmp	r2, r3
 800489e:	d302      	bcc.n	80048a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10f      	bne.n	80048c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048aa:	f043 0220 	orr.w	r2, r3, #32
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2220      	movs	r2, #32
 80048b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e007      	b.n	80048d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	f003 0304 	and.w	r3, r3, #4
 80048d0:	2b04      	cmp	r3, #4
 80048d2:	d1a2      	bne.n	800481a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	fe00e800 	.word	0xfe00e800

080048e4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	f003 0310 	and.w	r3, r3, #16
 80048fa:	2b10      	cmp	r3, #16
 80048fc:	d151      	bne.n	80049a2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048fe:	e022      	b.n	8004946 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004906:	d01e      	beq.n	8004946 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004908:	f7ff f8e6 	bl	8003ad8 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	429a      	cmp	r2, r3
 8004916:	d302      	bcc.n	800491e <I2C_IsAcknowledgeFailed+0x3a>
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d113      	bne.n	8004946 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004922:	f043 0220 	orr.w	r2, r3, #32
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2220      	movs	r2, #32
 800492e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e02e      	b.n	80049a4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	f003 0320 	and.w	r3, r3, #32
 8004950:	2b20      	cmp	r3, #32
 8004952:	d1d5      	bne.n	8004900 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2210      	movs	r2, #16
 800495a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2220      	movs	r2, #32
 8004962:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f7ff fe71 	bl	800464c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	6859      	ldr	r1, [r3, #4]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	4b0d      	ldr	r3, [pc, #52]	; (80049ac <I2C_IsAcknowledgeFailed+0xc8>)
 8004976:	400b      	ands	r3, r1
 8004978:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800497e:	f043 0204 	orr.w	r2, r3, #4
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2220      	movs	r2, #32
 800498a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e000      	b.n	80049a4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	fe00e800 	.word	0xfe00e800

080049b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	607b      	str	r3, [r7, #4]
 80049ba:	460b      	mov	r3, r1
 80049bc:	817b      	strh	r3, [r7, #10]
 80049be:	4613      	mov	r3, r2
 80049c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	0d5b      	lsrs	r3, r3, #21
 80049cc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80049d0:	4b0d      	ldr	r3, [pc, #52]	; (8004a08 <I2C_TransferConfig+0x58>)
 80049d2:	430b      	orrs	r3, r1
 80049d4:	43db      	mvns	r3, r3
 80049d6:	ea02 0103 	and.w	r1, r2, r3
 80049da:	897b      	ldrh	r3, [r7, #10]
 80049dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80049e0:	7a7b      	ldrb	r3, [r7, #9]
 80049e2:	041b      	lsls	r3, r3, #16
 80049e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80049e8:	431a      	orrs	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	431a      	orrs	r2, r3
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	431a      	orrs	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80049fa:	bf00      	nop
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	03ff63ff 	.word	0x03ff63ff

08004a0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b20      	cmp	r3, #32
 8004a20:	d138      	bne.n	8004a94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d101      	bne.n	8004a30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	e032      	b.n	8004a96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2224      	movs	r2, #36	; 0x24
 8004a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0201 	bic.w	r2, r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6819      	ldr	r1, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0201 	orr.w	r2, r2, #1
 8004a7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2220      	movs	r2, #32
 8004a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a90:	2300      	movs	r3, #0
 8004a92:	e000      	b.n	8004a96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a94:	2302      	movs	r3, #2
  }
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b085      	sub	sp, #20
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
 8004aaa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b20      	cmp	r3, #32
 8004ab6:	d139      	bne.n	8004b2c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d101      	bne.n	8004ac6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	e033      	b.n	8004b2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2224      	movs	r2, #36	; 0x24
 8004ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 0201 	bic.w	r2, r2, #1
 8004ae4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004af4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	021b      	lsls	r3, r3, #8
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 0201 	orr.w	r2, r2, #1
 8004b16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	e000      	b.n	8004b2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b2c:	2302      	movs	r3, #2
  }
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
	...

08004b3c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b40:	4b05      	ldr	r3, [pc, #20]	; (8004b58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a04      	ldr	r2, [pc, #16]	; (8004b58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b4a:	6013      	str	r3, [r2, #0]
}
 8004b4c:	bf00      	nop
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	40007000 	.word	0x40007000

08004b5c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004b62:	2300      	movs	r3, #0
 8004b64:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004b66:	4b23      	ldr	r3, [pc, #140]	; (8004bf4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	4a22      	ldr	r2, [pc, #136]	; (8004bf4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b70:	6413      	str	r3, [r2, #64]	; 0x40
 8004b72:	4b20      	ldr	r3, [pc, #128]	; (8004bf4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b7a:	603b      	str	r3, [r7, #0]
 8004b7c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004b7e:	4b1e      	ldr	r3, [pc, #120]	; (8004bf8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a1d      	ldr	r2, [pc, #116]	; (8004bf8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b88:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b8a:	f7fe ffa5 	bl	8003ad8 <HAL_GetTick>
 8004b8e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004b90:	e009      	b.n	8004ba6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004b92:	f7fe ffa1 	bl	8003ad8 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ba0:	d901      	bls.n	8004ba6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e022      	b.n	8004bec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ba6:	4b14      	ldr	r3, [pc, #80]	; (8004bf8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb2:	d1ee      	bne.n	8004b92 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004bb4:	4b10      	ldr	r3, [pc, #64]	; (8004bf8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a0f      	ldr	r2, [pc, #60]	; (8004bf8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bbe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bc0:	f7fe ff8a 	bl	8003ad8 <HAL_GetTick>
 8004bc4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004bc6:	e009      	b.n	8004bdc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004bc8:	f7fe ff86 	bl	8003ad8 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bd6:	d901      	bls.n	8004bdc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e007      	b.n	8004bec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004bdc:	4b06      	ldr	r3, [pc, #24]	; (8004bf8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004be8:	d1ee      	bne.n	8004bc8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	40023800 	.word	0x40023800
 8004bf8:	40007000 	.word	0x40007000

08004bfc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004c04:	2300      	movs	r3, #0
 8004c06:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e29b      	b.n	800514a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f000 8087 	beq.w	8004d2e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c20:	4b96      	ldr	r3, [pc, #600]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f003 030c 	and.w	r3, r3, #12
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	d00c      	beq.n	8004c46 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c2c:	4b93      	ldr	r3, [pc, #588]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f003 030c 	and.w	r3, r3, #12
 8004c34:	2b08      	cmp	r3, #8
 8004c36:	d112      	bne.n	8004c5e <HAL_RCC_OscConfig+0x62>
 8004c38:	4b90      	ldr	r3, [pc, #576]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c44:	d10b      	bne.n	8004c5e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c46:	4b8d      	ldr	r3, [pc, #564]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d06c      	beq.n	8004d2c <HAL_RCC_OscConfig+0x130>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d168      	bne.n	8004d2c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e275      	b.n	800514a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c66:	d106      	bne.n	8004c76 <HAL_RCC_OscConfig+0x7a>
 8004c68:	4b84      	ldr	r3, [pc, #528]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a83      	ldr	r2, [pc, #524]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c72:	6013      	str	r3, [r2, #0]
 8004c74:	e02e      	b.n	8004cd4 <HAL_RCC_OscConfig+0xd8>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10c      	bne.n	8004c98 <HAL_RCC_OscConfig+0x9c>
 8004c7e:	4b7f      	ldr	r3, [pc, #508]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a7e      	ldr	r2, [pc, #504]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004c84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c88:	6013      	str	r3, [r2, #0]
 8004c8a:	4b7c      	ldr	r3, [pc, #496]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a7b      	ldr	r2, [pc, #492]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004c90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c94:	6013      	str	r3, [r2, #0]
 8004c96:	e01d      	b.n	8004cd4 <HAL_RCC_OscConfig+0xd8>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ca0:	d10c      	bne.n	8004cbc <HAL_RCC_OscConfig+0xc0>
 8004ca2:	4b76      	ldr	r3, [pc, #472]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a75      	ldr	r2, [pc, #468]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004ca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cac:	6013      	str	r3, [r2, #0]
 8004cae:	4b73      	ldr	r3, [pc, #460]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a72      	ldr	r2, [pc, #456]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cb8:	6013      	str	r3, [r2, #0]
 8004cba:	e00b      	b.n	8004cd4 <HAL_RCC_OscConfig+0xd8>
 8004cbc:	4b6f      	ldr	r3, [pc, #444]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a6e      	ldr	r2, [pc, #440]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cc6:	6013      	str	r3, [r2, #0]
 8004cc8:	4b6c      	ldr	r3, [pc, #432]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a6b      	ldr	r2, [pc, #428]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004cce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d013      	beq.n	8004d04 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cdc:	f7fe fefc 	bl	8003ad8 <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ce4:	f7fe fef8 	bl	8003ad8 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b64      	cmp	r3, #100	; 0x64
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e229      	b.n	800514a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cf6:	4b61      	ldr	r3, [pc, #388]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0f0      	beq.n	8004ce4 <HAL_RCC_OscConfig+0xe8>
 8004d02:	e014      	b.n	8004d2e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d04:	f7fe fee8 	bl	8003ad8 <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d0c:	f7fe fee4 	bl	8003ad8 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b64      	cmp	r3, #100	; 0x64
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e215      	b.n	800514a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d1e:	4b57      	ldr	r3, [pc, #348]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1f0      	bne.n	8004d0c <HAL_RCC_OscConfig+0x110>
 8004d2a:	e000      	b.n	8004d2e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d069      	beq.n	8004e0e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d3a:	4b50      	ldr	r3, [pc, #320]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f003 030c 	and.w	r3, r3, #12
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00b      	beq.n	8004d5e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d46:	4b4d      	ldr	r3, [pc, #308]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f003 030c 	and.w	r3, r3, #12
 8004d4e:	2b08      	cmp	r3, #8
 8004d50:	d11c      	bne.n	8004d8c <HAL_RCC_OscConfig+0x190>
 8004d52:	4b4a      	ldr	r3, [pc, #296]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d116      	bne.n	8004d8c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d5e:	4b47      	ldr	r3, [pc, #284]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d005      	beq.n	8004d76 <HAL_RCC_OscConfig+0x17a>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d001      	beq.n	8004d76 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e1e9      	b.n	800514a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d76:	4b41      	ldr	r3, [pc, #260]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	493d      	ldr	r1, [pc, #244]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d8a:	e040      	b.n	8004e0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d023      	beq.n	8004ddc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d94:	4b39      	ldr	r3, [pc, #228]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a38      	ldr	r2, [pc, #224]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004d9a:	f043 0301 	orr.w	r3, r3, #1
 8004d9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da0:	f7fe fe9a 	bl	8003ad8 <HAL_GetTick>
 8004da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004da6:	e008      	b.n	8004dba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004da8:	f7fe fe96 	bl	8003ad8 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e1c7      	b.n	800514a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dba:	4b30      	ldr	r3, [pc, #192]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d0f0      	beq.n	8004da8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dc6:	4b2d      	ldr	r3, [pc, #180]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	00db      	lsls	r3, r3, #3
 8004dd4:	4929      	ldr	r1, [pc, #164]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	600b      	str	r3, [r1, #0]
 8004dda:	e018      	b.n	8004e0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ddc:	4b27      	ldr	r3, [pc, #156]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a26      	ldr	r2, [pc, #152]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004de2:	f023 0301 	bic.w	r3, r3, #1
 8004de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de8:	f7fe fe76 	bl	8003ad8 <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004df0:	f7fe fe72 	bl	8003ad8 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e1a3      	b.n	800514a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e02:	4b1e      	ldr	r3, [pc, #120]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1f0      	bne.n	8004df0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0308 	and.w	r3, r3, #8
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d038      	beq.n	8004e8c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d019      	beq.n	8004e56 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e22:	4b16      	ldr	r3, [pc, #88]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e26:	4a15      	ldr	r2, [pc, #84]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004e28:	f043 0301 	orr.w	r3, r3, #1
 8004e2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e2e:	f7fe fe53 	bl	8003ad8 <HAL_GetTick>
 8004e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e34:	e008      	b.n	8004e48 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e36:	f7fe fe4f 	bl	8003ad8 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e180      	b.n	800514a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e48:	4b0c      	ldr	r3, [pc, #48]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e4c:	f003 0302 	and.w	r3, r3, #2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0f0      	beq.n	8004e36 <HAL_RCC_OscConfig+0x23a>
 8004e54:	e01a      	b.n	8004e8c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e56:	4b09      	ldr	r3, [pc, #36]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e5a:	4a08      	ldr	r2, [pc, #32]	; (8004e7c <HAL_RCC_OscConfig+0x280>)
 8004e5c:	f023 0301 	bic.w	r3, r3, #1
 8004e60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e62:	f7fe fe39 	bl	8003ad8 <HAL_GetTick>
 8004e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e68:	e00a      	b.n	8004e80 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e6a:	f7fe fe35 	bl	8003ad8 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d903      	bls.n	8004e80 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e166      	b.n	800514a <HAL_RCC_OscConfig+0x54e>
 8004e7c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e80:	4b92      	ldr	r3, [pc, #584]	; (80050cc <HAL_RCC_OscConfig+0x4d0>)
 8004e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1ee      	bne.n	8004e6a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0304 	and.w	r3, r3, #4
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 80a4 	beq.w	8004fe2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e9a:	4b8c      	ldr	r3, [pc, #560]	; (80050cc <HAL_RCC_OscConfig+0x4d0>)
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10d      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ea6:	4b89      	ldr	r3, [pc, #548]	; (80050cc <HAL_RCC_OscConfig+0x4d0>)
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	4a88      	ldr	r2, [pc, #544]	; (80050cc <HAL_RCC_OscConfig+0x4d0>)
 8004eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8004eb2:	4b86      	ldr	r3, [pc, #536]	; (80050cc <HAL_RCC_OscConfig+0x4d0>)
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eba:	60bb      	str	r3, [r7, #8]
 8004ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ec2:	4b83      	ldr	r3, [pc, #524]	; (80050d0 <HAL_RCC_OscConfig+0x4d4>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d118      	bne.n	8004f00 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004ece:	4b80      	ldr	r3, [pc, #512]	; (80050d0 <HAL_RCC_OscConfig+0x4d4>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a7f      	ldr	r2, [pc, #508]	; (80050d0 <HAL_RCC_OscConfig+0x4d4>)
 8004ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eda:	f7fe fdfd 	bl	8003ad8 <HAL_GetTick>
 8004ede:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ee0:	e008      	b.n	8004ef4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ee2:	f7fe fdf9 	bl	8003ad8 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b64      	cmp	r3, #100	; 0x64
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e12a      	b.n	800514a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ef4:	4b76      	ldr	r3, [pc, #472]	; (80050d0 <HAL_RCC_OscConfig+0x4d4>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d0f0      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d106      	bne.n	8004f16 <HAL_RCC_OscConfig+0x31a>
 8004f08:	4b70      	ldr	r3, [pc, #448]	; (80050cc <HAL_RCC_OscConfig+0x4d0>)
 8004f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0c:	4a6f      	ldr	r2, [pc, #444]	; (80050cc <HAL_RCC_OscConfig+0x4d0>)
 8004f0e:	f043 0301 	orr.w	r3, r3, #1
 8004f12:	6713      	str	r3, [r2, #112]	; 0x70
 8004f14:	e02d      	b.n	8004f72 <HAL_RCC_OscConfig+0x376>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10c      	bne.n	8004f38 <HAL_RCC_OscConfig+0x33c>
 8004f1e:	4b6b      	ldr	r3, [pc, #428]	; (80050cc <HAL_RCC_OscConfig+0x4d0>)
 8004f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f22:	4a6a      	ldr	r2, [pc, #424]	; (80050cc <HAL_RCC_OscConfig+0x4d0>)
 8004f24:	f023 0301 	bic.w	r3, r3, #1
 8004f28:	6713      	str	r3, [r2, #112]	; 0x70
 8004f2a:	4b68      	ldr	r3, [pc, #416]	; (80050cc <HAL_RCC_OscConfig+0x4d0>)
 8004f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2e:	4a67      	ldr	r2, [pc, #412]	; (80050cc <HAL_RCC_OscConfig+0x4d0>)
 8004f30:	f023 0304 	bic.w	r3, r3, #4
 8004f34:	6713      	str	r3, [r2, #112]	; 0x70
 8004f36:	e01c      	b.n	8004f72 <HAL_RCC_OscConfig+0x376>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	2b05      	cmp	r3, #5
 8004f3e:	d10c      	bne.n	8004f5a <HAL_RCC_OscConfig+0x35e>
 8004f40:	4b62      	ldr	r3, [pc, #392]	; (80050cc <HAL_RCC_OscConfig+0x4d0>)
 8004f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f44:	4a61      	ldr	r2, [pc, #388]	; (80050cc <HAL_RCC_OscConfig+0x4d0>)
 8004f46:	f043 0304 	orr.w	r3, r3, #4
 8004f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f4c:	4b5f      	ldr	r3, [pc, #380]	; (80050cc <HAL_RCC_OscConfig+0x4d0>)
 8004f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f50:	4a5e      	ldr	r2, [pc, #376]	; (80050cc <HAL_RCC_OscConfig+0x4d0>)
 8004f52:	f043 0301 	orr.w	r3, r3, #1
 8004f56:	6713      	str	r3, [r2, #112]	; 0x70
 8004f58:	e00b      	b.n	8004f72 <HAL_RCC_OscConfig+0x376>
 8004f5a:	4b5c      	ldr	r3, [pc, #368]	; (80050cc <HAL_RCC_OscConfig+0x4d0>)
 8004f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5e:	4a5b      	ldr	r2, [pc, #364]	; (80050cc <HAL_RCC_OscConfig+0x4d0>)
 8004f60:	f023 0301 	bic.w	r3, r3, #1
 8004f64:	6713      	str	r3, [r2, #112]	; 0x70
 8004f66:	4b59      	ldr	r3, [pc, #356]	; (80050cc <HAL_RCC_OscConfig+0x4d0>)
 8004f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6a:	4a58      	ldr	r2, [pc, #352]	; (80050cc <HAL_RCC_OscConfig+0x4d0>)
 8004f6c:	f023 0304 	bic.w	r3, r3, #4
 8004f70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d015      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f7a:	f7fe fdad 	bl	8003ad8 <HAL_GetTick>
 8004f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f80:	e00a      	b.n	8004f98 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f82:	f7fe fda9 	bl	8003ad8 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d901      	bls.n	8004f98 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e0d8      	b.n	800514a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f98:	4b4c      	ldr	r3, [pc, #304]	; (80050cc <HAL_RCC_OscConfig+0x4d0>)
 8004f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d0ee      	beq.n	8004f82 <HAL_RCC_OscConfig+0x386>
 8004fa4:	e014      	b.n	8004fd0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa6:	f7fe fd97 	bl	8003ad8 <HAL_GetTick>
 8004faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fac:	e00a      	b.n	8004fc4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fae:	f7fe fd93 	bl	8003ad8 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d901      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e0c2      	b.n	800514a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fc4:	4b41      	ldr	r3, [pc, #260]	; (80050cc <HAL_RCC_OscConfig+0x4d0>)
 8004fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1ee      	bne.n	8004fae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fd0:	7dfb      	ldrb	r3, [r7, #23]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d105      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fd6:	4b3d      	ldr	r3, [pc, #244]	; (80050cc <HAL_RCC_OscConfig+0x4d0>)
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	4a3c      	ldr	r2, [pc, #240]	; (80050cc <HAL_RCC_OscConfig+0x4d0>)
 8004fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fe0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f000 80ae 	beq.w	8005148 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fec:	4b37      	ldr	r3, [pc, #220]	; (80050cc <HAL_RCC_OscConfig+0x4d0>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f003 030c 	and.w	r3, r3, #12
 8004ff4:	2b08      	cmp	r3, #8
 8004ff6:	d06d      	beq.n	80050d4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d14b      	bne.n	8005098 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005000:	4b32      	ldr	r3, [pc, #200]	; (80050cc <HAL_RCC_OscConfig+0x4d0>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a31      	ldr	r2, [pc, #196]	; (80050cc <HAL_RCC_OscConfig+0x4d0>)
 8005006:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800500a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800500c:	f7fe fd64 	bl	8003ad8 <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005014:	f7fe fd60 	bl	8003ad8 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e091      	b.n	800514a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005026:	4b29      	ldr	r3, [pc, #164]	; (80050cc <HAL_RCC_OscConfig+0x4d0>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1f0      	bne.n	8005014 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	69da      	ldr	r2, [r3, #28]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	431a      	orrs	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005040:	019b      	lsls	r3, r3, #6
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005048:	085b      	lsrs	r3, r3, #1
 800504a:	3b01      	subs	r3, #1
 800504c:	041b      	lsls	r3, r3, #16
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005054:	061b      	lsls	r3, r3, #24
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505c:	071b      	lsls	r3, r3, #28
 800505e:	491b      	ldr	r1, [pc, #108]	; (80050cc <HAL_RCC_OscConfig+0x4d0>)
 8005060:	4313      	orrs	r3, r2
 8005062:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005064:	4b19      	ldr	r3, [pc, #100]	; (80050cc <HAL_RCC_OscConfig+0x4d0>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a18      	ldr	r2, [pc, #96]	; (80050cc <HAL_RCC_OscConfig+0x4d0>)
 800506a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800506e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005070:	f7fe fd32 	bl	8003ad8 <HAL_GetTick>
 8005074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005076:	e008      	b.n	800508a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005078:	f7fe fd2e 	bl	8003ad8 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b02      	cmp	r3, #2
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e05f      	b.n	800514a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800508a:	4b10      	ldr	r3, [pc, #64]	; (80050cc <HAL_RCC_OscConfig+0x4d0>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d0f0      	beq.n	8005078 <HAL_RCC_OscConfig+0x47c>
 8005096:	e057      	b.n	8005148 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005098:	4b0c      	ldr	r3, [pc, #48]	; (80050cc <HAL_RCC_OscConfig+0x4d0>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a0b      	ldr	r2, [pc, #44]	; (80050cc <HAL_RCC_OscConfig+0x4d0>)
 800509e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a4:	f7fe fd18 	bl	8003ad8 <HAL_GetTick>
 80050a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050aa:	e008      	b.n	80050be <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ac:	f7fe fd14 	bl	8003ad8 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d901      	bls.n	80050be <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e045      	b.n	800514a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050be:	4b03      	ldr	r3, [pc, #12]	; (80050cc <HAL_RCC_OscConfig+0x4d0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1f0      	bne.n	80050ac <HAL_RCC_OscConfig+0x4b0>
 80050ca:	e03d      	b.n	8005148 <HAL_RCC_OscConfig+0x54c>
 80050cc:	40023800 	.word	0x40023800
 80050d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80050d4:	4b1f      	ldr	r3, [pc, #124]	; (8005154 <HAL_RCC_OscConfig+0x558>)
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d030      	beq.n	8005144 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d129      	bne.n	8005144 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d122      	bne.n	8005144 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005104:	4013      	ands	r3, r2
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800510a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800510c:	4293      	cmp	r3, r2
 800510e:	d119      	bne.n	8005144 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511a:	085b      	lsrs	r3, r3, #1
 800511c:	3b01      	subs	r3, #1
 800511e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005120:	429a      	cmp	r2, r3
 8005122:	d10f      	bne.n	8005144 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005130:	429a      	cmp	r2, r3
 8005132:	d107      	bne.n	8005144 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005140:	429a      	cmp	r2, r3
 8005142:	d001      	beq.n	8005148 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e000      	b.n	800514a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3718      	adds	r7, #24
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	40023800 	.word	0x40023800

08005158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005162:	2300      	movs	r3, #0
 8005164:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d101      	bne.n	8005170 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e0d0      	b.n	8005312 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005170:	4b6a      	ldr	r3, [pc, #424]	; (800531c <HAL_RCC_ClockConfig+0x1c4>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 030f 	and.w	r3, r3, #15
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	429a      	cmp	r2, r3
 800517c:	d910      	bls.n	80051a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800517e:	4b67      	ldr	r3, [pc, #412]	; (800531c <HAL_RCC_ClockConfig+0x1c4>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f023 020f 	bic.w	r2, r3, #15
 8005186:	4965      	ldr	r1, [pc, #404]	; (800531c <HAL_RCC_ClockConfig+0x1c4>)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	4313      	orrs	r3, r2
 800518c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800518e:	4b63      	ldr	r3, [pc, #396]	; (800531c <HAL_RCC_ClockConfig+0x1c4>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 030f 	and.w	r3, r3, #15
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	429a      	cmp	r2, r3
 800519a:	d001      	beq.n	80051a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e0b8      	b.n	8005312 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0302 	and.w	r3, r3, #2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d020      	beq.n	80051ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d005      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051b8:	4b59      	ldr	r3, [pc, #356]	; (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	4a58      	ldr	r2, [pc, #352]	; (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 80051be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0308 	and.w	r3, r3, #8
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d005      	beq.n	80051dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051d0:	4b53      	ldr	r3, [pc, #332]	; (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	4a52      	ldr	r2, [pc, #328]	; (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 80051d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051dc:	4b50      	ldr	r3, [pc, #320]	; (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	494d      	ldr	r1, [pc, #308]	; (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d040      	beq.n	800527c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d107      	bne.n	8005212 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005202:	4b47      	ldr	r3, [pc, #284]	; (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d115      	bne.n	800523a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e07f      	b.n	8005312 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	2b02      	cmp	r3, #2
 8005218:	d107      	bne.n	800522a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800521a:	4b41      	ldr	r3, [pc, #260]	; (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d109      	bne.n	800523a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e073      	b.n	8005312 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800522a:	4b3d      	ldr	r3, [pc, #244]	; (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e06b      	b.n	8005312 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800523a:	4b39      	ldr	r3, [pc, #228]	; (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f023 0203 	bic.w	r2, r3, #3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	4936      	ldr	r1, [pc, #216]	; (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 8005248:	4313      	orrs	r3, r2
 800524a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800524c:	f7fe fc44 	bl	8003ad8 <HAL_GetTick>
 8005250:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005252:	e00a      	b.n	800526a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005254:	f7fe fc40 	bl	8003ad8 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005262:	4293      	cmp	r3, r2
 8005264:	d901      	bls.n	800526a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e053      	b.n	8005312 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800526a:	4b2d      	ldr	r3, [pc, #180]	; (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f003 020c 	and.w	r2, r3, #12
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	429a      	cmp	r2, r3
 800527a:	d1eb      	bne.n	8005254 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800527c:	4b27      	ldr	r3, [pc, #156]	; (800531c <HAL_RCC_ClockConfig+0x1c4>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 030f 	and.w	r3, r3, #15
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	429a      	cmp	r2, r3
 8005288:	d210      	bcs.n	80052ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800528a:	4b24      	ldr	r3, [pc, #144]	; (800531c <HAL_RCC_ClockConfig+0x1c4>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f023 020f 	bic.w	r2, r3, #15
 8005292:	4922      	ldr	r1, [pc, #136]	; (800531c <HAL_RCC_ClockConfig+0x1c4>)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	4313      	orrs	r3, r2
 8005298:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800529a:	4b20      	ldr	r3, [pc, #128]	; (800531c <HAL_RCC_ClockConfig+0x1c4>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	683a      	ldr	r2, [r7, #0]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d001      	beq.n	80052ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e032      	b.n	8005312 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d008      	beq.n	80052ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052b8:	4b19      	ldr	r3, [pc, #100]	; (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	4916      	ldr	r1, [pc, #88]	; (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0308 	and.w	r3, r3, #8
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d009      	beq.n	80052ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80052d6:	4b12      	ldr	r3, [pc, #72]	; (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	490e      	ldr	r1, [pc, #56]	; (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80052ea:	f000 f821 	bl	8005330 <HAL_RCC_GetSysClockFreq>
 80052ee:	4601      	mov	r1, r0
 80052f0:	4b0b      	ldr	r3, [pc, #44]	; (8005320 <HAL_RCC_ClockConfig+0x1c8>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	091b      	lsrs	r3, r3, #4
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	4a0a      	ldr	r2, [pc, #40]	; (8005324 <HAL_RCC_ClockConfig+0x1cc>)
 80052fc:	5cd3      	ldrb	r3, [r2, r3]
 80052fe:	fa21 f303 	lsr.w	r3, r1, r3
 8005302:	4a09      	ldr	r2, [pc, #36]	; (8005328 <HAL_RCC_ClockConfig+0x1d0>)
 8005304:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005306:	4b09      	ldr	r3, [pc, #36]	; (800532c <HAL_RCC_ClockConfig+0x1d4>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4618      	mov	r0, r3
 800530c:	f7fd fd30 	bl	8002d70 <HAL_InitTick>

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	40023c00 	.word	0x40023c00
 8005320:	40023800 	.word	0x40023800
 8005324:	0800e6c8 	.word	0x0800e6c8
 8005328:	20000000 	.word	0x20000000
 800532c:	20000004 	.word	0x20000004

08005330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005336:	2300      	movs	r3, #0
 8005338:	607b      	str	r3, [r7, #4]
 800533a:	2300      	movs	r3, #0
 800533c:	60fb      	str	r3, [r7, #12]
 800533e:	2300      	movs	r3, #0
 8005340:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005342:	2300      	movs	r3, #0
 8005344:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005346:	4b63      	ldr	r3, [pc, #396]	; (80054d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f003 030c 	and.w	r3, r3, #12
 800534e:	2b04      	cmp	r3, #4
 8005350:	d007      	beq.n	8005362 <HAL_RCC_GetSysClockFreq+0x32>
 8005352:	2b08      	cmp	r3, #8
 8005354:	d008      	beq.n	8005368 <HAL_RCC_GetSysClockFreq+0x38>
 8005356:	2b00      	cmp	r3, #0
 8005358:	f040 80b4 	bne.w	80054c4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800535c:	4b5e      	ldr	r3, [pc, #376]	; (80054d8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800535e:	60bb      	str	r3, [r7, #8]
      break;
 8005360:	e0b3      	b.n	80054ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005362:	4b5e      	ldr	r3, [pc, #376]	; (80054dc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005364:	60bb      	str	r3, [r7, #8]
      break;
 8005366:	e0b0      	b.n	80054ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005368:	4b5a      	ldr	r3, [pc, #360]	; (80054d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005370:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005372:	4b58      	ldr	r3, [pc, #352]	; (80054d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d04a      	beq.n	8005414 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800537e:	4b55      	ldr	r3, [pc, #340]	; (80054d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	099b      	lsrs	r3, r3, #6
 8005384:	f04f 0400 	mov.w	r4, #0
 8005388:	f240 11ff 	movw	r1, #511	; 0x1ff
 800538c:	f04f 0200 	mov.w	r2, #0
 8005390:	ea03 0501 	and.w	r5, r3, r1
 8005394:	ea04 0602 	and.w	r6, r4, r2
 8005398:	4629      	mov	r1, r5
 800539a:	4632      	mov	r2, r6
 800539c:	f04f 0300 	mov.w	r3, #0
 80053a0:	f04f 0400 	mov.w	r4, #0
 80053a4:	0154      	lsls	r4, r2, #5
 80053a6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80053aa:	014b      	lsls	r3, r1, #5
 80053ac:	4619      	mov	r1, r3
 80053ae:	4622      	mov	r2, r4
 80053b0:	1b49      	subs	r1, r1, r5
 80053b2:	eb62 0206 	sbc.w	r2, r2, r6
 80053b6:	f04f 0300 	mov.w	r3, #0
 80053ba:	f04f 0400 	mov.w	r4, #0
 80053be:	0194      	lsls	r4, r2, #6
 80053c0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80053c4:	018b      	lsls	r3, r1, #6
 80053c6:	1a5b      	subs	r3, r3, r1
 80053c8:	eb64 0402 	sbc.w	r4, r4, r2
 80053cc:	f04f 0100 	mov.w	r1, #0
 80053d0:	f04f 0200 	mov.w	r2, #0
 80053d4:	00e2      	lsls	r2, r4, #3
 80053d6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80053da:	00d9      	lsls	r1, r3, #3
 80053dc:	460b      	mov	r3, r1
 80053de:	4614      	mov	r4, r2
 80053e0:	195b      	adds	r3, r3, r5
 80053e2:	eb44 0406 	adc.w	r4, r4, r6
 80053e6:	f04f 0100 	mov.w	r1, #0
 80053ea:	f04f 0200 	mov.w	r2, #0
 80053ee:	0262      	lsls	r2, r4, #9
 80053f0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80053f4:	0259      	lsls	r1, r3, #9
 80053f6:	460b      	mov	r3, r1
 80053f8:	4614      	mov	r4, r2
 80053fa:	4618      	mov	r0, r3
 80053fc:	4621      	mov	r1, r4
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f04f 0400 	mov.w	r4, #0
 8005404:	461a      	mov	r2, r3
 8005406:	4623      	mov	r3, r4
 8005408:	f7fa ffc2 	bl	8000390 <__aeabi_uldivmod>
 800540c:	4603      	mov	r3, r0
 800540e:	460c      	mov	r4, r1
 8005410:	60fb      	str	r3, [r7, #12]
 8005412:	e049      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005414:	4b2f      	ldr	r3, [pc, #188]	; (80054d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	099b      	lsrs	r3, r3, #6
 800541a:	f04f 0400 	mov.w	r4, #0
 800541e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005422:	f04f 0200 	mov.w	r2, #0
 8005426:	ea03 0501 	and.w	r5, r3, r1
 800542a:	ea04 0602 	and.w	r6, r4, r2
 800542e:	4629      	mov	r1, r5
 8005430:	4632      	mov	r2, r6
 8005432:	f04f 0300 	mov.w	r3, #0
 8005436:	f04f 0400 	mov.w	r4, #0
 800543a:	0154      	lsls	r4, r2, #5
 800543c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005440:	014b      	lsls	r3, r1, #5
 8005442:	4619      	mov	r1, r3
 8005444:	4622      	mov	r2, r4
 8005446:	1b49      	subs	r1, r1, r5
 8005448:	eb62 0206 	sbc.w	r2, r2, r6
 800544c:	f04f 0300 	mov.w	r3, #0
 8005450:	f04f 0400 	mov.w	r4, #0
 8005454:	0194      	lsls	r4, r2, #6
 8005456:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800545a:	018b      	lsls	r3, r1, #6
 800545c:	1a5b      	subs	r3, r3, r1
 800545e:	eb64 0402 	sbc.w	r4, r4, r2
 8005462:	f04f 0100 	mov.w	r1, #0
 8005466:	f04f 0200 	mov.w	r2, #0
 800546a:	00e2      	lsls	r2, r4, #3
 800546c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005470:	00d9      	lsls	r1, r3, #3
 8005472:	460b      	mov	r3, r1
 8005474:	4614      	mov	r4, r2
 8005476:	195b      	adds	r3, r3, r5
 8005478:	eb44 0406 	adc.w	r4, r4, r6
 800547c:	f04f 0100 	mov.w	r1, #0
 8005480:	f04f 0200 	mov.w	r2, #0
 8005484:	02a2      	lsls	r2, r4, #10
 8005486:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800548a:	0299      	lsls	r1, r3, #10
 800548c:	460b      	mov	r3, r1
 800548e:	4614      	mov	r4, r2
 8005490:	4618      	mov	r0, r3
 8005492:	4621      	mov	r1, r4
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f04f 0400 	mov.w	r4, #0
 800549a:	461a      	mov	r2, r3
 800549c:	4623      	mov	r3, r4
 800549e:	f7fa ff77 	bl	8000390 <__aeabi_uldivmod>
 80054a2:	4603      	mov	r3, r0
 80054a4:	460c      	mov	r4, r1
 80054a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80054a8:	4b0a      	ldr	r3, [pc, #40]	; (80054d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	0c1b      	lsrs	r3, r3, #16
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	3301      	adds	r3, #1
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c0:	60bb      	str	r3, [r7, #8]
      break;
 80054c2:	e002      	b.n	80054ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054c4:	4b04      	ldr	r3, [pc, #16]	; (80054d8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80054c6:	60bb      	str	r3, [r7, #8]
      break;
 80054c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054ca:	68bb      	ldr	r3, [r7, #8]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054d4:	40023800 	.word	0x40023800
 80054d8:	00f42400 	.word	0x00f42400
 80054dc:	007a1200 	.word	0x007a1200

080054e0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054e0:	b480      	push	{r7}
 80054e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054e4:	4b03      	ldr	r3, [pc, #12]	; (80054f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80054e6:	681b      	ldr	r3, [r3, #0]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	20000000 	.word	0x20000000

080054f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054fc:	f7ff fff0 	bl	80054e0 <HAL_RCC_GetHCLKFreq>
 8005500:	4601      	mov	r1, r0
 8005502:	4b05      	ldr	r3, [pc, #20]	; (8005518 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	0a9b      	lsrs	r3, r3, #10
 8005508:	f003 0307 	and.w	r3, r3, #7
 800550c:	4a03      	ldr	r2, [pc, #12]	; (800551c <HAL_RCC_GetPCLK1Freq+0x24>)
 800550e:	5cd3      	ldrb	r3, [r2, r3]
 8005510:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005514:	4618      	mov	r0, r3
 8005516:	bd80      	pop	{r7, pc}
 8005518:	40023800 	.word	0x40023800
 800551c:	0800e6d8 	.word	0x0800e6d8

08005520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005524:	f7ff ffdc 	bl	80054e0 <HAL_RCC_GetHCLKFreq>
 8005528:	4601      	mov	r1, r0
 800552a:	4b05      	ldr	r3, [pc, #20]	; (8005540 <HAL_RCC_GetPCLK2Freq+0x20>)
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	0b5b      	lsrs	r3, r3, #13
 8005530:	f003 0307 	and.w	r3, r3, #7
 8005534:	4a03      	ldr	r2, [pc, #12]	; (8005544 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005536:	5cd3      	ldrb	r3, [r2, r3]
 8005538:	fa21 f303 	lsr.w	r3, r1, r3
}
 800553c:	4618      	mov	r0, r3
 800553e:	bd80      	pop	{r7, pc}
 8005540:	40023800 	.word	0x40023800
 8005544:	0800e6d8 	.word	0x0800e6d8

08005548 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	220f      	movs	r2, #15
 8005556:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005558:	4b12      	ldr	r3, [pc, #72]	; (80055a4 <HAL_RCC_GetClockConfig+0x5c>)
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f003 0203 	and.w	r2, r3, #3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005564:	4b0f      	ldr	r3, [pc, #60]	; (80055a4 <HAL_RCC_GetClockConfig+0x5c>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005570:	4b0c      	ldr	r3, [pc, #48]	; (80055a4 <HAL_RCC_GetClockConfig+0x5c>)
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800557c:	4b09      	ldr	r3, [pc, #36]	; (80055a4 <HAL_RCC_GetClockConfig+0x5c>)
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	08db      	lsrs	r3, r3, #3
 8005582:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800558a:	4b07      	ldr	r3, [pc, #28]	; (80055a8 <HAL_RCC_GetClockConfig+0x60>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 020f 	and.w	r2, r3, #15
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	601a      	str	r2, [r3, #0]
}
 8005596:	bf00      	nop
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	40023800 	.word	0x40023800
 80055a8:	40023c00 	.word	0x40023c00

080055ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b088      	sub	sp, #32
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80055b4:	2300      	movs	r3, #0
 80055b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80055b8:	2300      	movs	r3, #0
 80055ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80055bc:	2300      	movs	r3, #0
 80055be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80055c0:	2300      	movs	r3, #0
 80055c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80055c4:	2300      	movs	r3, #0
 80055c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d012      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80055d4:	4b69      	ldr	r3, [pc, #420]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	4a68      	ldr	r2, [pc, #416]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80055de:	6093      	str	r3, [r2, #8]
 80055e0:	4b66      	ldr	r3, [pc, #408]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e8:	4964      	ldr	r1, [pc, #400]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80055f6:	2301      	movs	r3, #1
 80055f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d017      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005606:	4b5d      	ldr	r3, [pc, #372]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005608:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800560c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005614:	4959      	ldr	r1, [pc, #356]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005616:	4313      	orrs	r3, r2
 8005618:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005620:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005624:	d101      	bne.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005626:	2301      	movs	r3, #1
 8005628:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005632:	2301      	movs	r3, #1
 8005634:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d017      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005642:	4b4e      	ldr	r3, [pc, #312]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005644:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005648:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005650:	494a      	ldr	r1, [pc, #296]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005652:	4313      	orrs	r3, r2
 8005654:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005660:	d101      	bne.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005662:	2301      	movs	r3, #1
 8005664:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566a:	2b00      	cmp	r3, #0
 800566c:	d101      	bne.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800566e:	2301      	movs	r3, #1
 8005670:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d001      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800567e:	2301      	movs	r3, #1
 8005680:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0320 	and.w	r3, r3, #32
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 808b 	beq.w	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005690:	4b3a      	ldr	r3, [pc, #232]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005694:	4a39      	ldr	r2, [pc, #228]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800569a:	6413      	str	r3, [r2, #64]	; 0x40
 800569c:	4b37      	ldr	r3, [pc, #220]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800569e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056a4:	60bb      	str	r3, [r7, #8]
 80056a6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80056a8:	4b35      	ldr	r3, [pc, #212]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a34      	ldr	r2, [pc, #208]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80056ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056b4:	f7fe fa10 	bl	8003ad8 <HAL_GetTick>
 80056b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80056ba:	e008      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056bc:	f7fe fa0c 	bl	8003ad8 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	2b64      	cmp	r3, #100	; 0x64
 80056c8:	d901      	bls.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e38d      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80056ce:	4b2c      	ldr	r3, [pc, #176]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d0f0      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056da:	4b28      	ldr	r3, [pc, #160]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d035      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d02e      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056f8:	4b20      	ldr	r3, [pc, #128]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005700:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005702:	4b1e      	ldr	r3, [pc, #120]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005706:	4a1d      	ldr	r2, [pc, #116]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800570c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800570e:	4b1b      	ldr	r3, [pc, #108]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005712:	4a1a      	ldr	r2, [pc, #104]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005714:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005718:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800571a:	4a18      	ldr	r2, [pc, #96]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005720:	4b16      	ldr	r3, [pc, #88]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005724:	f003 0301 	and.w	r3, r3, #1
 8005728:	2b01      	cmp	r3, #1
 800572a:	d114      	bne.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800572c:	f7fe f9d4 	bl	8003ad8 <HAL_GetTick>
 8005730:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005732:	e00a      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005734:	f7fe f9d0 	bl	8003ad8 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005742:	4293      	cmp	r3, r2
 8005744:	d901      	bls.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e34f      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800574a:	4b0c      	ldr	r3, [pc, #48]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800574c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d0ee      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800575e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005762:	d111      	bne.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005764:	4b05      	ldr	r3, [pc, #20]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005770:	4b04      	ldr	r3, [pc, #16]	; (8005784 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005772:	400b      	ands	r3, r1
 8005774:	4901      	ldr	r1, [pc, #4]	; (800577c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005776:	4313      	orrs	r3, r2
 8005778:	608b      	str	r3, [r1, #8]
 800577a:	e00b      	b.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800577c:	40023800 	.word	0x40023800
 8005780:	40007000 	.word	0x40007000
 8005784:	0ffffcff 	.word	0x0ffffcff
 8005788:	4bb3      	ldr	r3, [pc, #716]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	4ab2      	ldr	r2, [pc, #712]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800578e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005792:	6093      	str	r3, [r2, #8]
 8005794:	4bb0      	ldr	r3, [pc, #704]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005796:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057a0:	49ad      	ldr	r1, [pc, #692]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0310 	and.w	r3, r3, #16
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d010      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057b2:	4ba9      	ldr	r3, [pc, #676]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057b8:	4aa7      	ldr	r2, [pc, #668]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80057c2:	4ba5      	ldr	r3, [pc, #660]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057cc:	49a2      	ldr	r1, [pc, #648]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00a      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057e0:	4b9d      	ldr	r3, [pc, #628]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057ee:	499a      	ldr	r1, [pc, #616]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00a      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005802:	4b95      	ldr	r3, [pc, #596]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005808:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005810:	4991      	ldr	r1, [pc, #580]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005812:	4313      	orrs	r3, r2
 8005814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00a      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005824:	4b8c      	ldr	r3, [pc, #560]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800582a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005832:	4989      	ldr	r1, [pc, #548]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005834:	4313      	orrs	r3, r2
 8005836:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005846:	4b84      	ldr	r3, [pc, #528]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800584c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005854:	4980      	ldr	r1, [pc, #512]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005856:	4313      	orrs	r3, r2
 8005858:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00a      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005868:	4b7b      	ldr	r3, [pc, #492]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800586a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800586e:	f023 0203 	bic.w	r2, r3, #3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005876:	4978      	ldr	r1, [pc, #480]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005878:	4313      	orrs	r3, r2
 800587a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00a      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800588a:	4b73      	ldr	r3, [pc, #460]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800588c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005890:	f023 020c 	bic.w	r2, r3, #12
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005898:	496f      	ldr	r1, [pc, #444]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800589a:	4313      	orrs	r3, r2
 800589c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00a      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058ac:	4b6a      	ldr	r3, [pc, #424]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ba:	4967      	ldr	r1, [pc, #412]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00a      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058ce:	4b62      	ldr	r3, [pc, #392]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058dc:	495e      	ldr	r1, [pc, #376]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00a      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058f0:	4b59      	ldr	r3, [pc, #356]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058fe:	4956      	ldr	r1, [pc, #344]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005900:	4313      	orrs	r3, r2
 8005902:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00a      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005912:	4b51      	ldr	r3, [pc, #324]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005918:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005920:	494d      	ldr	r1, [pc, #308]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005922:	4313      	orrs	r3, r2
 8005924:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00a      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005934:	4b48      	ldr	r3, [pc, #288]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800593a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005942:	4945      	ldr	r1, [pc, #276]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005944:	4313      	orrs	r3, r2
 8005946:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00a      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005956:	4b40      	ldr	r3, [pc, #256]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800595c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005964:	493c      	ldr	r1, [pc, #240]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005966:	4313      	orrs	r3, r2
 8005968:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00a      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005978:	4b37      	ldr	r3, [pc, #220]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800597a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800597e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005986:	4934      	ldr	r1, [pc, #208]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005988:	4313      	orrs	r3, r2
 800598a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d011      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800599a:	4b2f      	ldr	r3, [pc, #188]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800599c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059a8:	492b      	ldr	r1, [pc, #172]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059b8:	d101      	bne.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80059ba:	2301      	movs	r3, #1
 80059bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0308 	and.w	r3, r3, #8
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80059ca:	2301      	movs	r3, #1
 80059cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00a      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059da:	4b1f      	ldr	r3, [pc, #124]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059e0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059e8:	491b      	ldr	r1, [pc, #108]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00b      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80059fc:	4b16      	ldr	r3, [pc, #88]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a02:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a0c:	4912      	ldr	r1, [pc, #72]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00b      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005a20:	4b0d      	ldr	r3, [pc, #52]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a26:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a30:	4909      	ldr	r1, [pc, #36]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00f      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a44:	4b04      	ldr	r3, [pc, #16]	; (8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a4a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a54:	e002      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005a56:	bf00      	nop
 8005a58:	40023800 	.word	0x40023800
 8005a5c:	4985      	ldr	r1, [pc, #532]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00b      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005a70:	4b80      	ldr	r3, [pc, #512]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005a72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a76:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a80:	497c      	ldr	r1, [pc, #496]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d005      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a96:	f040 80d6 	bne.w	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a9a:	4b76      	ldr	r3, [pc, #472]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a75      	ldr	r2, [pc, #468]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005aa0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005aa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aa6:	f7fe f817 	bl	8003ad8 <HAL_GetTick>
 8005aaa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005aac:	e008      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005aae:	f7fe f813 	bl	8003ad8 <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	2b64      	cmp	r3, #100	; 0x64
 8005aba:	d901      	bls.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e194      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ac0:	4b6c      	ldr	r3, [pc, #432]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1f0      	bne.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d021      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x570>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d11d      	bne.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005ae0:	4b64      	ldr	r3, [pc, #400]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ae6:	0c1b      	lsrs	r3, r3, #16
 8005ae8:	f003 0303 	and.w	r3, r3, #3
 8005aec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005aee:	4b61      	ldr	r3, [pc, #388]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005af4:	0e1b      	lsrs	r3, r3, #24
 8005af6:	f003 030f 	and.w	r3, r3, #15
 8005afa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	019a      	lsls	r2, r3, #6
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	041b      	lsls	r3, r3, #16
 8005b06:	431a      	orrs	r2, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	061b      	lsls	r3, r3, #24
 8005b0c:	431a      	orrs	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	071b      	lsls	r3, r3, #28
 8005b14:	4957      	ldr	r1, [pc, #348]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d004      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b30:	d00a      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d02e      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b46:	d129      	bne.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005b48:	4b4a      	ldr	r3, [pc, #296]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b4e:	0c1b      	lsrs	r3, r3, #16
 8005b50:	f003 0303 	and.w	r3, r3, #3
 8005b54:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b56:	4b47      	ldr	r3, [pc, #284]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b5c:	0f1b      	lsrs	r3, r3, #28
 8005b5e:	f003 0307 	and.w	r3, r3, #7
 8005b62:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	019a      	lsls	r2, r3, #6
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	041b      	lsls	r3, r3, #16
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	061b      	lsls	r3, r3, #24
 8005b76:	431a      	orrs	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	071b      	lsls	r3, r3, #28
 8005b7c:	493d      	ldr	r1, [pc, #244]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005b84:	4b3b      	ldr	r3, [pc, #236]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005b86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b8a:	f023 021f 	bic.w	r2, r3, #31
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b92:	3b01      	subs	r3, #1
 8005b94:	4937      	ldr	r1, [pc, #220]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d01d      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005ba8:	4b32      	ldr	r3, [pc, #200]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bae:	0e1b      	lsrs	r3, r3, #24
 8005bb0:	f003 030f 	and.w	r3, r3, #15
 8005bb4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005bb6:	4b2f      	ldr	r3, [pc, #188]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bbc:	0f1b      	lsrs	r3, r3, #28
 8005bbe:	f003 0307 	and.w	r3, r3, #7
 8005bc2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	019a      	lsls	r2, r3, #6
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	041b      	lsls	r3, r3, #16
 8005bd0:	431a      	orrs	r2, r3
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	061b      	lsls	r3, r3, #24
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	071b      	lsls	r3, r3, #28
 8005bdc:	4925      	ldr	r1, [pc, #148]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d011      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	019a      	lsls	r2, r3, #6
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	041b      	lsls	r3, r3, #16
 8005bfc:	431a      	orrs	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	061b      	lsls	r3, r3, #24
 8005c04:	431a      	orrs	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	071b      	lsls	r3, r3, #28
 8005c0c:	4919      	ldr	r1, [pc, #100]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005c14:	4b17      	ldr	r3, [pc, #92]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a16      	ldr	r2, [pc, #88]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005c1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c20:	f7fd ff5a 	bl	8003ad8 <HAL_GetTick>
 8005c24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c26:	e008      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c28:	f7fd ff56 	bl	8003ad8 <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b64      	cmp	r3, #100	; 0x64
 8005c34:	d901      	bls.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e0d7      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c3a:	4b0e      	ldr	r3, [pc, #56]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d0f0      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	f040 80cd 	bne.w	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005c4e:	4b09      	ldr	r3, [pc, #36]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a08      	ldr	r2, [pc, #32]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005c54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c5a:	f7fd ff3d 	bl	8003ad8 <HAL_GetTick>
 8005c5e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c60:	e00a      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c62:	f7fd ff39 	bl	8003ad8 <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	2b64      	cmp	r3, #100	; 0x64
 8005c6e:	d903      	bls.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e0ba      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8005c74:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c78:	4b5e      	ldr	r3, [pc, #376]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c84:	d0ed      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d003      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d009      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d02e      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d12a      	bne.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005cae:	4b51      	ldr	r3, [pc, #324]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cb4:	0c1b      	lsrs	r3, r3, #16
 8005cb6:	f003 0303 	and.w	r3, r3, #3
 8005cba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005cbc:	4b4d      	ldr	r3, [pc, #308]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cc2:	0f1b      	lsrs	r3, r3, #28
 8005cc4:	f003 0307 	and.w	r3, r3, #7
 8005cc8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	019a      	lsls	r2, r3, #6
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	041b      	lsls	r3, r3, #16
 8005cd4:	431a      	orrs	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	061b      	lsls	r3, r3, #24
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	071b      	lsls	r3, r3, #28
 8005ce2:	4944      	ldr	r1, [pc, #272]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005cea:	4b42      	ldr	r3, [pc, #264]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cf0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	021b      	lsls	r3, r3, #8
 8005cfc:	493d      	ldr	r1, [pc, #244]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d022      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d18:	d11d      	bne.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005d1a:	4b36      	ldr	r3, [pc, #216]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d20:	0e1b      	lsrs	r3, r3, #24
 8005d22:	f003 030f 	and.w	r3, r3, #15
 8005d26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005d28:	4b32      	ldr	r3, [pc, #200]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d2e:	0f1b      	lsrs	r3, r3, #28
 8005d30:	f003 0307 	and.w	r3, r3, #7
 8005d34:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	019a      	lsls	r2, r3, #6
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a1b      	ldr	r3, [r3, #32]
 8005d40:	041b      	lsls	r3, r3, #16
 8005d42:	431a      	orrs	r2, r3
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	061b      	lsls	r3, r3, #24
 8005d48:	431a      	orrs	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	071b      	lsls	r3, r3, #28
 8005d4e:	4929      	ldr	r1, [pc, #164]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005d50:	4313      	orrs	r3, r2
 8005d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0308 	and.w	r3, r3, #8
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d028      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005d62:	4b24      	ldr	r3, [pc, #144]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d68:	0e1b      	lsrs	r3, r3, #24
 8005d6a:	f003 030f 	and.w	r3, r3, #15
 8005d6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005d70:	4b20      	ldr	r3, [pc, #128]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d76:	0c1b      	lsrs	r3, r3, #16
 8005d78:	f003 0303 	and.w	r3, r3, #3
 8005d7c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	019a      	lsls	r2, r3, #6
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	041b      	lsls	r3, r3, #16
 8005d88:	431a      	orrs	r2, r3
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	061b      	lsls	r3, r3, #24
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	69db      	ldr	r3, [r3, #28]
 8005d94:	071b      	lsls	r3, r3, #28
 8005d96:	4917      	ldr	r1, [pc, #92]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005d9e:	4b15      	ldr	r3, [pc, #84]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005da4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dac:	4911      	ldr	r1, [pc, #68]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005db4:	4b0f      	ldr	r3, [pc, #60]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a0e      	ldr	r2, [pc, #56]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dc0:	f7fd fe8a 	bl	8003ad8 <HAL_GetTick>
 8005dc4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005dc6:	e008      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005dc8:	f7fd fe86 	bl	8003ad8 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b64      	cmp	r3, #100	; 0x64
 8005dd4:	d901      	bls.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e007      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005dda:	4b06      	ldr	r3, [pc, #24]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005de2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005de6:	d1ef      	bne.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3720      	adds	r7, #32
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	40023800 	.word	0x40023800

08005df8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e01d      	b.n	8005e46 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d106      	bne.n	8005e24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7fd f9c6 	bl	80031b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	3304      	adds	r3, #4
 8005e34:	4619      	mov	r1, r3
 8005e36:	4610      	mov	r0, r2
 8005e38:	f000 fbc8 	bl	80065cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3708      	adds	r7, #8
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
	...

08005e50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68da      	ldr	r2, [r3, #12]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f042 0201 	orr.w	r2, r2, #1
 8005e66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689a      	ldr	r2, [r3, #8]
 8005e6e:	4b0c      	ldr	r3, [pc, #48]	; (8005ea0 <HAL_TIM_Base_Start_IT+0x50>)
 8005e70:	4013      	ands	r3, r2
 8005e72:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2b06      	cmp	r3, #6
 8005e78:	d00b      	beq.n	8005e92 <HAL_TIM_Base_Start_IT+0x42>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e80:	d007      	beq.n	8005e92 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f042 0201 	orr.w	r2, r2, #1
 8005e90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3714      	adds	r7, #20
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	00010007 	.word	0x00010007

08005ea4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e01d      	b.n	8005ef2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d106      	bne.n	8005ed0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f815 	bl	8005efa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	3304      	adds	r3, #4
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	4610      	mov	r0, r2
 8005ee4:	f000 fb72 	bl	80065cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3708      	adds	r7, #8
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005efa:	b480      	push	{r7}
 8005efc:	b083      	sub	sp, #12
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f02:	bf00      	nop
 8005f04:	370c      	adds	r7, #12
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
	...

08005f10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	6839      	ldr	r1, [r7, #0]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 feea 	bl	8006cfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a17      	ldr	r2, [pc, #92]	; (8005f8c <HAL_TIM_PWM_Start+0x7c>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d004      	beq.n	8005f3c <HAL_TIM_PWM_Start+0x2c>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a16      	ldr	r2, [pc, #88]	; (8005f90 <HAL_TIM_PWM_Start+0x80>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d101      	bne.n	8005f40 <HAL_TIM_PWM_Start+0x30>
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e000      	b.n	8005f42 <HAL_TIM_PWM_Start+0x32>
 8005f40:	2300      	movs	r3, #0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d007      	beq.n	8005f56 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689a      	ldr	r2, [r3, #8]
 8005f5c:	4b0d      	ldr	r3, [pc, #52]	; (8005f94 <HAL_TIM_PWM_Start+0x84>)
 8005f5e:	4013      	ands	r3, r2
 8005f60:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2b06      	cmp	r3, #6
 8005f66:	d00b      	beq.n	8005f80 <HAL_TIM_PWM_Start+0x70>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f6e:	d007      	beq.n	8005f80 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f042 0201 	orr.w	r2, r2, #1
 8005f7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	40010000 	.word	0x40010000
 8005f90:	40010400 	.word	0x40010400
 8005f94:	00010007 	.word	0x00010007

08005f98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d122      	bne.n	8005ff4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	f003 0302 	and.w	r3, r3, #2
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d11b      	bne.n	8005ff4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f06f 0202 	mvn.w	r2, #2
 8005fc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	f003 0303 	and.w	r3, r3, #3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d003      	beq.n	8005fe2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 fad8 	bl	8006590 <HAL_TIM_IC_CaptureCallback>
 8005fe0:	e005      	b.n	8005fee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 faca 	bl	800657c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 fadb 	bl	80065a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	f003 0304 	and.w	r3, r3, #4
 8005ffe:	2b04      	cmp	r3, #4
 8006000:	d122      	bne.n	8006048 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	f003 0304 	and.w	r3, r3, #4
 800600c:	2b04      	cmp	r3, #4
 800600e:	d11b      	bne.n	8006048 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f06f 0204 	mvn.w	r2, #4
 8006018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2202      	movs	r2, #2
 800601e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800602a:	2b00      	cmp	r3, #0
 800602c:	d003      	beq.n	8006036 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 faae 	bl	8006590 <HAL_TIM_IC_CaptureCallback>
 8006034:	e005      	b.n	8006042 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 faa0 	bl	800657c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 fab1 	bl	80065a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	f003 0308 	and.w	r3, r3, #8
 8006052:	2b08      	cmp	r3, #8
 8006054:	d122      	bne.n	800609c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	f003 0308 	and.w	r3, r3, #8
 8006060:	2b08      	cmp	r3, #8
 8006062:	d11b      	bne.n	800609c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f06f 0208 	mvn.w	r2, #8
 800606c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2204      	movs	r2, #4
 8006072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	f003 0303 	and.w	r3, r3, #3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d003      	beq.n	800608a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 fa84 	bl	8006590 <HAL_TIM_IC_CaptureCallback>
 8006088:	e005      	b.n	8006096 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 fa76 	bl	800657c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 fa87 	bl	80065a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	f003 0310 	and.w	r3, r3, #16
 80060a6:	2b10      	cmp	r3, #16
 80060a8:	d122      	bne.n	80060f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	f003 0310 	and.w	r3, r3, #16
 80060b4:	2b10      	cmp	r3, #16
 80060b6:	d11b      	bne.n	80060f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f06f 0210 	mvn.w	r2, #16
 80060c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2208      	movs	r2, #8
 80060c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	69db      	ldr	r3, [r3, #28]
 80060ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d003      	beq.n	80060de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 fa5a 	bl	8006590 <HAL_TIM_IC_CaptureCallback>
 80060dc:	e005      	b.n	80060ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fa4c 	bl	800657c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 fa5d 	bl	80065a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	f003 0301 	and.w	r3, r3, #1
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d10e      	bne.n	800611c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	f003 0301 	and.w	r3, r3, #1
 8006108:	2b01      	cmp	r3, #1
 800610a:	d107      	bne.n	800611c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f06f 0201 	mvn.w	r2, #1
 8006114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7fc fde8 	bl	8002cec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006126:	2b80      	cmp	r3, #128	; 0x80
 8006128:	d10e      	bne.n	8006148 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006134:	2b80      	cmp	r3, #128	; 0x80
 8006136:	d107      	bne.n	8006148 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 ff16 	bl	8006f74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006156:	d10e      	bne.n	8006176 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006162:	2b80      	cmp	r3, #128	; 0x80
 8006164:	d107      	bne.n	8006176 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800616e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 ff09 	bl	8006f88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006180:	2b40      	cmp	r3, #64	; 0x40
 8006182:	d10e      	bne.n	80061a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618e:	2b40      	cmp	r3, #64	; 0x40
 8006190:	d107      	bne.n	80061a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800619a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 fa0b 	bl	80065b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	f003 0320 	and.w	r3, r3, #32
 80061ac:	2b20      	cmp	r3, #32
 80061ae:	d10e      	bne.n	80061ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	f003 0320 	and.w	r3, r3, #32
 80061ba:	2b20      	cmp	r3, #32
 80061bc:	d107      	bne.n	80061ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f06f 0220 	mvn.w	r2, #32
 80061c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 fec9 	bl	8006f60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061ce:	bf00      	nop
 80061d0:	3708      	adds	r7, #8
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
	...

080061d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d101      	bne.n	80061f2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80061ee:	2302      	movs	r3, #2
 80061f0:	e105      	b.n	80063fe <HAL_TIM_PWM_ConfigChannel+0x226>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2202      	movs	r2, #2
 80061fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b14      	cmp	r3, #20
 8006206:	f200 80f0 	bhi.w	80063ea <HAL_TIM_PWM_ConfigChannel+0x212>
 800620a:	a201      	add	r2, pc, #4	; (adr r2, 8006210 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800620c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006210:	08006265 	.word	0x08006265
 8006214:	080063eb 	.word	0x080063eb
 8006218:	080063eb 	.word	0x080063eb
 800621c:	080063eb 	.word	0x080063eb
 8006220:	080062a5 	.word	0x080062a5
 8006224:	080063eb 	.word	0x080063eb
 8006228:	080063eb 	.word	0x080063eb
 800622c:	080063eb 	.word	0x080063eb
 8006230:	080062e7 	.word	0x080062e7
 8006234:	080063eb 	.word	0x080063eb
 8006238:	080063eb 	.word	0x080063eb
 800623c:	080063eb 	.word	0x080063eb
 8006240:	08006327 	.word	0x08006327
 8006244:	080063eb 	.word	0x080063eb
 8006248:	080063eb 	.word	0x080063eb
 800624c:	080063eb 	.word	0x080063eb
 8006250:	08006369 	.word	0x08006369
 8006254:	080063eb 	.word	0x080063eb
 8006258:	080063eb 	.word	0x080063eb
 800625c:	080063eb 	.word	0x080063eb
 8006260:	080063a9 	.word	0x080063a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68b9      	ldr	r1, [r7, #8]
 800626a:	4618      	mov	r0, r3
 800626c:	f000 fa4e 	bl	800670c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	699a      	ldr	r2, [r3, #24]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f042 0208 	orr.w	r2, r2, #8
 800627e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	699a      	ldr	r2, [r3, #24]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f022 0204 	bic.w	r2, r2, #4
 800628e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6999      	ldr	r1, [r3, #24]
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	691a      	ldr	r2, [r3, #16]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	430a      	orrs	r2, r1
 80062a0:	619a      	str	r2, [r3, #24]
      break;
 80062a2:	e0a3      	b.n	80063ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68b9      	ldr	r1, [r7, #8]
 80062aa:	4618      	mov	r0, r3
 80062ac:	f000 faa0 	bl	80067f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	699a      	ldr	r2, [r3, #24]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	699a      	ldr	r2, [r3, #24]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6999      	ldr	r1, [r3, #24]
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	021a      	lsls	r2, r3, #8
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	430a      	orrs	r2, r1
 80062e2:	619a      	str	r2, [r3, #24]
      break;
 80062e4:	e082      	b.n	80063ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68b9      	ldr	r1, [r7, #8]
 80062ec:	4618      	mov	r0, r3
 80062ee:	f000 faf7 	bl	80068e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	69da      	ldr	r2, [r3, #28]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f042 0208 	orr.w	r2, r2, #8
 8006300:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	69da      	ldr	r2, [r3, #28]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f022 0204 	bic.w	r2, r2, #4
 8006310:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	69d9      	ldr	r1, [r3, #28]
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	691a      	ldr	r2, [r3, #16]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	430a      	orrs	r2, r1
 8006322:	61da      	str	r2, [r3, #28]
      break;
 8006324:	e062      	b.n	80063ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68b9      	ldr	r1, [r7, #8]
 800632c:	4618      	mov	r0, r3
 800632e:	f000 fb4d 	bl	80069cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	69da      	ldr	r2, [r3, #28]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006340:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	69da      	ldr	r2, [r3, #28]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006350:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	69d9      	ldr	r1, [r3, #28]
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	021a      	lsls	r2, r3, #8
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	430a      	orrs	r2, r1
 8006364:	61da      	str	r2, [r3, #28]
      break;
 8006366:	e041      	b.n	80063ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68b9      	ldr	r1, [r7, #8]
 800636e:	4618      	mov	r0, r3
 8006370:	f000 fb84 	bl	8006a7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f042 0208 	orr.w	r2, r2, #8
 8006382:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f022 0204 	bic.w	r2, r2, #4
 8006392:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	691a      	ldr	r2, [r3, #16]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	430a      	orrs	r2, r1
 80063a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80063a6:	e021      	b.n	80063ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68b9      	ldr	r1, [r7, #8]
 80063ae:	4618      	mov	r0, r3
 80063b0:	f000 fbb6 	bl	8006b20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	021a      	lsls	r2, r3, #8
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	430a      	orrs	r2, r1
 80063e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80063e8:	e000      	b.n	80063ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80063ea:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop

08006408 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006418:	2b01      	cmp	r3, #1
 800641a:	d101      	bne.n	8006420 <HAL_TIM_ConfigClockSource+0x18>
 800641c:	2302      	movs	r3, #2
 800641e:	e0a6      	b.n	800656e <HAL_TIM_ConfigClockSource+0x166>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2202      	movs	r2, #2
 800642c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	4b4f      	ldr	r3, [pc, #316]	; (8006578 <HAL_TIM_ConfigClockSource+0x170>)
 800643c:	4013      	ands	r3, r2
 800643e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006446:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2b40      	cmp	r3, #64	; 0x40
 8006456:	d067      	beq.n	8006528 <HAL_TIM_ConfigClockSource+0x120>
 8006458:	2b40      	cmp	r3, #64	; 0x40
 800645a:	d80b      	bhi.n	8006474 <HAL_TIM_ConfigClockSource+0x6c>
 800645c:	2b10      	cmp	r3, #16
 800645e:	d073      	beq.n	8006548 <HAL_TIM_ConfigClockSource+0x140>
 8006460:	2b10      	cmp	r3, #16
 8006462:	d802      	bhi.n	800646a <HAL_TIM_ConfigClockSource+0x62>
 8006464:	2b00      	cmp	r3, #0
 8006466:	d06f      	beq.n	8006548 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006468:	e078      	b.n	800655c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800646a:	2b20      	cmp	r3, #32
 800646c:	d06c      	beq.n	8006548 <HAL_TIM_ConfigClockSource+0x140>
 800646e:	2b30      	cmp	r3, #48	; 0x30
 8006470:	d06a      	beq.n	8006548 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006472:	e073      	b.n	800655c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006474:	2b70      	cmp	r3, #112	; 0x70
 8006476:	d00d      	beq.n	8006494 <HAL_TIM_ConfigClockSource+0x8c>
 8006478:	2b70      	cmp	r3, #112	; 0x70
 800647a:	d804      	bhi.n	8006486 <HAL_TIM_ConfigClockSource+0x7e>
 800647c:	2b50      	cmp	r3, #80	; 0x50
 800647e:	d033      	beq.n	80064e8 <HAL_TIM_ConfigClockSource+0xe0>
 8006480:	2b60      	cmp	r3, #96	; 0x60
 8006482:	d041      	beq.n	8006508 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006484:	e06a      	b.n	800655c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800648a:	d066      	beq.n	800655a <HAL_TIM_ConfigClockSource+0x152>
 800648c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006490:	d017      	beq.n	80064c2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006492:	e063      	b.n	800655c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6818      	ldr	r0, [r3, #0]
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	6899      	ldr	r1, [r3, #8]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	685a      	ldr	r2, [r3, #4]
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	f000 fc0a 	bl	8006cbc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80064b6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	609a      	str	r2, [r3, #8]
      break;
 80064c0:	e04c      	b.n	800655c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6818      	ldr	r0, [r3, #0]
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	6899      	ldr	r1, [r3, #8]
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	685a      	ldr	r2, [r3, #4]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	f000 fbf3 	bl	8006cbc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	689a      	ldr	r2, [r3, #8]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064e4:	609a      	str	r2, [r3, #8]
      break;
 80064e6:	e039      	b.n	800655c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6818      	ldr	r0, [r3, #0]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	6859      	ldr	r1, [r3, #4]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	461a      	mov	r2, r3
 80064f6:	f000 fb67 	bl	8006bc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2150      	movs	r1, #80	; 0x50
 8006500:	4618      	mov	r0, r3
 8006502:	f000 fbc0 	bl	8006c86 <TIM_ITRx_SetConfig>
      break;
 8006506:	e029      	b.n	800655c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6818      	ldr	r0, [r3, #0]
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	6859      	ldr	r1, [r3, #4]
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	461a      	mov	r2, r3
 8006516:	f000 fb86 	bl	8006c26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2160      	movs	r1, #96	; 0x60
 8006520:	4618      	mov	r0, r3
 8006522:	f000 fbb0 	bl	8006c86 <TIM_ITRx_SetConfig>
      break;
 8006526:	e019      	b.n	800655c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6818      	ldr	r0, [r3, #0]
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	6859      	ldr	r1, [r3, #4]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	461a      	mov	r2, r3
 8006536:	f000 fb47 	bl	8006bc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2140      	movs	r1, #64	; 0x40
 8006540:	4618      	mov	r0, r3
 8006542:	f000 fba0 	bl	8006c86 <TIM_ITRx_SetConfig>
      break;
 8006546:	e009      	b.n	800655c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4619      	mov	r1, r3
 8006552:	4610      	mov	r0, r2
 8006554:	f000 fb97 	bl	8006c86 <TIM_ITRx_SetConfig>
      break;
 8006558:	e000      	b.n	800655c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800655a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	fffeff88 	.word	0xfffeff88

0800657c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006584:	bf00      	nop
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a40      	ldr	r2, [pc, #256]	; (80066e0 <TIM_Base_SetConfig+0x114>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d013      	beq.n	800660c <TIM_Base_SetConfig+0x40>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ea:	d00f      	beq.n	800660c <TIM_Base_SetConfig+0x40>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a3d      	ldr	r2, [pc, #244]	; (80066e4 <TIM_Base_SetConfig+0x118>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d00b      	beq.n	800660c <TIM_Base_SetConfig+0x40>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a3c      	ldr	r2, [pc, #240]	; (80066e8 <TIM_Base_SetConfig+0x11c>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d007      	beq.n	800660c <TIM_Base_SetConfig+0x40>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a3b      	ldr	r2, [pc, #236]	; (80066ec <TIM_Base_SetConfig+0x120>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d003      	beq.n	800660c <TIM_Base_SetConfig+0x40>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a3a      	ldr	r2, [pc, #232]	; (80066f0 <TIM_Base_SetConfig+0x124>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d108      	bne.n	800661e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	4313      	orrs	r3, r2
 800661c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a2f      	ldr	r2, [pc, #188]	; (80066e0 <TIM_Base_SetConfig+0x114>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d02b      	beq.n	800667e <TIM_Base_SetConfig+0xb2>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800662c:	d027      	beq.n	800667e <TIM_Base_SetConfig+0xb2>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a2c      	ldr	r2, [pc, #176]	; (80066e4 <TIM_Base_SetConfig+0x118>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d023      	beq.n	800667e <TIM_Base_SetConfig+0xb2>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a2b      	ldr	r2, [pc, #172]	; (80066e8 <TIM_Base_SetConfig+0x11c>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d01f      	beq.n	800667e <TIM_Base_SetConfig+0xb2>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a2a      	ldr	r2, [pc, #168]	; (80066ec <TIM_Base_SetConfig+0x120>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d01b      	beq.n	800667e <TIM_Base_SetConfig+0xb2>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a29      	ldr	r2, [pc, #164]	; (80066f0 <TIM_Base_SetConfig+0x124>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d017      	beq.n	800667e <TIM_Base_SetConfig+0xb2>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a28      	ldr	r2, [pc, #160]	; (80066f4 <TIM_Base_SetConfig+0x128>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d013      	beq.n	800667e <TIM_Base_SetConfig+0xb2>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a27      	ldr	r2, [pc, #156]	; (80066f8 <TIM_Base_SetConfig+0x12c>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d00f      	beq.n	800667e <TIM_Base_SetConfig+0xb2>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a26      	ldr	r2, [pc, #152]	; (80066fc <TIM_Base_SetConfig+0x130>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d00b      	beq.n	800667e <TIM_Base_SetConfig+0xb2>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a25      	ldr	r2, [pc, #148]	; (8006700 <TIM_Base_SetConfig+0x134>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d007      	beq.n	800667e <TIM_Base_SetConfig+0xb2>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a24      	ldr	r2, [pc, #144]	; (8006704 <TIM_Base_SetConfig+0x138>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d003      	beq.n	800667e <TIM_Base_SetConfig+0xb2>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a23      	ldr	r2, [pc, #140]	; (8006708 <TIM_Base_SetConfig+0x13c>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d108      	bne.n	8006690 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	4313      	orrs	r3, r2
 800668e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	4313      	orrs	r3, r2
 800669c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	689a      	ldr	r2, [r3, #8]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a0a      	ldr	r2, [pc, #40]	; (80066e0 <TIM_Base_SetConfig+0x114>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d003      	beq.n	80066c4 <TIM_Base_SetConfig+0xf8>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a0c      	ldr	r2, [pc, #48]	; (80066f0 <TIM_Base_SetConfig+0x124>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d103      	bne.n	80066cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	691a      	ldr	r2, [r3, #16]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	615a      	str	r2, [r3, #20]
}
 80066d2:	bf00      	nop
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	40010000 	.word	0x40010000
 80066e4:	40000400 	.word	0x40000400
 80066e8:	40000800 	.word	0x40000800
 80066ec:	40000c00 	.word	0x40000c00
 80066f0:	40010400 	.word	0x40010400
 80066f4:	40014000 	.word	0x40014000
 80066f8:	40014400 	.word	0x40014400
 80066fc:	40014800 	.word	0x40014800
 8006700:	40001800 	.word	0x40001800
 8006704:	40001c00 	.word	0x40001c00
 8006708:	40002000 	.word	0x40002000

0800670c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800670c:	b480      	push	{r7}
 800670e:	b087      	sub	sp, #28
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	f023 0201 	bic.w	r2, r3, #1
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	4b2b      	ldr	r3, [pc, #172]	; (80067e4 <TIM_OC1_SetConfig+0xd8>)
 8006738:	4013      	ands	r3, r2
 800673a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f023 0303 	bic.w	r3, r3, #3
 8006742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	4313      	orrs	r3, r2
 800674c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f023 0302 	bic.w	r3, r3, #2
 8006754:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	4313      	orrs	r3, r2
 800675e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a21      	ldr	r2, [pc, #132]	; (80067e8 <TIM_OC1_SetConfig+0xdc>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d003      	beq.n	8006770 <TIM_OC1_SetConfig+0x64>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a20      	ldr	r2, [pc, #128]	; (80067ec <TIM_OC1_SetConfig+0xe0>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d10c      	bne.n	800678a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	f023 0308 	bic.w	r3, r3, #8
 8006776:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	4313      	orrs	r3, r2
 8006780:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f023 0304 	bic.w	r3, r3, #4
 8006788:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a16      	ldr	r2, [pc, #88]	; (80067e8 <TIM_OC1_SetConfig+0xdc>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d003      	beq.n	800679a <TIM_OC1_SetConfig+0x8e>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a15      	ldr	r2, [pc, #84]	; (80067ec <TIM_OC1_SetConfig+0xe0>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d111      	bne.n	80067be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	693a      	ldr	r2, [r7, #16]
 80067c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	685a      	ldr	r2, [r3, #4]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	697a      	ldr	r2, [r7, #20]
 80067d6:	621a      	str	r2, [r3, #32]
}
 80067d8:	bf00      	nop
 80067da:	371c      	adds	r7, #28
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr
 80067e4:	fffeff8f 	.word	0xfffeff8f
 80067e8:	40010000 	.word	0x40010000
 80067ec:	40010400 	.word	0x40010400

080067f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b087      	sub	sp, #28
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	f023 0210 	bic.w	r2, r3, #16
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	4b2e      	ldr	r3, [pc, #184]	; (80068d4 <TIM_OC2_SetConfig+0xe4>)
 800681c:	4013      	ands	r3, r2
 800681e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006826:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	021b      	lsls	r3, r3, #8
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	4313      	orrs	r3, r2
 8006832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	f023 0320 	bic.w	r3, r3, #32
 800683a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	011b      	lsls	r3, r3, #4
 8006842:	697a      	ldr	r2, [r7, #20]
 8006844:	4313      	orrs	r3, r2
 8006846:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a23      	ldr	r2, [pc, #140]	; (80068d8 <TIM_OC2_SetConfig+0xe8>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d003      	beq.n	8006858 <TIM_OC2_SetConfig+0x68>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a22      	ldr	r2, [pc, #136]	; (80068dc <TIM_OC2_SetConfig+0xec>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d10d      	bne.n	8006874 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800685e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	011b      	lsls	r3, r3, #4
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	4313      	orrs	r3, r2
 800686a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006872:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a18      	ldr	r2, [pc, #96]	; (80068d8 <TIM_OC2_SetConfig+0xe8>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d003      	beq.n	8006884 <TIM_OC2_SetConfig+0x94>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a17      	ldr	r2, [pc, #92]	; (80068dc <TIM_OC2_SetConfig+0xec>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d113      	bne.n	80068ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800688a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006892:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	695b      	ldr	r3, [r3, #20]
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	4313      	orrs	r3, r2
 800689e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	693a      	ldr	r2, [r7, #16]
 80068b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	685a      	ldr	r2, [r3, #4]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	621a      	str	r2, [r3, #32]
}
 80068c6:	bf00      	nop
 80068c8:	371c      	adds	r7, #28
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	feff8fff 	.word	0xfeff8fff
 80068d8:	40010000 	.word	0x40010000
 80068dc:	40010400 	.word	0x40010400

080068e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b087      	sub	sp, #28
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	69db      	ldr	r3, [r3, #28]
 8006906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	4b2d      	ldr	r3, [pc, #180]	; (80069c0 <TIM_OC3_SetConfig+0xe0>)
 800690c:	4013      	ands	r3, r2
 800690e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f023 0303 	bic.w	r3, r3, #3
 8006916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	4313      	orrs	r3, r2
 8006920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006928:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	021b      	lsls	r3, r3, #8
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	4313      	orrs	r3, r2
 8006934:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a22      	ldr	r2, [pc, #136]	; (80069c4 <TIM_OC3_SetConfig+0xe4>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d003      	beq.n	8006946 <TIM_OC3_SetConfig+0x66>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a21      	ldr	r2, [pc, #132]	; (80069c8 <TIM_OC3_SetConfig+0xe8>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d10d      	bne.n	8006962 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800694c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	021b      	lsls	r3, r3, #8
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	4313      	orrs	r3, r2
 8006958:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006960:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a17      	ldr	r2, [pc, #92]	; (80069c4 <TIM_OC3_SetConfig+0xe4>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d003      	beq.n	8006972 <TIM_OC3_SetConfig+0x92>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a16      	ldr	r2, [pc, #88]	; (80069c8 <TIM_OC3_SetConfig+0xe8>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d113      	bne.n	800699a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006978:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006980:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	011b      	lsls	r3, r3, #4
 8006988:	693a      	ldr	r2, [r7, #16]
 800698a:	4313      	orrs	r3, r2
 800698c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	011b      	lsls	r3, r3, #4
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	4313      	orrs	r3, r2
 8006998:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	685a      	ldr	r2, [r3, #4]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	621a      	str	r2, [r3, #32]
}
 80069b4:	bf00      	nop
 80069b6:	371c      	adds	r7, #28
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	fffeff8f 	.word	0xfffeff8f
 80069c4:	40010000 	.word	0x40010000
 80069c8:	40010400 	.word	0x40010400

080069cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b087      	sub	sp, #28
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a1b      	ldr	r3, [r3, #32]
 80069da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a1b      	ldr	r3, [r3, #32]
 80069e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	69db      	ldr	r3, [r3, #28]
 80069f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	4b1e      	ldr	r3, [pc, #120]	; (8006a70 <TIM_OC4_SetConfig+0xa4>)
 80069f8:	4013      	ands	r3, r2
 80069fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	021b      	lsls	r3, r3, #8
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	031b      	lsls	r3, r3, #12
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a13      	ldr	r2, [pc, #76]	; (8006a74 <TIM_OC4_SetConfig+0xa8>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d003      	beq.n	8006a34 <TIM_OC4_SetConfig+0x68>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a12      	ldr	r2, [pc, #72]	; (8006a78 <TIM_OC4_SetConfig+0xac>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d109      	bne.n	8006a48 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	695b      	ldr	r3, [r3, #20]
 8006a40:	019b      	lsls	r3, r3, #6
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	685a      	ldr	r2, [r3, #4]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	693a      	ldr	r2, [r7, #16]
 8006a60:	621a      	str	r2, [r3, #32]
}
 8006a62:	bf00      	nop
 8006a64:	371c      	adds	r7, #28
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	feff8fff 	.word	0xfeff8fff
 8006a74:	40010000 	.word	0x40010000
 8006a78:	40010400 	.word	0x40010400

08006a7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b087      	sub	sp, #28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	4b1b      	ldr	r3, [pc, #108]	; (8006b14 <TIM_OC5_SetConfig+0x98>)
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006abc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	041b      	lsls	r3, r3, #16
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a12      	ldr	r2, [pc, #72]	; (8006b18 <TIM_OC5_SetConfig+0x9c>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d003      	beq.n	8006ada <TIM_OC5_SetConfig+0x5e>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a11      	ldr	r2, [pc, #68]	; (8006b1c <TIM_OC5_SetConfig+0xa0>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d109      	bne.n	8006aee <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ae0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	021b      	lsls	r3, r3, #8
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	697a      	ldr	r2, [r7, #20]
 8006af2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	685a      	ldr	r2, [r3, #4]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	621a      	str	r2, [r3, #32]
}
 8006b08:	bf00      	nop
 8006b0a:	371c      	adds	r7, #28
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr
 8006b14:	fffeff8f 	.word	0xfffeff8f
 8006b18:	40010000 	.word	0x40010000
 8006b1c:	40010400 	.word	0x40010400

08006b20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b087      	sub	sp, #28
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	4b1c      	ldr	r3, [pc, #112]	; (8006bbc <TIM_OC6_SetConfig+0x9c>)
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	021b      	lsls	r3, r3, #8
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	051b      	lsls	r3, r3, #20
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a13      	ldr	r2, [pc, #76]	; (8006bc0 <TIM_OC6_SetConfig+0xa0>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d003      	beq.n	8006b80 <TIM_OC6_SetConfig+0x60>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a12      	ldr	r2, [pc, #72]	; (8006bc4 <TIM_OC6_SetConfig+0xa4>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d109      	bne.n	8006b94 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	695b      	ldr	r3, [r3, #20]
 8006b8c:	029b      	lsls	r3, r3, #10
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	685a      	ldr	r2, [r3, #4]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	621a      	str	r2, [r3, #32]
}
 8006bae:	bf00      	nop
 8006bb0:	371c      	adds	r7, #28
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	feff8fff 	.word	0xfeff8fff
 8006bc0:	40010000 	.word	0x40010000
 8006bc4:	40010400 	.word	0x40010400

08006bc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b087      	sub	sp, #28
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6a1b      	ldr	r3, [r3, #32]
 8006bd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	f023 0201 	bic.w	r2, r3, #1
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	011b      	lsls	r3, r3, #4
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f023 030a 	bic.w	r3, r3, #10
 8006c04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	621a      	str	r2, [r3, #32]
}
 8006c1a:	bf00      	nop
 8006c1c:	371c      	adds	r7, #28
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b087      	sub	sp, #28
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	60f8      	str	r0, [r7, #12]
 8006c2e:	60b9      	str	r1, [r7, #8]
 8006c30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	f023 0210 	bic.w	r2, r3, #16
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6a1b      	ldr	r3, [r3, #32]
 8006c48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	031b      	lsls	r3, r3, #12
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	011b      	lsls	r3, r3, #4
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	621a      	str	r2, [r3, #32]
}
 8006c7a:	bf00      	nop
 8006c7c:	371c      	adds	r7, #28
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr

08006c86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c86:	b480      	push	{r7}
 8006c88:	b085      	sub	sp, #20
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
 8006c8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c9e:	683a      	ldr	r2, [r7, #0]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	f043 0307 	orr.w	r3, r3, #7
 8006ca8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	609a      	str	r2, [r3, #8]
}
 8006cb0:	bf00      	nop
 8006cb2:	3714      	adds	r7, #20
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b087      	sub	sp, #28
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
 8006cc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	021a      	lsls	r2, r3, #8
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	431a      	orrs	r2, r3
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	697a      	ldr	r2, [r7, #20]
 8006cee:	609a      	str	r2, [r3, #8]
}
 8006cf0:	bf00      	nop
 8006cf2:	371c      	adds	r7, #28
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b087      	sub	sp, #28
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	f003 031f 	and.w	r3, r3, #31
 8006d0e:	2201      	movs	r2, #1
 8006d10:	fa02 f303 	lsl.w	r3, r2, r3
 8006d14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6a1a      	ldr	r2, [r3, #32]
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	43db      	mvns	r3, r3
 8006d1e:	401a      	ands	r2, r3
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6a1a      	ldr	r2, [r3, #32]
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	f003 031f 	and.w	r3, r3, #31
 8006d2e:	6879      	ldr	r1, [r7, #4]
 8006d30:	fa01 f303 	lsl.w	r3, r1, r3
 8006d34:	431a      	orrs	r2, r3
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	621a      	str	r2, [r3, #32]
}
 8006d3a:	bf00      	nop
 8006d3c:	371c      	adds	r7, #28
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
	...

08006d48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d101      	bne.n	8006d60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	e06d      	b.n	8006e3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a30      	ldr	r2, [pc, #192]	; (8006e48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d004      	beq.n	8006d94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a2f      	ldr	r2, [pc, #188]	; (8006e4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d108      	bne.n	8006da6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006d9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a20      	ldr	r2, [pc, #128]	; (8006e48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d022      	beq.n	8006e10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dd2:	d01d      	beq.n	8006e10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a1d      	ldr	r2, [pc, #116]	; (8006e50 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d018      	beq.n	8006e10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a1c      	ldr	r2, [pc, #112]	; (8006e54 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d013      	beq.n	8006e10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a1a      	ldr	r2, [pc, #104]	; (8006e58 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d00e      	beq.n	8006e10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a15      	ldr	r2, [pc, #84]	; (8006e4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d009      	beq.n	8006e10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a16      	ldr	r2, [pc, #88]	; (8006e5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d004      	beq.n	8006e10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a15      	ldr	r2, [pc, #84]	; (8006e60 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d10c      	bne.n	8006e2a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	68ba      	ldr	r2, [r7, #8]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68ba      	ldr	r2, [r7, #8]
 8006e28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3714      	adds	r7, #20
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr
 8006e48:	40010000 	.word	0x40010000
 8006e4c:	40010400 	.word	0x40010400
 8006e50:	40000400 	.word	0x40000400
 8006e54:	40000800 	.word	0x40000800
 8006e58:	40000c00 	.word	0x40000c00
 8006e5c:	40014000 	.word	0x40014000
 8006e60:	40001800 	.word	0x40001800

08006e64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d101      	bne.n	8006e80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e7c:	2302      	movs	r3, #2
 8006e7e:	e065      	b.n	8006f4c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	695b      	ldr	r3, [r3, #20]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	699b      	ldr	r3, [r3, #24]
 8006ef4:	041b      	lsls	r3, r3, #16
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a16      	ldr	r2, [pc, #88]	; (8006f58 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d004      	beq.n	8006f0e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a14      	ldr	r2, [pc, #80]	; (8006f5c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d115      	bne.n	8006f3a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f18:	051b      	lsls	r3, r3, #20
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	69db      	ldr	r3, [r3, #28]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3714      	adds	r7, #20
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr
 8006f58:	40010000 	.word	0x40010000
 8006f5c:	40010400 	.word	0x40010400

08006f60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f68:	bf00      	nop
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f7c:	bf00      	nop
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006f90:	bf00      	nop
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d101      	bne.n	8006fae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e040      	b.n	8007030 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d106      	bne.n	8006fc4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f7fc fb5a 	bl	8003678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2224      	movs	r2, #36	; 0x24
 8006fc8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f022 0201 	bic.w	r2, r2, #1
 8006fd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 fac4 	bl	8007568 <UART_SetConfig>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d101      	bne.n	8006fea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e022      	b.n	8007030 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d002      	beq.n	8006ff8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fd62 	bl	8007abc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	685a      	ldr	r2, [r3, #4]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007006:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	689a      	ldr	r2, [r3, #8]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007016:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f042 0201 	orr.w	r2, r2, #1
 8007026:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 fde9 	bl	8007c00 <UART_CheckIdleState>
 800702e:	4603      	mov	r3, r0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b08a      	sub	sp, #40	; 0x28
 800703c:	af02      	add	r7, sp, #8
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	603b      	str	r3, [r7, #0]
 8007044:	4613      	mov	r3, r2
 8007046:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800704c:	2b20      	cmp	r3, #32
 800704e:	d17f      	bne.n	8007150 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d002      	beq.n	800705c <HAL_UART_Transmit+0x24>
 8007056:	88fb      	ldrh	r3, [r7, #6]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d101      	bne.n	8007060 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e078      	b.n	8007152 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007066:	2b01      	cmp	r3, #1
 8007068:	d101      	bne.n	800706e <HAL_UART_Transmit+0x36>
 800706a:	2302      	movs	r3, #2
 800706c:	e071      	b.n	8007152 <HAL_UART_Transmit+0x11a>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2221      	movs	r2, #33	; 0x21
 8007080:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007082:	f7fc fd29 	bl	8003ad8 <HAL_GetTick>
 8007086:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	88fa      	ldrh	r2, [r7, #6]
 800708c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	88fa      	ldrh	r2, [r7, #6]
 8007094:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070a0:	d108      	bne.n	80070b4 <HAL_UART_Transmit+0x7c>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d104      	bne.n	80070b4 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80070aa:	2300      	movs	r3, #0
 80070ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	61bb      	str	r3, [r7, #24]
 80070b2:	e003      	b.n	80070bc <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070b8:	2300      	movs	r3, #0
 80070ba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80070c4:	e02c      	b.n	8007120 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	9300      	str	r3, [sp, #0]
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	2200      	movs	r2, #0
 80070ce:	2180      	movs	r1, #128	; 0x80
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f000 fdda 	bl	8007c8a <UART_WaitOnFlagUntilTimeout>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d001      	beq.n	80070e0 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e038      	b.n	8007152 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10b      	bne.n	80070fe <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	881b      	ldrh	r3, [r3, #0]
 80070ea:	461a      	mov	r2, r3
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	3302      	adds	r3, #2
 80070fa:	61bb      	str	r3, [r7, #24]
 80070fc:	e007      	b.n	800710e <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	781a      	ldrb	r2, [r3, #0]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	3301      	adds	r3, #1
 800710c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007114:	b29b      	uxth	r3, r3
 8007116:	3b01      	subs	r3, #1
 8007118:	b29a      	uxth	r2, r3
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007126:	b29b      	uxth	r3, r3
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1cc      	bne.n	80070c6 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	9300      	str	r3, [sp, #0]
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	2200      	movs	r2, #0
 8007134:	2140      	movs	r1, #64	; 0x40
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f000 fda7 	bl	8007c8a <UART_WaitOnFlagUntilTimeout>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e005      	b.n	8007152 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2220      	movs	r2, #32
 800714a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800714c:	2300      	movs	r3, #0
 800714e:	e000      	b.n	8007152 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8007150:	2302      	movs	r3, #2
  }
}
 8007152:	4618      	mov	r0, r3
 8007154:	3720      	adds	r7, #32
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
	...

0800715c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	4613      	mov	r3, r2
 8007168:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800716e:	2b20      	cmp	r3, #32
 8007170:	f040 808a 	bne.w	8007288 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d002      	beq.n	8007180 <HAL_UART_Receive_IT+0x24>
 800717a:	88fb      	ldrh	r3, [r7, #6]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d101      	bne.n	8007184 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	e082      	b.n	800728a <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800718a:	2b01      	cmp	r3, #1
 800718c:	d101      	bne.n	8007192 <HAL_UART_Receive_IT+0x36>
 800718e:	2302      	movs	r3, #2
 8007190:	e07b      	b.n	800728a <HAL_UART_Receive_IT+0x12e>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2201      	movs	r2, #1
 8007196:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	68ba      	ldr	r2, [r7, #8]
 800719e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	88fa      	ldrh	r2, [r7, #6]
 80071a4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	88fa      	ldrh	r2, [r7, #6]
 80071ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071be:	d10e      	bne.n	80071de <HAL_UART_Receive_IT+0x82>
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	691b      	ldr	r3, [r3, #16]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d105      	bne.n	80071d4 <HAL_UART_Receive_IT+0x78>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 80071ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071d2:	e02d      	b.n	8007230 <HAL_UART_Receive_IT+0xd4>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	22ff      	movs	r2, #255	; 0xff
 80071d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071dc:	e028      	b.n	8007230 <HAL_UART_Receive_IT+0xd4>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10d      	bne.n	8007202 <HAL_UART_Receive_IT+0xa6>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d104      	bne.n	80071f8 <HAL_UART_Receive_IT+0x9c>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	22ff      	movs	r2, #255	; 0xff
 80071f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071f6:	e01b      	b.n	8007230 <HAL_UART_Receive_IT+0xd4>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	227f      	movs	r2, #127	; 0x7f
 80071fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007200:	e016      	b.n	8007230 <HAL_UART_Receive_IT+0xd4>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800720a:	d10d      	bne.n	8007228 <HAL_UART_Receive_IT+0xcc>
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d104      	bne.n	800721e <HAL_UART_Receive_IT+0xc2>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	227f      	movs	r2, #127	; 0x7f
 8007218:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800721c:	e008      	b.n	8007230 <HAL_UART_Receive_IT+0xd4>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	223f      	movs	r2, #63	; 0x3f
 8007222:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007226:	e003      	b.n	8007230 <HAL_UART_Receive_IT+0xd4>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2200      	movs	r2, #0
 8007234:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2222      	movs	r2, #34	; 0x22
 800723a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	689a      	ldr	r2, [r3, #8]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f042 0201 	orr.w	r2, r2, #1
 800724a:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007254:	d107      	bne.n	8007266 <HAL_UART_Receive_IT+0x10a>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d103      	bne.n	8007266 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	4a0d      	ldr	r2, [pc, #52]	; (8007298 <HAL_UART_Receive_IT+0x13c>)
 8007262:	661a      	str	r2, [r3, #96]	; 0x60
 8007264:	e002      	b.n	800726c <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	4a0c      	ldr	r2, [pc, #48]	; (800729c <HAL_UART_Receive_IT+0x140>)
 800726a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8007282:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007284:	2300      	movs	r3, #0
 8007286:	e000      	b.n	800728a <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8007288:	2302      	movs	r3, #2
  }
}
 800728a:	4618      	mov	r0, r3
 800728c:	3714      	adds	r7, #20
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop
 8007298:	08007ec5 	.word	0x08007ec5
 800729c:	08007e1f 	.word	0x08007e1f

080072a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b088      	sub	sp, #32
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	69db      	ldr	r3, [r3, #28]
 80072ae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80072c0:	69fa      	ldr	r2, [r7, #28]
 80072c2:	f640 030f 	movw	r3, #2063	; 0x80f
 80072c6:	4013      	ands	r3, r2
 80072c8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d113      	bne.n	80072f8 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	f003 0320 	and.w	r3, r3, #32
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00e      	beq.n	80072f8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	f003 0320 	and.w	r3, r3, #32
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d009      	beq.n	80072f8 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f000 8114 	beq.w	8007516 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	4798      	blx	r3
      }
      return;
 80072f6:	e10e      	b.n	8007516 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f000 80d6 	beq.w	80074ac <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	2b00      	cmp	r3, #0
 8007308:	d105      	bne.n	8007316 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007310:	2b00      	cmp	r3, #0
 8007312:	f000 80cb 	beq.w	80074ac <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	f003 0301 	and.w	r3, r3, #1
 800731c:	2b00      	cmp	r3, #0
 800731e:	d00e      	beq.n	800733e <HAL_UART_IRQHandler+0x9e>
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007326:	2b00      	cmp	r3, #0
 8007328:	d009      	beq.n	800733e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2201      	movs	r2, #1
 8007330:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007336:	f043 0201 	orr.w	r2, r3, #1
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	f003 0302 	and.w	r3, r3, #2
 8007344:	2b00      	cmp	r3, #0
 8007346:	d00e      	beq.n	8007366 <HAL_UART_IRQHandler+0xc6>
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	f003 0301 	and.w	r3, r3, #1
 800734e:	2b00      	cmp	r3, #0
 8007350:	d009      	beq.n	8007366 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2202      	movs	r2, #2
 8007358:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800735e:	f043 0204 	orr.w	r2, r3, #4
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	f003 0304 	and.w	r3, r3, #4
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00e      	beq.n	800738e <HAL_UART_IRQHandler+0xee>
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	2b00      	cmp	r3, #0
 8007378:	d009      	beq.n	800738e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2204      	movs	r2, #4
 8007380:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007386:	f043 0202 	orr.w	r2, r3, #2
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	f003 0308 	and.w	r3, r3, #8
 8007394:	2b00      	cmp	r3, #0
 8007396:	d013      	beq.n	80073c0 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	f003 0320 	and.w	r3, r3, #32
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d104      	bne.n	80073ac <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d009      	beq.n	80073c0 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2208      	movs	r2, #8
 80073b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073b8:	f043 0208 	orr.w	r2, r3, #8
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00f      	beq.n	80073ea <HAL_UART_IRQHandler+0x14a>
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00a      	beq.n	80073ea <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073e2:	f043 0220 	orr.w	r2, r3, #32
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	f000 8093 	beq.w	800751a <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	f003 0320 	and.w	r3, r3, #32
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00c      	beq.n	8007418 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	f003 0320 	and.w	r3, r3, #32
 8007404:	2b00      	cmp	r3, #0
 8007406:	d007      	beq.n	8007418 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800740c:	2b00      	cmp	r3, #0
 800740e:	d003      	beq.n	8007418 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800741c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007428:	2b40      	cmp	r3, #64	; 0x40
 800742a:	d004      	beq.n	8007436 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007432:	2b00      	cmp	r3, #0
 8007434:	d031      	beq.n	800749a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fca2 	bl	8007d80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007446:	2b40      	cmp	r3, #64	; 0x40
 8007448:	d123      	bne.n	8007492 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	689a      	ldr	r2, [r3, #8]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007458:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800745e:	2b00      	cmp	r3, #0
 8007460:	d013      	beq.n	800748a <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007466:	4a30      	ldr	r2, [pc, #192]	; (8007528 <HAL_UART_IRQHandler+0x288>)
 8007468:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800746e:	4618      	mov	r0, r3
 8007470:	f7fc fc42 	bl	8003cf8 <HAL_DMA_Abort_IT>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d016      	beq.n	80074a8 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800747e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007484:	4610      	mov	r0, r2
 8007486:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007488:	e00e      	b.n	80074a8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 f858 	bl	8007540 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007490:	e00a      	b.n	80074a8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f854 	bl	8007540 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007498:	e006      	b.n	80074a8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f850 	bl	8007540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80074a6:	e038      	b.n	800751a <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074a8:	bf00      	nop
    return;
 80074aa:	e036      	b.n	800751a <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00d      	beq.n	80074d2 <HAL_UART_IRQHandler+0x232>
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d008      	beq.n	80074d2 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80074c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 f842 	bl	8007554 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80074d0:	e026      	b.n	8007520 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00d      	beq.n	80074f8 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d008      	beq.n	80074f8 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d017      	beq.n	800751e <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	4798      	blx	r3
    }
    return;
 80074f6:	e012      	b.n	800751e <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00e      	beq.n	8007520 <HAL_UART_IRQHandler+0x280>
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007508:	2b00      	cmp	r3, #0
 800750a:	d009      	beq.n	8007520 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 fc6d 	bl	8007dec <UART_EndTransmit_IT>
    return;
 8007512:	bf00      	nop
 8007514:	e004      	b.n	8007520 <HAL_UART_IRQHandler+0x280>
      return;
 8007516:	bf00      	nop
 8007518:	e002      	b.n	8007520 <HAL_UART_IRQHandler+0x280>
    return;
 800751a:	bf00      	nop
 800751c:	e000      	b.n	8007520 <HAL_UART_IRQHandler+0x280>
    return;
 800751e:	bf00      	nop
  }

}
 8007520:	3720      	adds	r7, #32
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	08007dc1 	.word	0x08007dc1

0800752c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007534:	bf00      	nop
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007548:	bf00      	nop
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800755c:	bf00      	nop
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b088      	sub	sp, #32
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007570:	2300      	movs	r3, #0
 8007572:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007574:	2300      	movs	r3, #0
 8007576:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	689a      	ldr	r2, [r3, #8]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	691b      	ldr	r3, [r3, #16]
 8007580:	431a      	orrs	r2, r3
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	695b      	ldr	r3, [r3, #20]
 8007586:	431a      	orrs	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	69db      	ldr	r3, [r3, #28]
 800758c:	4313      	orrs	r3, r2
 800758e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	4bb1      	ldr	r3, [pc, #708]	; (800785c <UART_SetConfig+0x2f4>)
 8007598:	4013      	ands	r3, r2
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	6812      	ldr	r2, [r2, #0]
 800759e:	6939      	ldr	r1, [r7, #16]
 80075a0:	430b      	orrs	r3, r1
 80075a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	68da      	ldr	r2, [r3, #12]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	430a      	orrs	r2, r1
 80075b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	699b      	ldr	r3, [r3, #24]
 80075be:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a1b      	ldr	r3, [r3, #32]
 80075c4:	693a      	ldr	r2, [r7, #16]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	693a      	ldr	r2, [r7, #16]
 80075da:	430a      	orrs	r2, r1
 80075dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a9f      	ldr	r2, [pc, #636]	; (8007860 <UART_SetConfig+0x2f8>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d121      	bne.n	800762c <UART_SetConfig+0xc4>
 80075e8:	4b9e      	ldr	r3, [pc, #632]	; (8007864 <UART_SetConfig+0x2fc>)
 80075ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ee:	f003 0303 	and.w	r3, r3, #3
 80075f2:	2b03      	cmp	r3, #3
 80075f4:	d816      	bhi.n	8007624 <UART_SetConfig+0xbc>
 80075f6:	a201      	add	r2, pc, #4	; (adr r2, 80075fc <UART_SetConfig+0x94>)
 80075f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075fc:	0800760d 	.word	0x0800760d
 8007600:	08007619 	.word	0x08007619
 8007604:	08007613 	.word	0x08007613
 8007608:	0800761f 	.word	0x0800761f
 800760c:	2301      	movs	r3, #1
 800760e:	77fb      	strb	r3, [r7, #31]
 8007610:	e151      	b.n	80078b6 <UART_SetConfig+0x34e>
 8007612:	2302      	movs	r3, #2
 8007614:	77fb      	strb	r3, [r7, #31]
 8007616:	e14e      	b.n	80078b6 <UART_SetConfig+0x34e>
 8007618:	2304      	movs	r3, #4
 800761a:	77fb      	strb	r3, [r7, #31]
 800761c:	e14b      	b.n	80078b6 <UART_SetConfig+0x34e>
 800761e:	2308      	movs	r3, #8
 8007620:	77fb      	strb	r3, [r7, #31]
 8007622:	e148      	b.n	80078b6 <UART_SetConfig+0x34e>
 8007624:	2310      	movs	r3, #16
 8007626:	77fb      	strb	r3, [r7, #31]
 8007628:	bf00      	nop
 800762a:	e144      	b.n	80078b6 <UART_SetConfig+0x34e>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a8d      	ldr	r2, [pc, #564]	; (8007868 <UART_SetConfig+0x300>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d134      	bne.n	80076a0 <UART_SetConfig+0x138>
 8007636:	4b8b      	ldr	r3, [pc, #556]	; (8007864 <UART_SetConfig+0x2fc>)
 8007638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800763c:	f003 030c 	and.w	r3, r3, #12
 8007640:	2b0c      	cmp	r3, #12
 8007642:	d829      	bhi.n	8007698 <UART_SetConfig+0x130>
 8007644:	a201      	add	r2, pc, #4	; (adr r2, 800764c <UART_SetConfig+0xe4>)
 8007646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764a:	bf00      	nop
 800764c:	08007681 	.word	0x08007681
 8007650:	08007699 	.word	0x08007699
 8007654:	08007699 	.word	0x08007699
 8007658:	08007699 	.word	0x08007699
 800765c:	0800768d 	.word	0x0800768d
 8007660:	08007699 	.word	0x08007699
 8007664:	08007699 	.word	0x08007699
 8007668:	08007699 	.word	0x08007699
 800766c:	08007687 	.word	0x08007687
 8007670:	08007699 	.word	0x08007699
 8007674:	08007699 	.word	0x08007699
 8007678:	08007699 	.word	0x08007699
 800767c:	08007693 	.word	0x08007693
 8007680:	2300      	movs	r3, #0
 8007682:	77fb      	strb	r3, [r7, #31]
 8007684:	e117      	b.n	80078b6 <UART_SetConfig+0x34e>
 8007686:	2302      	movs	r3, #2
 8007688:	77fb      	strb	r3, [r7, #31]
 800768a:	e114      	b.n	80078b6 <UART_SetConfig+0x34e>
 800768c:	2304      	movs	r3, #4
 800768e:	77fb      	strb	r3, [r7, #31]
 8007690:	e111      	b.n	80078b6 <UART_SetConfig+0x34e>
 8007692:	2308      	movs	r3, #8
 8007694:	77fb      	strb	r3, [r7, #31]
 8007696:	e10e      	b.n	80078b6 <UART_SetConfig+0x34e>
 8007698:	2310      	movs	r3, #16
 800769a:	77fb      	strb	r3, [r7, #31]
 800769c:	bf00      	nop
 800769e:	e10a      	b.n	80078b6 <UART_SetConfig+0x34e>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a71      	ldr	r2, [pc, #452]	; (800786c <UART_SetConfig+0x304>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d120      	bne.n	80076ec <UART_SetConfig+0x184>
 80076aa:	4b6e      	ldr	r3, [pc, #440]	; (8007864 <UART_SetConfig+0x2fc>)
 80076ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80076b4:	2b10      	cmp	r3, #16
 80076b6:	d00f      	beq.n	80076d8 <UART_SetConfig+0x170>
 80076b8:	2b10      	cmp	r3, #16
 80076ba:	d802      	bhi.n	80076c2 <UART_SetConfig+0x15a>
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d005      	beq.n	80076cc <UART_SetConfig+0x164>
 80076c0:	e010      	b.n	80076e4 <UART_SetConfig+0x17c>
 80076c2:	2b20      	cmp	r3, #32
 80076c4:	d005      	beq.n	80076d2 <UART_SetConfig+0x16a>
 80076c6:	2b30      	cmp	r3, #48	; 0x30
 80076c8:	d009      	beq.n	80076de <UART_SetConfig+0x176>
 80076ca:	e00b      	b.n	80076e4 <UART_SetConfig+0x17c>
 80076cc:	2300      	movs	r3, #0
 80076ce:	77fb      	strb	r3, [r7, #31]
 80076d0:	e0f1      	b.n	80078b6 <UART_SetConfig+0x34e>
 80076d2:	2302      	movs	r3, #2
 80076d4:	77fb      	strb	r3, [r7, #31]
 80076d6:	e0ee      	b.n	80078b6 <UART_SetConfig+0x34e>
 80076d8:	2304      	movs	r3, #4
 80076da:	77fb      	strb	r3, [r7, #31]
 80076dc:	e0eb      	b.n	80078b6 <UART_SetConfig+0x34e>
 80076de:	2308      	movs	r3, #8
 80076e0:	77fb      	strb	r3, [r7, #31]
 80076e2:	e0e8      	b.n	80078b6 <UART_SetConfig+0x34e>
 80076e4:	2310      	movs	r3, #16
 80076e6:	77fb      	strb	r3, [r7, #31]
 80076e8:	bf00      	nop
 80076ea:	e0e4      	b.n	80078b6 <UART_SetConfig+0x34e>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a5f      	ldr	r2, [pc, #380]	; (8007870 <UART_SetConfig+0x308>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d120      	bne.n	8007738 <UART_SetConfig+0x1d0>
 80076f6:	4b5b      	ldr	r3, [pc, #364]	; (8007864 <UART_SetConfig+0x2fc>)
 80076f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007700:	2b40      	cmp	r3, #64	; 0x40
 8007702:	d00f      	beq.n	8007724 <UART_SetConfig+0x1bc>
 8007704:	2b40      	cmp	r3, #64	; 0x40
 8007706:	d802      	bhi.n	800770e <UART_SetConfig+0x1a6>
 8007708:	2b00      	cmp	r3, #0
 800770a:	d005      	beq.n	8007718 <UART_SetConfig+0x1b0>
 800770c:	e010      	b.n	8007730 <UART_SetConfig+0x1c8>
 800770e:	2b80      	cmp	r3, #128	; 0x80
 8007710:	d005      	beq.n	800771e <UART_SetConfig+0x1b6>
 8007712:	2bc0      	cmp	r3, #192	; 0xc0
 8007714:	d009      	beq.n	800772a <UART_SetConfig+0x1c2>
 8007716:	e00b      	b.n	8007730 <UART_SetConfig+0x1c8>
 8007718:	2300      	movs	r3, #0
 800771a:	77fb      	strb	r3, [r7, #31]
 800771c:	e0cb      	b.n	80078b6 <UART_SetConfig+0x34e>
 800771e:	2302      	movs	r3, #2
 8007720:	77fb      	strb	r3, [r7, #31]
 8007722:	e0c8      	b.n	80078b6 <UART_SetConfig+0x34e>
 8007724:	2304      	movs	r3, #4
 8007726:	77fb      	strb	r3, [r7, #31]
 8007728:	e0c5      	b.n	80078b6 <UART_SetConfig+0x34e>
 800772a:	2308      	movs	r3, #8
 800772c:	77fb      	strb	r3, [r7, #31]
 800772e:	e0c2      	b.n	80078b6 <UART_SetConfig+0x34e>
 8007730:	2310      	movs	r3, #16
 8007732:	77fb      	strb	r3, [r7, #31]
 8007734:	bf00      	nop
 8007736:	e0be      	b.n	80078b6 <UART_SetConfig+0x34e>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a4d      	ldr	r2, [pc, #308]	; (8007874 <UART_SetConfig+0x30c>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d124      	bne.n	800778c <UART_SetConfig+0x224>
 8007742:	4b48      	ldr	r3, [pc, #288]	; (8007864 <UART_SetConfig+0x2fc>)
 8007744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007748:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800774c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007750:	d012      	beq.n	8007778 <UART_SetConfig+0x210>
 8007752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007756:	d802      	bhi.n	800775e <UART_SetConfig+0x1f6>
 8007758:	2b00      	cmp	r3, #0
 800775a:	d007      	beq.n	800776c <UART_SetConfig+0x204>
 800775c:	e012      	b.n	8007784 <UART_SetConfig+0x21c>
 800775e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007762:	d006      	beq.n	8007772 <UART_SetConfig+0x20a>
 8007764:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007768:	d009      	beq.n	800777e <UART_SetConfig+0x216>
 800776a:	e00b      	b.n	8007784 <UART_SetConfig+0x21c>
 800776c:	2300      	movs	r3, #0
 800776e:	77fb      	strb	r3, [r7, #31]
 8007770:	e0a1      	b.n	80078b6 <UART_SetConfig+0x34e>
 8007772:	2302      	movs	r3, #2
 8007774:	77fb      	strb	r3, [r7, #31]
 8007776:	e09e      	b.n	80078b6 <UART_SetConfig+0x34e>
 8007778:	2304      	movs	r3, #4
 800777a:	77fb      	strb	r3, [r7, #31]
 800777c:	e09b      	b.n	80078b6 <UART_SetConfig+0x34e>
 800777e:	2308      	movs	r3, #8
 8007780:	77fb      	strb	r3, [r7, #31]
 8007782:	e098      	b.n	80078b6 <UART_SetConfig+0x34e>
 8007784:	2310      	movs	r3, #16
 8007786:	77fb      	strb	r3, [r7, #31]
 8007788:	bf00      	nop
 800778a:	e094      	b.n	80078b6 <UART_SetConfig+0x34e>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a39      	ldr	r2, [pc, #228]	; (8007878 <UART_SetConfig+0x310>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d124      	bne.n	80077e0 <UART_SetConfig+0x278>
 8007796:	4b33      	ldr	r3, [pc, #204]	; (8007864 <UART_SetConfig+0x2fc>)
 8007798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800779c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80077a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077a4:	d012      	beq.n	80077cc <UART_SetConfig+0x264>
 80077a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077aa:	d802      	bhi.n	80077b2 <UART_SetConfig+0x24a>
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d007      	beq.n	80077c0 <UART_SetConfig+0x258>
 80077b0:	e012      	b.n	80077d8 <UART_SetConfig+0x270>
 80077b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077b6:	d006      	beq.n	80077c6 <UART_SetConfig+0x25e>
 80077b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80077bc:	d009      	beq.n	80077d2 <UART_SetConfig+0x26a>
 80077be:	e00b      	b.n	80077d8 <UART_SetConfig+0x270>
 80077c0:	2301      	movs	r3, #1
 80077c2:	77fb      	strb	r3, [r7, #31]
 80077c4:	e077      	b.n	80078b6 <UART_SetConfig+0x34e>
 80077c6:	2302      	movs	r3, #2
 80077c8:	77fb      	strb	r3, [r7, #31]
 80077ca:	e074      	b.n	80078b6 <UART_SetConfig+0x34e>
 80077cc:	2304      	movs	r3, #4
 80077ce:	77fb      	strb	r3, [r7, #31]
 80077d0:	e071      	b.n	80078b6 <UART_SetConfig+0x34e>
 80077d2:	2308      	movs	r3, #8
 80077d4:	77fb      	strb	r3, [r7, #31]
 80077d6:	e06e      	b.n	80078b6 <UART_SetConfig+0x34e>
 80077d8:	2310      	movs	r3, #16
 80077da:	77fb      	strb	r3, [r7, #31]
 80077dc:	bf00      	nop
 80077de:	e06a      	b.n	80078b6 <UART_SetConfig+0x34e>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a25      	ldr	r2, [pc, #148]	; (800787c <UART_SetConfig+0x314>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d124      	bne.n	8007834 <UART_SetConfig+0x2cc>
 80077ea:	4b1e      	ldr	r3, [pc, #120]	; (8007864 <UART_SetConfig+0x2fc>)
 80077ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077f0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80077f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077f8:	d012      	beq.n	8007820 <UART_SetConfig+0x2b8>
 80077fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077fe:	d802      	bhi.n	8007806 <UART_SetConfig+0x29e>
 8007800:	2b00      	cmp	r3, #0
 8007802:	d007      	beq.n	8007814 <UART_SetConfig+0x2ac>
 8007804:	e012      	b.n	800782c <UART_SetConfig+0x2c4>
 8007806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800780a:	d006      	beq.n	800781a <UART_SetConfig+0x2b2>
 800780c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007810:	d009      	beq.n	8007826 <UART_SetConfig+0x2be>
 8007812:	e00b      	b.n	800782c <UART_SetConfig+0x2c4>
 8007814:	2300      	movs	r3, #0
 8007816:	77fb      	strb	r3, [r7, #31]
 8007818:	e04d      	b.n	80078b6 <UART_SetConfig+0x34e>
 800781a:	2302      	movs	r3, #2
 800781c:	77fb      	strb	r3, [r7, #31]
 800781e:	e04a      	b.n	80078b6 <UART_SetConfig+0x34e>
 8007820:	2304      	movs	r3, #4
 8007822:	77fb      	strb	r3, [r7, #31]
 8007824:	e047      	b.n	80078b6 <UART_SetConfig+0x34e>
 8007826:	2308      	movs	r3, #8
 8007828:	77fb      	strb	r3, [r7, #31]
 800782a:	e044      	b.n	80078b6 <UART_SetConfig+0x34e>
 800782c:	2310      	movs	r3, #16
 800782e:	77fb      	strb	r3, [r7, #31]
 8007830:	bf00      	nop
 8007832:	e040      	b.n	80078b6 <UART_SetConfig+0x34e>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a11      	ldr	r2, [pc, #68]	; (8007880 <UART_SetConfig+0x318>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d139      	bne.n	80078b2 <UART_SetConfig+0x34a>
 800783e:	4b09      	ldr	r3, [pc, #36]	; (8007864 <UART_SetConfig+0x2fc>)
 8007840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007844:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007848:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800784c:	d027      	beq.n	800789e <UART_SetConfig+0x336>
 800784e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007852:	d817      	bhi.n	8007884 <UART_SetConfig+0x31c>
 8007854:	2b00      	cmp	r3, #0
 8007856:	d01c      	beq.n	8007892 <UART_SetConfig+0x32a>
 8007858:	e027      	b.n	80078aa <UART_SetConfig+0x342>
 800785a:	bf00      	nop
 800785c:	efff69f3 	.word	0xefff69f3
 8007860:	40011000 	.word	0x40011000
 8007864:	40023800 	.word	0x40023800
 8007868:	40004400 	.word	0x40004400
 800786c:	40004800 	.word	0x40004800
 8007870:	40004c00 	.word	0x40004c00
 8007874:	40005000 	.word	0x40005000
 8007878:	40011400 	.word	0x40011400
 800787c:	40007800 	.word	0x40007800
 8007880:	40007c00 	.word	0x40007c00
 8007884:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007888:	d006      	beq.n	8007898 <UART_SetConfig+0x330>
 800788a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800788e:	d009      	beq.n	80078a4 <UART_SetConfig+0x33c>
 8007890:	e00b      	b.n	80078aa <UART_SetConfig+0x342>
 8007892:	2300      	movs	r3, #0
 8007894:	77fb      	strb	r3, [r7, #31]
 8007896:	e00e      	b.n	80078b6 <UART_SetConfig+0x34e>
 8007898:	2302      	movs	r3, #2
 800789a:	77fb      	strb	r3, [r7, #31]
 800789c:	e00b      	b.n	80078b6 <UART_SetConfig+0x34e>
 800789e:	2304      	movs	r3, #4
 80078a0:	77fb      	strb	r3, [r7, #31]
 80078a2:	e008      	b.n	80078b6 <UART_SetConfig+0x34e>
 80078a4:	2308      	movs	r3, #8
 80078a6:	77fb      	strb	r3, [r7, #31]
 80078a8:	e005      	b.n	80078b6 <UART_SetConfig+0x34e>
 80078aa:	2310      	movs	r3, #16
 80078ac:	77fb      	strb	r3, [r7, #31]
 80078ae:	bf00      	nop
 80078b0:	e001      	b.n	80078b6 <UART_SetConfig+0x34e>
 80078b2:	2310      	movs	r3, #16
 80078b4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	69db      	ldr	r3, [r3, #28]
 80078ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078be:	d17f      	bne.n	80079c0 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80078c0:	7ffb      	ldrb	r3, [r7, #31]
 80078c2:	2b08      	cmp	r3, #8
 80078c4:	d85c      	bhi.n	8007980 <UART_SetConfig+0x418>
 80078c6:	a201      	add	r2, pc, #4	; (adr r2, 80078cc <UART_SetConfig+0x364>)
 80078c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078cc:	080078f1 	.word	0x080078f1
 80078d0:	08007911 	.word	0x08007911
 80078d4:	08007931 	.word	0x08007931
 80078d8:	08007981 	.word	0x08007981
 80078dc:	08007949 	.word	0x08007949
 80078e0:	08007981 	.word	0x08007981
 80078e4:	08007981 	.word	0x08007981
 80078e8:	08007981 	.word	0x08007981
 80078ec:	08007969 	.word	0x08007969
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078f0:	f7fd fe02 	bl	80054f8 <HAL_RCC_GetPCLK1Freq>
 80078f4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	005a      	lsls	r2, r3, #1
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	085b      	lsrs	r3, r3, #1
 8007900:	441a      	add	r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	fbb2 f3f3 	udiv	r3, r2, r3
 800790a:	b29b      	uxth	r3, r3
 800790c:	61bb      	str	r3, [r7, #24]
        break;
 800790e:	e03a      	b.n	8007986 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007910:	f7fd fe06 	bl	8005520 <HAL_RCC_GetPCLK2Freq>
 8007914:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	005a      	lsls	r2, r3, #1
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	085b      	lsrs	r3, r3, #1
 8007920:	441a      	add	r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	fbb2 f3f3 	udiv	r3, r2, r3
 800792a:	b29b      	uxth	r3, r3
 800792c:	61bb      	str	r3, [r7, #24]
        break;
 800792e:	e02a      	b.n	8007986 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	085a      	lsrs	r2, r3, #1
 8007936:	4b5f      	ldr	r3, [pc, #380]	; (8007ab4 <UART_SetConfig+0x54c>)
 8007938:	4413      	add	r3, r2
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	6852      	ldr	r2, [r2, #4]
 800793e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007942:	b29b      	uxth	r3, r3
 8007944:	61bb      	str	r3, [r7, #24]
        break;
 8007946:	e01e      	b.n	8007986 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007948:	f7fd fcf2 	bl	8005330 <HAL_RCC_GetSysClockFreq>
 800794c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	005a      	lsls	r2, r3, #1
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	085b      	lsrs	r3, r3, #1
 8007958:	441a      	add	r2, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007962:	b29b      	uxth	r3, r3
 8007964:	61bb      	str	r3, [r7, #24]
        break;
 8007966:	e00e      	b.n	8007986 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	085b      	lsrs	r3, r3, #1
 800796e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	fbb2 f3f3 	udiv	r3, r2, r3
 800797a:	b29b      	uxth	r3, r3
 800797c:	61bb      	str	r3, [r7, #24]
        break;
 800797e:	e002      	b.n	8007986 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	75fb      	strb	r3, [r7, #23]
        break;
 8007984:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	2b0f      	cmp	r3, #15
 800798a:	d916      	bls.n	80079ba <UART_SetConfig+0x452>
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007992:	d212      	bcs.n	80079ba <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	b29b      	uxth	r3, r3
 8007998:	f023 030f 	bic.w	r3, r3, #15
 800799c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	085b      	lsrs	r3, r3, #1
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	f003 0307 	and.w	r3, r3, #7
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	897b      	ldrh	r3, [r7, #10]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	897a      	ldrh	r2, [r7, #10]
 80079b6:	60da      	str	r2, [r3, #12]
 80079b8:	e070      	b.n	8007a9c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	75fb      	strb	r3, [r7, #23]
 80079be:	e06d      	b.n	8007a9c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80079c0:	7ffb      	ldrb	r3, [r7, #31]
 80079c2:	2b08      	cmp	r3, #8
 80079c4:	d859      	bhi.n	8007a7a <UART_SetConfig+0x512>
 80079c6:	a201      	add	r2, pc, #4	; (adr r2, 80079cc <UART_SetConfig+0x464>)
 80079c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079cc:	080079f1 	.word	0x080079f1
 80079d0:	08007a0f 	.word	0x08007a0f
 80079d4:	08007a2d 	.word	0x08007a2d
 80079d8:	08007a7b 	.word	0x08007a7b
 80079dc:	08007a45 	.word	0x08007a45
 80079e0:	08007a7b 	.word	0x08007a7b
 80079e4:	08007a7b 	.word	0x08007a7b
 80079e8:	08007a7b 	.word	0x08007a7b
 80079ec:	08007a63 	.word	0x08007a63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079f0:	f7fd fd82 	bl	80054f8 <HAL_RCC_GetPCLK1Freq>
 80079f4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	085a      	lsrs	r2, r3, #1
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	441a      	add	r2, r3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	61bb      	str	r3, [r7, #24]
        break;
 8007a0c:	e038      	b.n	8007a80 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a0e:	f7fd fd87 	bl	8005520 <HAL_RCC_GetPCLK2Freq>
 8007a12:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	085a      	lsrs	r2, r3, #1
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	441a      	add	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	61bb      	str	r3, [r7, #24]
        break;
 8007a2a:	e029      	b.n	8007a80 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	085a      	lsrs	r2, r3, #1
 8007a32:	4b21      	ldr	r3, [pc, #132]	; (8007ab8 <UART_SetConfig+0x550>)
 8007a34:	4413      	add	r3, r2
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	6852      	ldr	r2, [r2, #4]
 8007a3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	61bb      	str	r3, [r7, #24]
        break;
 8007a42:	e01d      	b.n	8007a80 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a44:	f7fd fc74 	bl	8005330 <HAL_RCC_GetSysClockFreq>
 8007a48:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	085a      	lsrs	r2, r3, #1
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	441a      	add	r2, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	61bb      	str	r3, [r7, #24]
        break;
 8007a60:	e00e      	b.n	8007a80 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	085b      	lsrs	r3, r3, #1
 8007a68:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	61bb      	str	r3, [r7, #24]
        break;
 8007a78:	e002      	b.n	8007a80 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	75fb      	strb	r3, [r7, #23]
        break;
 8007a7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	2b0f      	cmp	r3, #15
 8007a84:	d908      	bls.n	8007a98 <UART_SetConfig+0x530>
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a8c:	d204      	bcs.n	8007a98 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	69ba      	ldr	r2, [r7, #24]
 8007a94:	60da      	str	r2, [r3, #12]
 8007a96:	e001      	b.n	8007a9c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3720      	adds	r7, #32
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	01e84800 	.word	0x01e84800
 8007ab8:	00f42400 	.word	0x00f42400

08007abc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac8:	f003 0301 	and.w	r3, r3, #1
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00a      	beq.n	8007ae6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	430a      	orrs	r2, r1
 8007ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aea:	f003 0302 	and.w	r3, r3, #2
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00a      	beq.n	8007b08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	430a      	orrs	r2, r1
 8007b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0c:	f003 0304 	and.w	r3, r3, #4
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d00a      	beq.n	8007b2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	430a      	orrs	r2, r1
 8007b28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2e:	f003 0308 	and.w	r3, r3, #8
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00a      	beq.n	8007b4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	430a      	orrs	r2, r1
 8007b4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b50:	f003 0310 	and.w	r3, r3, #16
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00a      	beq.n	8007b6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	430a      	orrs	r2, r1
 8007b6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b72:	f003 0320 	and.w	r3, r3, #32
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00a      	beq.n	8007b90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	430a      	orrs	r2, r1
 8007b8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d01a      	beq.n	8007bd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bba:	d10a      	bne.n	8007bd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	430a      	orrs	r2, r1
 8007bd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00a      	beq.n	8007bf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	430a      	orrs	r2, r1
 8007bf2:	605a      	str	r2, [r3, #4]
  }
}
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b086      	sub	sp, #24
 8007c04:	af02      	add	r7, sp, #8
 8007c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007c0e:	f7fb ff63 	bl	8003ad8 <HAL_GetTick>
 8007c12:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f003 0308 	and.w	r3, r3, #8
 8007c1e:	2b08      	cmp	r3, #8
 8007c20:	d10e      	bne.n	8007c40 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c22:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c26:	9300      	str	r3, [sp, #0]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 f82a 	bl	8007c8a <UART_WaitOnFlagUntilTimeout>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d001      	beq.n	8007c40 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	e020      	b.n	8007c82 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f003 0304 	and.w	r3, r3, #4
 8007c4a:	2b04      	cmp	r3, #4
 8007c4c:	d10e      	bne.n	8007c6c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 f814 	bl	8007c8a <UART_WaitOnFlagUntilTimeout>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d001      	beq.n	8007c6c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c68:	2303      	movs	r3, #3
 8007c6a:	e00a      	b.n	8007c82 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2220      	movs	r2, #32
 8007c70:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2220      	movs	r2, #32
 8007c76:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3710      	adds	r7, #16
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b084      	sub	sp, #16
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	60f8      	str	r0, [r7, #12]
 8007c92:	60b9      	str	r1, [r7, #8]
 8007c94:	603b      	str	r3, [r7, #0]
 8007c96:	4613      	mov	r3, r2
 8007c98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c9a:	e05d      	b.n	8007d58 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca2:	d059      	beq.n	8007d58 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ca4:	f7fb ff18 	bl	8003ad8 <HAL_GetTick>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	69ba      	ldr	r2, [r7, #24]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d302      	bcc.n	8007cba <UART_WaitOnFlagUntilTimeout+0x30>
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d11b      	bne.n	8007cf2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007cc8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	689a      	ldr	r2, [r3, #8]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f022 0201 	bic.w	r2, r2, #1
 8007cd8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2220      	movs	r2, #32
 8007cde:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2220      	movs	r2, #32
 8007ce4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007cee:	2303      	movs	r3, #3
 8007cf0:	e042      	b.n	8007d78 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 0304 	and.w	r3, r3, #4
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d02b      	beq.n	8007d58 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	69db      	ldr	r3, [r3, #28]
 8007d06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d0e:	d123      	bne.n	8007d58 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d18:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007d28:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	689a      	ldr	r2, [r3, #8]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f022 0201 	bic.w	r2, r2, #1
 8007d38:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2220      	movs	r2, #32
 8007d3e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2220      	movs	r2, #32
 8007d44:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2220      	movs	r2, #32
 8007d4a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007d54:	2303      	movs	r3, #3
 8007d56:	e00f      	b.n	8007d78 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	69da      	ldr	r2, [r3, #28]
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	4013      	ands	r3, r2
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	bf0c      	ite	eq
 8007d68:	2301      	moveq	r3, #1
 8007d6a:	2300      	movne	r3, #0
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	461a      	mov	r2, r3
 8007d70:	79fb      	ldrb	r3, [r7, #7]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d092      	beq.n	8007c9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d76:	2300      	movs	r3, #0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007d96:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	689a      	ldr	r2, [r3, #8]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f022 0201 	bic.w	r2, r2, #1
 8007da6:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2220      	movs	r2, #32
 8007dac:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	661a      	str	r2, [r3, #96]	; 0x60
}
 8007db4:	bf00      	nop
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dcc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f7ff fbae 	bl	8007540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007de4:	bf00      	nop
 8007de6:	3710      	adds	r7, #16
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e02:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2220      	movs	r2, #32
 8007e08:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f7ff fb8b 	bl	800752c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e16:	bf00      	nop
 8007e18:	3708      	adds	r7, #8
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b084      	sub	sp, #16
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e2c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e32:	2b22      	cmp	r3, #34	; 0x22
 8007e34:	d13a      	bne.n	8007eac <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007e3e:	89bb      	ldrh	r3, [r7, #12]
 8007e40:	b2d9      	uxtb	r1, r3
 8007e42:	89fb      	ldrh	r3, [r7, #14]
 8007e44:	b2da      	uxtb	r2, r3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e4a:	400a      	ands	r2, r1
 8007e4c:	b2d2      	uxtb	r2, r2
 8007e4e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e54:	1c5a      	adds	r2, r3, #1
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	3b01      	subs	r3, #1
 8007e64:	b29a      	uxth	r2, r3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d121      	bne.n	8007ebc <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007e86:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	689a      	ldr	r2, [r3, #8]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f022 0201 	bic.w	r2, r2, #1
 8007e96:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2220      	movs	r2, #32
 8007e9c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f7fb fc87 	bl	80037b8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007eaa:	e007      	b.n	8007ebc <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	699a      	ldr	r2, [r3, #24]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f042 0208 	orr.w	r2, r2, #8
 8007eba:	619a      	str	r2, [r3, #24]
}
 8007ebc:	bf00      	nop
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007ed2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ed8:	2b22      	cmp	r3, #34	; 0x22
 8007eda:	d13a      	bne.n	8007f52 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee2:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ee8:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8007eea:	89ba      	ldrh	r2, [r7, #12]
 8007eec:	89fb      	ldrh	r3, [r7, #14]
 8007eee:	4013      	ands	r3, r2
 8007ef0:	b29a      	uxth	r2, r3
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007efa:	1c9a      	adds	r2, r3, #2
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d121      	bne.n	8007f62 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007f2c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	689a      	ldr	r2, [r3, #8]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f022 0201 	bic.w	r2, r2, #1
 8007f3c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2220      	movs	r2, #32
 8007f42:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f7fb fc34 	bl	80037b8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f50:	e007      	b.n	8007f62 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	699a      	ldr	r2, [r3, #24]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f042 0208 	orr.w	r2, r2, #8
 8007f60:	619a      	str	r2, [r3, #24]
}
 8007f62:	bf00      	nop
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b085      	sub	sp, #20
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	4603      	mov	r3, r0
 8007f72:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007f74:	2300      	movs	r3, #0
 8007f76:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007f78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007f7c:	2b84      	cmp	r3, #132	; 0x84
 8007f7e:	d005      	beq.n	8007f8c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007f80:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	4413      	add	r3, r2
 8007f88:	3303      	adds	r3, #3
 8007f8a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3714      	adds	r7, #20
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr

08007f9a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007f9a:	b480      	push	{r7}
 8007f9c:	b083      	sub	sp, #12
 8007f9e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fa0:	f3ef 8305 	mrs	r3, IPSR
 8007fa4:	607b      	str	r3, [r7, #4]
  return(result);
 8007fa6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	bf14      	ite	ne
 8007fac:	2301      	movne	r3, #1
 8007fae:	2300      	moveq	r3, #0
 8007fb0:	b2db      	uxtb	r3, r3
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	370c      	adds	r7, #12
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr

08007fbe <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007fc2:	f001 f921 	bl	8009208 <vTaskStartScheduler>
  
  return osOK;
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fce:	b089      	sub	sp, #36	; 0x24
 8007fd0:	af04      	add	r7, sp, #16
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	695b      	ldr	r3, [r3, #20]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d020      	beq.n	8008020 <osThreadCreate+0x54>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d01c      	beq.n	8008020 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	685c      	ldr	r4, [r3, #4]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681d      	ldr	r5, [r3, #0]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	691e      	ldr	r6, [r3, #16]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7ff ffb6 	bl	8007f6a <makeFreeRtosPriority>
 8007ffe:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	695b      	ldr	r3, [r3, #20]
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008008:	9202      	str	r2, [sp, #8]
 800800a:	9301      	str	r3, [sp, #4]
 800800c:	9100      	str	r1, [sp, #0]
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	4632      	mov	r2, r6
 8008012:	4629      	mov	r1, r5
 8008014:	4620      	mov	r0, r4
 8008016:	f000 ff29 	bl	8008e6c <xTaskCreateStatic>
 800801a:	4603      	mov	r3, r0
 800801c:	60fb      	str	r3, [r7, #12]
 800801e:	e01c      	b.n	800805a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	685c      	ldr	r4, [r3, #4]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800802c:	b29e      	uxth	r6, r3
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008034:	4618      	mov	r0, r3
 8008036:	f7ff ff98 	bl	8007f6a <makeFreeRtosPriority>
 800803a:	4602      	mov	r2, r0
 800803c:	f107 030c 	add.w	r3, r7, #12
 8008040:	9301      	str	r3, [sp, #4]
 8008042:	9200      	str	r2, [sp, #0]
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	4632      	mov	r2, r6
 8008048:	4629      	mov	r1, r5
 800804a:	4620      	mov	r0, r4
 800804c:	f000 ff6e 	bl	8008f2c <xTaskCreate>
 8008050:	4603      	mov	r3, r0
 8008052:	2b01      	cmp	r3, #1
 8008054:	d001      	beq.n	800805a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008056:	2300      	movs	r3, #0
 8008058:	e000      	b.n	800805c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800805a:	68fb      	ldr	r3, [r7, #12]
}
 800805c:	4618      	mov	r0, r3
 800805e:	3714      	adds	r7, #20
 8008060:	46bd      	mov	sp, r7
 8008062:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008064 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d001      	beq.n	800807a <osDelay+0x16>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	e000      	b.n	800807c <osDelay+0x18>
 800807a:	2301      	movs	r3, #1
 800807c:	4618      	mov	r0, r3
 800807e:	f001 f88d 	bl	800919c <vTaskDelay>
  
  return osOK;
 8008082:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008084:	4618      	mov	r0, r3
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b086      	sub	sp, #24
 8008090:	af02      	add	r7, sp, #8
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	460b      	mov	r3, r1
 8008096:	607a      	str	r2, [r7, #4]
 8008098:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d013      	beq.n	80080ca <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 80080a2:	7afb      	ldrb	r3, [r7, #11]
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d101      	bne.n	80080ac <osTimerCreate+0x20>
 80080a8:	2101      	movs	r1, #1
 80080aa:	e000      	b.n	80080ae <osTimerCreate+0x22>
 80080ac:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 80080b6:	9201      	str	r2, [sp, #4]
 80080b8:	9300      	str	r3, [sp, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	460a      	mov	r2, r1
 80080be:	2101      	movs	r1, #1
 80080c0:	480b      	ldr	r0, [pc, #44]	; (80080f0 <osTimerCreate+0x64>)
 80080c2:	f001 fff6 	bl	800a0b2 <xTimerCreateStatic>
 80080c6:	4603      	mov	r3, r0
 80080c8:	e00e      	b.n	80080e8 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 80080ca:	7afb      	ldrb	r3, [r7, #11]
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d101      	bne.n	80080d4 <osTimerCreate+0x48>
 80080d0:	2201      	movs	r2, #1
 80080d2:	e000      	b.n	80080d6 <osTimerCreate+0x4a>
 80080d4:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2101      	movs	r1, #1
 80080e0:	4803      	ldr	r0, [pc, #12]	; (80080f0 <osTimerCreate+0x64>)
 80080e2:	f001 ffc5 	bl	800a070 <xTimerCreate>
 80080e6:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3710      	adds	r7, #16
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	0800e6ac 	.word	0x0800e6ac

080080f4 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b088      	sub	sp, #32
 80080f8:	af02      	add	r7, sp, #8
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 80080fe:	2300      	movs	r3, #0
 8008100:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8008102:	2300      	movs	r3, #0
 8008104:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d101      	bne.n	8008114 <osTimerStart+0x20>
    ticks = 1;
 8008110:	2301      	movs	r3, #1
 8008112:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8008114:	f7ff ff41 	bl	8007f9a <inHandlerMode>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d01b      	beq.n	8008156 <osTimerStart+0x62>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800811e:	f107 020c 	add.w	r2, r7, #12
 8008122:	2300      	movs	r3, #0
 8008124:	9300      	str	r3, [sp, #0]
 8008126:	4613      	mov	r3, r2
 8008128:	693a      	ldr	r2, [r7, #16]
 800812a:	2109      	movs	r1, #9
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f002 f83d 	bl	800a1ac <xTimerGenericCommand>
 8008132:	4603      	mov	r3, r0
 8008134:	2b01      	cmp	r3, #1
 8008136:	d002      	beq.n	800813e <osTimerStart+0x4a>
    {
      result = osErrorOS;
 8008138:	23ff      	movs	r3, #255	; 0xff
 800813a:	617b      	str	r3, [r7, #20]
 800813c:	e018      	b.n	8008170 <osTimerStart+0x7c>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d015      	beq.n	8008170 <osTimerStart+0x7c>
 8008144:	4b0d      	ldr	r3, [pc, #52]	; (800817c <osTimerStart+0x88>)
 8008146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800814a:	601a      	str	r2, [r3, #0]
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	f3bf 8f6f 	isb	sy
 8008154:	e00c      	b.n	8008170 <osTimerStart+0x7c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8008156:	2300      	movs	r3, #0
 8008158:	9300      	str	r3, [sp, #0]
 800815a:	2300      	movs	r3, #0
 800815c:	693a      	ldr	r2, [r7, #16]
 800815e:	2104      	movs	r1, #4
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f002 f823 	bl	800a1ac <xTimerGenericCommand>
 8008166:	4603      	mov	r3, r0
 8008168:	2b01      	cmp	r3, #1
 800816a:	d001      	beq.n	8008170 <osTimerStart+0x7c>
      result = osErrorOS;
 800816c:	23ff      	movs	r3, #255	; 0xff
 800816e:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8008170:	697b      	ldr	r3, [r7, #20]
}
 8008172:	4618      	mov	r0, r3
 8008174:	3718      	adds	r7, #24
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
 800817a:	bf00      	nop
 800817c:	e000ed04 	.word	0xe000ed04

08008180 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d007      	beq.n	80081a0 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	4619      	mov	r1, r3
 8008196:	2001      	movs	r0, #1
 8008198:	f000 fa61 	bl	800865e <xQueueCreateMutexStatic>
 800819c:	4603      	mov	r3, r0
 800819e:	e003      	b.n	80081a8 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80081a0:	2001      	movs	r0, #1
 80081a2:	f000 fa44 	bl	800862e <xQueueCreateMutex>
 80081a6:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3708      	adds	r7, #8
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80081b0:	b590      	push	{r4, r7, lr}
 80081b2:	b085      	sub	sp, #20
 80081b4:	af02      	add	r7, sp, #8
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d012      	beq.n	80081e8 <osMessageCreate+0x38>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00e      	beq.n	80081e8 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6818      	ldr	r0, [r3, #0]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6859      	ldr	r1, [r3, #4]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	689a      	ldr	r2, [r3, #8]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	68dc      	ldr	r4, [r3, #12]
 80081da:	2300      	movs	r3, #0
 80081dc:	9300      	str	r3, [sp, #0]
 80081de:	4623      	mov	r3, r4
 80081e0:	f000 f92e 	bl	8008440 <xQueueGenericCreateStatic>
 80081e4:	4603      	mov	r3, r0
 80081e6:	e008      	b.n	80081fa <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6818      	ldr	r0, [r3, #0]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	4619      	mov	r1, r3
 80081f4:	f000 f9a1 	bl	800853a <xQueueGenericCreate>
 80081f8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	370c      	adds	r7, #12
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd90      	pop	{r4, r7, pc}

08008202 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008202:	b480      	push	{r7}
 8008204:	b083      	sub	sp, #12
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f103 0208 	add.w	r2, r3, #8
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f04f 32ff 	mov.w	r2, #4294967295
 800821a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f103 0208 	add.w	r2, r3, #8
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f103 0208 	add.w	r2, r3, #8
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008236:	bf00      	nop
 8008238:	370c      	adds	r7, #12
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr

08008242 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008242:	b480      	push	{r7}
 8008244:	b083      	sub	sp, #12
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	689a      	ldr	r2, [r3, #8]
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	683a      	ldr	r2, [r7, #0]
 8008280:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	683a      	ldr	r2, [r7, #0]
 8008286:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	1c5a      	adds	r2, r3, #1
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	601a      	str	r2, [r3, #0]
}
 8008298:	bf00      	nop
 800829a:	3714      	adds	r7, #20
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80082a4:	b480      	push	{r7}
 80082a6:	b085      	sub	sp, #20
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ba:	d103      	bne.n	80082c4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	60fb      	str	r3, [r7, #12]
 80082c2:	e00c      	b.n	80082de <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	3308      	adds	r3, #8
 80082c8:	60fb      	str	r3, [r7, #12]
 80082ca:	e002      	b.n	80082d2 <vListInsert+0x2e>
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	60fb      	str	r3, [r7, #12]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68ba      	ldr	r2, [r7, #8]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d2f6      	bcs.n	80082cc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	685a      	ldr	r2, [r3, #4]
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	683a      	ldr	r2, [r7, #0]
 80082ec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	683a      	ldr	r2, [r7, #0]
 80082f8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	1c5a      	adds	r2, r3, #1
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	601a      	str	r2, [r3, #0]
}
 800830a:	bf00      	nop
 800830c:	3714      	adds	r7, #20
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr

08008316 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008316:	b480      	push	{r7}
 8008318:	b085      	sub	sp, #20
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	6892      	ldr	r2, [r2, #8]
 800832c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	6852      	ldr	r2, [r2, #4]
 8008336:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	429a      	cmp	r2, r3
 8008340:	d103      	bne.n	800834a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	689a      	ldr	r2, [r3, #8]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	1e5a      	subs	r2, r3, #1
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
}
 800835e:	4618      	mov	r0, r3
 8008360:	3714      	adds	r7, #20
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr
	...

0800836c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d10b      	bne.n	8008398 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008384:	b672      	cpsid	i
 8008386:	f383 8811 	msr	BASEPRI, r3
 800838a:	f3bf 8f6f 	isb	sy
 800838e:	f3bf 8f4f 	dsb	sy
 8008392:	b662      	cpsie	i
 8008394:	60bb      	str	r3, [r7, #8]
 8008396:	e7fe      	b.n	8008396 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8008398:	f002 fafe 	bl	800a998 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083a4:	68f9      	ldr	r1, [r7, #12]
 80083a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80083a8:	fb01 f303 	mul.w	r3, r1, r3
 80083ac:	441a      	add	r2, r3
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2200      	movs	r2, #0
 80083b6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083c8:	3b01      	subs	r3, #1
 80083ca:	68f9      	ldr	r1, [r7, #12]
 80083cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80083ce:	fb01 f303 	mul.w	r3, r1, r3
 80083d2:	441a      	add	r2, r3
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	22ff      	movs	r2, #255	; 0xff
 80083dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	22ff      	movs	r2, #255	; 0xff
 80083e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d114      	bne.n	8008418 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	691b      	ldr	r3, [r3, #16]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d01a      	beq.n	800842c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	3310      	adds	r3, #16
 80083fa:	4618      	mov	r0, r3
 80083fc:	f001 f990 	bl	8009720 <xTaskRemoveFromEventList>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d012      	beq.n	800842c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008406:	4b0d      	ldr	r3, [pc, #52]	; (800843c <xQueueGenericReset+0xd0>)
 8008408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800840c:	601a      	str	r2, [r3, #0]
 800840e:	f3bf 8f4f 	dsb	sy
 8008412:	f3bf 8f6f 	isb	sy
 8008416:	e009      	b.n	800842c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	3310      	adds	r3, #16
 800841c:	4618      	mov	r0, r3
 800841e:	f7ff fef0 	bl	8008202 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	3324      	adds	r3, #36	; 0x24
 8008426:	4618      	mov	r0, r3
 8008428:	f7ff feeb 	bl	8008202 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800842c:	f002 fae6 	bl	800a9fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008430:	2301      	movs	r3, #1
}
 8008432:	4618      	mov	r0, r3
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	e000ed04 	.word	0xe000ed04

08008440 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008440:	b580      	push	{r7, lr}
 8008442:	b08e      	sub	sp, #56	; 0x38
 8008444:	af02      	add	r7, sp, #8
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	607a      	str	r2, [r7, #4]
 800844c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d10b      	bne.n	800846c <xQueueGenericCreateStatic+0x2c>
 8008454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008458:	b672      	cpsid	i
 800845a:	f383 8811 	msr	BASEPRI, r3
 800845e:	f3bf 8f6f 	isb	sy
 8008462:	f3bf 8f4f 	dsb	sy
 8008466:	b662      	cpsie	i
 8008468:	62bb      	str	r3, [r7, #40]	; 0x28
 800846a:	e7fe      	b.n	800846a <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d10b      	bne.n	800848a <xQueueGenericCreateStatic+0x4a>
 8008472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008476:	b672      	cpsid	i
 8008478:	f383 8811 	msr	BASEPRI, r3
 800847c:	f3bf 8f6f 	isb	sy
 8008480:	f3bf 8f4f 	dsb	sy
 8008484:	b662      	cpsie	i
 8008486:	627b      	str	r3, [r7, #36]	; 0x24
 8008488:	e7fe      	b.n	8008488 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d002      	beq.n	8008496 <xQueueGenericCreateStatic+0x56>
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d001      	beq.n	800849a <xQueueGenericCreateStatic+0x5a>
 8008496:	2301      	movs	r3, #1
 8008498:	e000      	b.n	800849c <xQueueGenericCreateStatic+0x5c>
 800849a:	2300      	movs	r3, #0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d10b      	bne.n	80084b8 <xQueueGenericCreateStatic+0x78>
 80084a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a4:	b672      	cpsid	i
 80084a6:	f383 8811 	msr	BASEPRI, r3
 80084aa:	f3bf 8f6f 	isb	sy
 80084ae:	f3bf 8f4f 	dsb	sy
 80084b2:	b662      	cpsie	i
 80084b4:	623b      	str	r3, [r7, #32]
 80084b6:	e7fe      	b.n	80084b6 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d102      	bne.n	80084c4 <xQueueGenericCreateStatic+0x84>
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d101      	bne.n	80084c8 <xQueueGenericCreateStatic+0x88>
 80084c4:	2301      	movs	r3, #1
 80084c6:	e000      	b.n	80084ca <xQueueGenericCreateStatic+0x8a>
 80084c8:	2300      	movs	r3, #0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d10b      	bne.n	80084e6 <xQueueGenericCreateStatic+0xa6>
 80084ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d2:	b672      	cpsid	i
 80084d4:	f383 8811 	msr	BASEPRI, r3
 80084d8:	f3bf 8f6f 	isb	sy
 80084dc:	f3bf 8f4f 	dsb	sy
 80084e0:	b662      	cpsie	i
 80084e2:	61fb      	str	r3, [r7, #28]
 80084e4:	e7fe      	b.n	80084e4 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80084e6:	2348      	movs	r3, #72	; 0x48
 80084e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	2b48      	cmp	r3, #72	; 0x48
 80084ee:	d00b      	beq.n	8008508 <xQueueGenericCreateStatic+0xc8>
 80084f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f4:	b672      	cpsid	i
 80084f6:	f383 8811 	msr	BASEPRI, r3
 80084fa:	f3bf 8f6f 	isb	sy
 80084fe:	f3bf 8f4f 	dsb	sy
 8008502:	b662      	cpsie	i
 8008504:	61bb      	str	r3, [r7, #24]
 8008506:	e7fe      	b.n	8008506 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008508:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800850e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00d      	beq.n	8008530 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008516:	2201      	movs	r2, #1
 8008518:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800851c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008522:	9300      	str	r3, [sp, #0]
 8008524:	4613      	mov	r3, r2
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	68b9      	ldr	r1, [r7, #8]
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f000 f846 	bl	80085bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008532:	4618      	mov	r0, r3
 8008534:	3730      	adds	r7, #48	; 0x30
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800853a:	b580      	push	{r7, lr}
 800853c:	b08a      	sub	sp, #40	; 0x28
 800853e:	af02      	add	r7, sp, #8
 8008540:	60f8      	str	r0, [r7, #12]
 8008542:	60b9      	str	r1, [r7, #8]
 8008544:	4613      	mov	r3, r2
 8008546:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d10b      	bne.n	8008566 <xQueueGenericCreate+0x2c>
 800854e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008552:	b672      	cpsid	i
 8008554:	f383 8811 	msr	BASEPRI, r3
 8008558:	f3bf 8f6f 	isb	sy
 800855c:	f3bf 8f4f 	dsb	sy
 8008560:	b662      	cpsie	i
 8008562:	613b      	str	r3, [r7, #16]
 8008564:	e7fe      	b.n	8008564 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d102      	bne.n	8008572 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800856c:	2300      	movs	r3, #0
 800856e:	61fb      	str	r3, [r7, #28]
 8008570:	e004      	b.n	800857c <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	68ba      	ldr	r2, [r7, #8]
 8008576:	fb02 f303 	mul.w	r3, r2, r3
 800857a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	3348      	adds	r3, #72	; 0x48
 8008580:	4618      	mov	r0, r3
 8008582:	f002 fb2b 	bl	800abdc <pvPortMalloc>
 8008586:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008588:	69bb      	ldr	r3, [r7, #24]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d011      	beq.n	80085b2 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	3348      	adds	r3, #72	; 0x48
 8008596:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	2200      	movs	r2, #0
 800859c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80085a0:	79fa      	ldrb	r2, [r7, #7]
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	9300      	str	r3, [sp, #0]
 80085a6:	4613      	mov	r3, r2
 80085a8:	697a      	ldr	r2, [r7, #20]
 80085aa:	68b9      	ldr	r1, [r7, #8]
 80085ac:	68f8      	ldr	r0, [r7, #12]
 80085ae:	f000 f805 	bl	80085bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80085b2:	69bb      	ldr	r3, [r7, #24]
	}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3720      	adds	r7, #32
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]
 80085c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d103      	bne.n	80085d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	69ba      	ldr	r2, [r7, #24]
 80085d4:	601a      	str	r2, [r3, #0]
 80085d6:	e002      	b.n	80085de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	68fa      	ldr	r2, [r7, #12]
 80085e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80085e4:	69bb      	ldr	r3, [r7, #24]
 80085e6:	68ba      	ldr	r2, [r7, #8]
 80085e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80085ea:	2101      	movs	r1, #1
 80085ec:	69b8      	ldr	r0, [r7, #24]
 80085ee:	f7ff febd 	bl	800836c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80085f2:	bf00      	nop
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b082      	sub	sp, #8
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d00e      	beq.n	8008626 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800861a:	2300      	movs	r3, #0
 800861c:	2200      	movs	r2, #0
 800861e:	2100      	movs	r1, #0
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 f837 	bl	8008694 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008626:	bf00      	nop
 8008628:	3708      	adds	r7, #8
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}

0800862e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800862e:	b580      	push	{r7, lr}
 8008630:	b086      	sub	sp, #24
 8008632:	af00      	add	r7, sp, #0
 8008634:	4603      	mov	r3, r0
 8008636:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008638:	2301      	movs	r3, #1
 800863a:	617b      	str	r3, [r7, #20]
 800863c:	2300      	movs	r3, #0
 800863e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008640:	79fb      	ldrb	r3, [r7, #7]
 8008642:	461a      	mov	r2, r3
 8008644:	6939      	ldr	r1, [r7, #16]
 8008646:	6978      	ldr	r0, [r7, #20]
 8008648:	f7ff ff77 	bl	800853a <xQueueGenericCreate>
 800864c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800864e:	68f8      	ldr	r0, [r7, #12]
 8008650:	f7ff ffd3 	bl	80085fa <prvInitialiseMutex>

		return xNewQueue;
 8008654:	68fb      	ldr	r3, [r7, #12]
	}
 8008656:	4618      	mov	r0, r3
 8008658:	3718      	adds	r7, #24
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800865e:	b580      	push	{r7, lr}
 8008660:	b088      	sub	sp, #32
 8008662:	af02      	add	r7, sp, #8
 8008664:	4603      	mov	r3, r0
 8008666:	6039      	str	r1, [r7, #0]
 8008668:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800866a:	2301      	movs	r3, #1
 800866c:	617b      	str	r3, [r7, #20]
 800866e:	2300      	movs	r3, #0
 8008670:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008672:	79fb      	ldrb	r3, [r7, #7]
 8008674:	9300      	str	r3, [sp, #0]
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	2200      	movs	r2, #0
 800867a:	6939      	ldr	r1, [r7, #16]
 800867c:	6978      	ldr	r0, [r7, #20]
 800867e:	f7ff fedf 	bl	8008440 <xQueueGenericCreateStatic>
 8008682:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008684:	68f8      	ldr	r0, [r7, #12]
 8008686:	f7ff ffb8 	bl	80085fa <prvInitialiseMutex>

		return xNewQueue;
 800868a:	68fb      	ldr	r3, [r7, #12]
	}
 800868c:	4618      	mov	r0, r3
 800868e:	3718      	adds	r7, #24
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b08e      	sub	sp, #56	; 0x38
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	607a      	str	r2, [r7, #4]
 80086a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80086a2:	2300      	movs	r3, #0
 80086a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80086aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d10b      	bne.n	80086c8 <xQueueGenericSend+0x34>
 80086b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b4:	b672      	cpsid	i
 80086b6:	f383 8811 	msr	BASEPRI, r3
 80086ba:	f3bf 8f6f 	isb	sy
 80086be:	f3bf 8f4f 	dsb	sy
 80086c2:	b662      	cpsie	i
 80086c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80086c6:	e7fe      	b.n	80086c6 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d103      	bne.n	80086d6 <xQueueGenericSend+0x42>
 80086ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d101      	bne.n	80086da <xQueueGenericSend+0x46>
 80086d6:	2301      	movs	r3, #1
 80086d8:	e000      	b.n	80086dc <xQueueGenericSend+0x48>
 80086da:	2300      	movs	r3, #0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d10b      	bne.n	80086f8 <xQueueGenericSend+0x64>
 80086e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e4:	b672      	cpsid	i
 80086e6:	f383 8811 	msr	BASEPRI, r3
 80086ea:	f3bf 8f6f 	isb	sy
 80086ee:	f3bf 8f4f 	dsb	sy
 80086f2:	b662      	cpsie	i
 80086f4:	627b      	str	r3, [r7, #36]	; 0x24
 80086f6:	e7fe      	b.n	80086f6 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	d103      	bne.n	8008706 <xQueueGenericSend+0x72>
 80086fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008702:	2b01      	cmp	r3, #1
 8008704:	d101      	bne.n	800870a <xQueueGenericSend+0x76>
 8008706:	2301      	movs	r3, #1
 8008708:	e000      	b.n	800870c <xQueueGenericSend+0x78>
 800870a:	2300      	movs	r3, #0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d10b      	bne.n	8008728 <xQueueGenericSend+0x94>
 8008710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008714:	b672      	cpsid	i
 8008716:	f383 8811 	msr	BASEPRI, r3
 800871a:	f3bf 8f6f 	isb	sy
 800871e:	f3bf 8f4f 	dsb	sy
 8008722:	b662      	cpsie	i
 8008724:	623b      	str	r3, [r7, #32]
 8008726:	e7fe      	b.n	8008726 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008728:	f001 f9b8 	bl	8009a9c <xTaskGetSchedulerState>
 800872c:	4603      	mov	r3, r0
 800872e:	2b00      	cmp	r3, #0
 8008730:	d102      	bne.n	8008738 <xQueueGenericSend+0xa4>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d101      	bne.n	800873c <xQueueGenericSend+0xa8>
 8008738:	2301      	movs	r3, #1
 800873a:	e000      	b.n	800873e <xQueueGenericSend+0xaa>
 800873c:	2300      	movs	r3, #0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d10b      	bne.n	800875a <xQueueGenericSend+0xc6>
 8008742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008746:	b672      	cpsid	i
 8008748:	f383 8811 	msr	BASEPRI, r3
 800874c:	f3bf 8f6f 	isb	sy
 8008750:	f3bf 8f4f 	dsb	sy
 8008754:	b662      	cpsie	i
 8008756:	61fb      	str	r3, [r7, #28]
 8008758:	e7fe      	b.n	8008758 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800875a:	f002 f91d 	bl	800a998 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800875e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008766:	429a      	cmp	r2, r3
 8008768:	d302      	bcc.n	8008770 <xQueueGenericSend+0xdc>
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	2b02      	cmp	r3, #2
 800876e:	d129      	bne.n	80087c4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008770:	683a      	ldr	r2, [r7, #0]
 8008772:	68b9      	ldr	r1, [r7, #8]
 8008774:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008776:	f000 fa0d 	bl	8008b94 <prvCopyDataToQueue>
 800877a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800877c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008780:	2b00      	cmp	r3, #0
 8008782:	d010      	beq.n	80087a6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008786:	3324      	adds	r3, #36	; 0x24
 8008788:	4618      	mov	r0, r3
 800878a:	f000 ffc9 	bl	8009720 <xTaskRemoveFromEventList>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d013      	beq.n	80087bc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008794:	4b3f      	ldr	r3, [pc, #252]	; (8008894 <xQueueGenericSend+0x200>)
 8008796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800879a:	601a      	str	r2, [r3, #0]
 800879c:	f3bf 8f4f 	dsb	sy
 80087a0:	f3bf 8f6f 	isb	sy
 80087a4:	e00a      	b.n	80087bc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80087a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d007      	beq.n	80087bc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80087ac:	4b39      	ldr	r3, [pc, #228]	; (8008894 <xQueueGenericSend+0x200>)
 80087ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087b2:	601a      	str	r2, [r3, #0]
 80087b4:	f3bf 8f4f 	dsb	sy
 80087b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80087bc:	f002 f91e 	bl	800a9fc <vPortExitCritical>
				return pdPASS;
 80087c0:	2301      	movs	r3, #1
 80087c2:	e063      	b.n	800888c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d103      	bne.n	80087d2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80087ca:	f002 f917 	bl	800a9fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80087ce:	2300      	movs	r3, #0
 80087d0:	e05c      	b.n	800888c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80087d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d106      	bne.n	80087e6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80087d8:	f107 0314 	add.w	r3, r7, #20
 80087dc:	4618      	mov	r0, r3
 80087de:	f001 f803 	bl	80097e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80087e2:	2301      	movs	r3, #1
 80087e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80087e6:	f002 f909 	bl	800a9fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80087ea:	f000 fd75 	bl	80092d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087ee:	f002 f8d3 	bl	800a998 <vPortEnterCritical>
 80087f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087f8:	b25b      	sxtb	r3, r3
 80087fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087fe:	d103      	bne.n	8008808 <xQueueGenericSend+0x174>
 8008800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008802:	2200      	movs	r2, #0
 8008804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800880e:	b25b      	sxtb	r3, r3
 8008810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008814:	d103      	bne.n	800881e <xQueueGenericSend+0x18a>
 8008816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008818:	2200      	movs	r2, #0
 800881a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800881e:	f002 f8ed 	bl	800a9fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008822:	1d3a      	adds	r2, r7, #4
 8008824:	f107 0314 	add.w	r3, r7, #20
 8008828:	4611      	mov	r1, r2
 800882a:	4618      	mov	r0, r3
 800882c:	f000 fff2 	bl	8009814 <xTaskCheckForTimeOut>
 8008830:	4603      	mov	r3, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	d124      	bne.n	8008880 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008836:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008838:	f000 faa4 	bl	8008d84 <prvIsQueueFull>
 800883c:	4603      	mov	r3, r0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d018      	beq.n	8008874 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008844:	3310      	adds	r3, #16
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	4611      	mov	r1, r2
 800884a:	4618      	mov	r0, r3
 800884c:	f000 ff16 	bl	800967c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008850:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008852:	f000 fa2f 	bl	8008cb4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008856:	f000 fd4d 	bl	80092f4 <xTaskResumeAll>
 800885a:	4603      	mov	r3, r0
 800885c:	2b00      	cmp	r3, #0
 800885e:	f47f af7c 	bne.w	800875a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008862:	4b0c      	ldr	r3, [pc, #48]	; (8008894 <xQueueGenericSend+0x200>)
 8008864:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008868:	601a      	str	r2, [r3, #0]
 800886a:	f3bf 8f4f 	dsb	sy
 800886e:	f3bf 8f6f 	isb	sy
 8008872:	e772      	b.n	800875a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008874:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008876:	f000 fa1d 	bl	8008cb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800887a:	f000 fd3b 	bl	80092f4 <xTaskResumeAll>
 800887e:	e76c      	b.n	800875a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008880:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008882:	f000 fa17 	bl	8008cb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008886:	f000 fd35 	bl	80092f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800888a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800888c:	4618      	mov	r0, r3
 800888e:	3738      	adds	r7, #56	; 0x38
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}
 8008894:	e000ed04 	.word	0xe000ed04

08008898 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b08e      	sub	sp, #56	; 0x38
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
 80088a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80088aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d10b      	bne.n	80088c8 <xQueueGenericSendFromISR+0x30>
 80088b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b4:	b672      	cpsid	i
 80088b6:	f383 8811 	msr	BASEPRI, r3
 80088ba:	f3bf 8f6f 	isb	sy
 80088be:	f3bf 8f4f 	dsb	sy
 80088c2:	b662      	cpsie	i
 80088c4:	627b      	str	r3, [r7, #36]	; 0x24
 80088c6:	e7fe      	b.n	80088c6 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d103      	bne.n	80088d6 <xQueueGenericSendFromISR+0x3e>
 80088ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d101      	bne.n	80088da <xQueueGenericSendFromISR+0x42>
 80088d6:	2301      	movs	r3, #1
 80088d8:	e000      	b.n	80088dc <xQueueGenericSendFromISR+0x44>
 80088da:	2300      	movs	r3, #0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d10b      	bne.n	80088f8 <xQueueGenericSendFromISR+0x60>
 80088e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e4:	b672      	cpsid	i
 80088e6:	f383 8811 	msr	BASEPRI, r3
 80088ea:	f3bf 8f6f 	isb	sy
 80088ee:	f3bf 8f4f 	dsb	sy
 80088f2:	b662      	cpsie	i
 80088f4:	623b      	str	r3, [r7, #32]
 80088f6:	e7fe      	b.n	80088f6 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	d103      	bne.n	8008906 <xQueueGenericSendFromISR+0x6e>
 80088fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008902:	2b01      	cmp	r3, #1
 8008904:	d101      	bne.n	800890a <xQueueGenericSendFromISR+0x72>
 8008906:	2301      	movs	r3, #1
 8008908:	e000      	b.n	800890c <xQueueGenericSendFromISR+0x74>
 800890a:	2300      	movs	r3, #0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d10b      	bne.n	8008928 <xQueueGenericSendFromISR+0x90>
 8008910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008914:	b672      	cpsid	i
 8008916:	f383 8811 	msr	BASEPRI, r3
 800891a:	f3bf 8f6f 	isb	sy
 800891e:	f3bf 8f4f 	dsb	sy
 8008922:	b662      	cpsie	i
 8008924:	61fb      	str	r3, [r7, #28]
 8008926:	e7fe      	b.n	8008926 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008928:	f002 f916 	bl	800ab58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800892c:	f3ef 8211 	mrs	r2, BASEPRI
 8008930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008934:	b672      	cpsid	i
 8008936:	f383 8811 	msr	BASEPRI, r3
 800893a:	f3bf 8f6f 	isb	sy
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	b662      	cpsie	i
 8008944:	61ba      	str	r2, [r7, #24]
 8008946:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008948:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800894a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800894c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008954:	429a      	cmp	r2, r3
 8008956:	d302      	bcc.n	800895e <xQueueGenericSendFromISR+0xc6>
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	2b02      	cmp	r3, #2
 800895c:	d12c      	bne.n	80089b8 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800895e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008960:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008964:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008968:	683a      	ldr	r2, [r7, #0]
 800896a:	68b9      	ldr	r1, [r7, #8]
 800896c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800896e:	f000 f911 	bl	8008b94 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008972:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800897a:	d112      	bne.n	80089a2 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800897c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008980:	2b00      	cmp	r3, #0
 8008982:	d016      	beq.n	80089b2 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008986:	3324      	adds	r3, #36	; 0x24
 8008988:	4618      	mov	r0, r3
 800898a:	f000 fec9 	bl	8009720 <xTaskRemoveFromEventList>
 800898e:	4603      	mov	r3, r0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d00e      	beq.n	80089b2 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d00b      	beq.n	80089b2 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2201      	movs	r2, #1
 800899e:	601a      	str	r2, [r3, #0]
 80089a0:	e007      	b.n	80089b2 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80089a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80089a6:	3301      	adds	r3, #1
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	b25a      	sxtb	r2, r3
 80089ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80089b2:	2301      	movs	r3, #1
 80089b4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80089b6:	e001      	b.n	80089bc <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80089b8:	2300      	movs	r3, #0
 80089ba:	637b      	str	r3, [r7, #52]	; 0x34
 80089bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089be:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80089c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3738      	adds	r7, #56	; 0x38
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b08c      	sub	sp, #48	; 0x30
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	60b9      	str	r1, [r7, #8]
 80089da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80089dc:	2300      	movs	r3, #0
 80089de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80089e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d10b      	bne.n	8008a02 <xQueueReceive+0x32>
	__asm volatile
 80089ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ee:	b672      	cpsid	i
 80089f0:	f383 8811 	msr	BASEPRI, r3
 80089f4:	f3bf 8f6f 	isb	sy
 80089f8:	f3bf 8f4f 	dsb	sy
 80089fc:	b662      	cpsie	i
 80089fe:	623b      	str	r3, [r7, #32]
 8008a00:	e7fe      	b.n	8008a00 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d103      	bne.n	8008a10 <xQueueReceive+0x40>
 8008a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d101      	bne.n	8008a14 <xQueueReceive+0x44>
 8008a10:	2301      	movs	r3, #1
 8008a12:	e000      	b.n	8008a16 <xQueueReceive+0x46>
 8008a14:	2300      	movs	r3, #0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d10b      	bne.n	8008a32 <xQueueReceive+0x62>
 8008a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1e:	b672      	cpsid	i
 8008a20:	f383 8811 	msr	BASEPRI, r3
 8008a24:	f3bf 8f6f 	isb	sy
 8008a28:	f3bf 8f4f 	dsb	sy
 8008a2c:	b662      	cpsie	i
 8008a2e:	61fb      	str	r3, [r7, #28]
 8008a30:	e7fe      	b.n	8008a30 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a32:	f001 f833 	bl	8009a9c <xTaskGetSchedulerState>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d102      	bne.n	8008a42 <xQueueReceive+0x72>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d101      	bne.n	8008a46 <xQueueReceive+0x76>
 8008a42:	2301      	movs	r3, #1
 8008a44:	e000      	b.n	8008a48 <xQueueReceive+0x78>
 8008a46:	2300      	movs	r3, #0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d10b      	bne.n	8008a64 <xQueueReceive+0x94>
 8008a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a50:	b672      	cpsid	i
 8008a52:	f383 8811 	msr	BASEPRI, r3
 8008a56:	f3bf 8f6f 	isb	sy
 8008a5a:	f3bf 8f4f 	dsb	sy
 8008a5e:	b662      	cpsie	i
 8008a60:	61bb      	str	r3, [r7, #24]
 8008a62:	e7fe      	b.n	8008a62 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a64:	f001 ff98 	bl	800a998 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a6c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d01f      	beq.n	8008ab4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a74:	68b9      	ldr	r1, [r7, #8]
 8008a76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a78:	f000 f8f6 	bl	8008c68 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7e:	1e5a      	subs	r2, r3, #1
 8008a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a82:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00f      	beq.n	8008aac <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8e:	3310      	adds	r3, #16
 8008a90:	4618      	mov	r0, r3
 8008a92:	f000 fe45 	bl	8009720 <xTaskRemoveFromEventList>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d007      	beq.n	8008aac <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008a9c:	4b3c      	ldr	r3, [pc, #240]	; (8008b90 <xQueueReceive+0x1c0>)
 8008a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008aa2:	601a      	str	r2, [r3, #0]
 8008aa4:	f3bf 8f4f 	dsb	sy
 8008aa8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008aac:	f001 ffa6 	bl	800a9fc <vPortExitCritical>
				return pdPASS;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e069      	b.n	8008b88 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d103      	bne.n	8008ac2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008aba:	f001 ff9f 	bl	800a9fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	e062      	b.n	8008b88 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d106      	bne.n	8008ad6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ac8:	f107 0310 	add.w	r3, r7, #16
 8008acc:	4618      	mov	r0, r3
 8008ace:	f000 fe8b 	bl	80097e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ad6:	f001 ff91 	bl	800a9fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ada:	f000 fbfd 	bl	80092d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ade:	f001 ff5b 	bl	800a998 <vPortEnterCritical>
 8008ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ae8:	b25b      	sxtb	r3, r3
 8008aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aee:	d103      	bne.n	8008af8 <xQueueReceive+0x128>
 8008af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af2:	2200      	movs	r2, #0
 8008af4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008afe:	b25b      	sxtb	r3, r3
 8008b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b04:	d103      	bne.n	8008b0e <xQueueReceive+0x13e>
 8008b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b0e:	f001 ff75 	bl	800a9fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b12:	1d3a      	adds	r2, r7, #4
 8008b14:	f107 0310 	add.w	r3, r7, #16
 8008b18:	4611      	mov	r1, r2
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f000 fe7a 	bl	8009814 <xTaskCheckForTimeOut>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d123      	bne.n	8008b6e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b28:	f000 f916 	bl	8008d58 <prvIsQueueEmpty>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d017      	beq.n	8008b62 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b34:	3324      	adds	r3, #36	; 0x24
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	4611      	mov	r1, r2
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f000 fd9e 	bl	800967c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008b40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b42:	f000 f8b7 	bl	8008cb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008b46:	f000 fbd5 	bl	80092f4 <xTaskResumeAll>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d189      	bne.n	8008a64 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008b50:	4b0f      	ldr	r3, [pc, #60]	; (8008b90 <xQueueReceive+0x1c0>)
 8008b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b56:	601a      	str	r2, [r3, #0]
 8008b58:	f3bf 8f4f 	dsb	sy
 8008b5c:	f3bf 8f6f 	isb	sy
 8008b60:	e780      	b.n	8008a64 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008b62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b64:	f000 f8a6 	bl	8008cb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b68:	f000 fbc4 	bl	80092f4 <xTaskResumeAll>
 8008b6c:	e77a      	b.n	8008a64 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008b6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b70:	f000 f8a0 	bl	8008cb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b74:	f000 fbbe 	bl	80092f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b7a:	f000 f8ed 	bl	8008d58 <prvIsQueueEmpty>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f43f af6f 	beq.w	8008a64 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b86:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3730      	adds	r7, #48	; 0x30
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	e000ed04 	.word	0xe000ed04

08008b94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b086      	sub	sp, #24
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d10d      	bne.n	8008bce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d14d      	bne.n	8008c56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f000 ff8a 	bl	8009ad8 <xTaskPriorityDisinherit>
 8008bc4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	609a      	str	r2, [r3, #8]
 8008bcc:	e043      	b.n	8008c56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d119      	bne.n	8008c08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6858      	ldr	r0, [r3, #4]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bdc:	461a      	mov	r2, r3
 8008bde:	68b9      	ldr	r1, [r7, #8]
 8008be0:	f003 f806 	bl	800bbf0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	685a      	ldr	r2, [r3, #4]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bec:	441a      	add	r2, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	685a      	ldr	r2, [r3, #4]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d32b      	bcc.n	8008c56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	605a      	str	r2, [r3, #4]
 8008c06:	e026      	b.n	8008c56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	68d8      	ldr	r0, [r3, #12]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c10:	461a      	mov	r2, r3
 8008c12:	68b9      	ldr	r1, [r7, #8]
 8008c14:	f002 ffec 	bl	800bbf0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	68da      	ldr	r2, [r3, #12]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c20:	425b      	negs	r3, r3
 8008c22:	441a      	add	r2, r3
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	68da      	ldr	r2, [r3, #12]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d207      	bcs.n	8008c44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	689a      	ldr	r2, [r3, #8]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c3c:	425b      	negs	r3, r3
 8008c3e:	441a      	add	r2, r3
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2b02      	cmp	r3, #2
 8008c48:	d105      	bne.n	8008c56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d002      	beq.n	8008c56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	3b01      	subs	r3, #1
 8008c54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	1c5a      	adds	r2, r3, #1
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008c5e:	697b      	ldr	r3, [r7, #20]
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3718      	adds	r7, #24
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d018      	beq.n	8008cac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	68da      	ldr	r2, [r3, #12]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c82:	441a      	add	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	68da      	ldr	r2, [r3, #12]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d303      	bcc.n	8008c9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	68d9      	ldr	r1, [r3, #12]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	6838      	ldr	r0, [r7, #0]
 8008ca8:	f002 ffa2 	bl	800bbf0 <memcpy>
	}
}
 8008cac:	bf00      	nop
 8008cae:	3708      	adds	r7, #8
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008cbc:	f001 fe6c 	bl	800a998 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cc6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008cc8:	e011      	b.n	8008cee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d012      	beq.n	8008cf8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	3324      	adds	r3, #36	; 0x24
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f000 fd22 	bl	8009720 <xTaskRemoveFromEventList>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d001      	beq.n	8008ce6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008ce2:	f000 fdfb 	bl	80098dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008ce6:	7bfb      	ldrb	r3, [r7, #15]
 8008ce8:	3b01      	subs	r3, #1
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	dce9      	bgt.n	8008cca <prvUnlockQueue+0x16>
 8008cf6:	e000      	b.n	8008cfa <prvUnlockQueue+0x46>
					break;
 8008cf8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	22ff      	movs	r2, #255	; 0xff
 8008cfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008d02:	f001 fe7b 	bl	800a9fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008d06:	f001 fe47 	bl	800a998 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d12:	e011      	b.n	8008d38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d012      	beq.n	8008d42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	3310      	adds	r3, #16
 8008d20:	4618      	mov	r0, r3
 8008d22:	f000 fcfd 	bl	8009720 <xTaskRemoveFromEventList>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d001      	beq.n	8008d30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008d2c:	f000 fdd6 	bl	80098dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008d30:	7bbb      	ldrb	r3, [r7, #14]
 8008d32:	3b01      	subs	r3, #1
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	dce9      	bgt.n	8008d14 <prvUnlockQueue+0x60>
 8008d40:	e000      	b.n	8008d44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008d42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	22ff      	movs	r2, #255	; 0xff
 8008d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008d4c:	f001 fe56 	bl	800a9fc <vPortExitCritical>
}
 8008d50:	bf00      	nop
 8008d52:	3710      	adds	r7, #16
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d60:	f001 fe1a 	bl	800a998 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d102      	bne.n	8008d72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	60fb      	str	r3, [r7, #12]
 8008d70:	e001      	b.n	8008d76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008d72:	2300      	movs	r3, #0
 8008d74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d76:	f001 fe41 	bl	800a9fc <vPortExitCritical>

	return xReturn;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3710      	adds	r7, #16
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d8c:	f001 fe04 	bl	800a998 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d102      	bne.n	8008da2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	60fb      	str	r3, [r7, #12]
 8008da0:	e001      	b.n	8008da6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008da2:	2300      	movs	r3, #0
 8008da4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008da6:	f001 fe29 	bl	800a9fc <vPortExitCritical>

	return xReturn;
 8008daa:	68fb      	ldr	r3, [r7, #12]
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3710      	adds	r7, #16
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008db4:	b480      	push	{r7}
 8008db6:	b085      	sub	sp, #20
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	60fb      	str	r3, [r7, #12]
 8008dc2:	e014      	b.n	8008dee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008dc4:	4a0e      	ldr	r2, [pc, #56]	; (8008e00 <vQueueAddToRegistry+0x4c>)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d10b      	bne.n	8008de8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008dd0:	490b      	ldr	r1, [pc, #44]	; (8008e00 <vQueueAddToRegistry+0x4c>)
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	683a      	ldr	r2, [r7, #0]
 8008dd6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008dda:	4a09      	ldr	r2, [pc, #36]	; (8008e00 <vQueueAddToRegistry+0x4c>)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	00db      	lsls	r3, r3, #3
 8008de0:	4413      	add	r3, r2
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008de6:	e005      	b.n	8008df4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	3301      	adds	r3, #1
 8008dec:	60fb      	str	r3, [r7, #12]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2b07      	cmp	r3, #7
 8008df2:	d9e7      	bls.n	8008dc4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008df4:	bf00      	nop
 8008df6:	3714      	adds	r7, #20
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr
 8008e00:	200049e0 	.word	0x200049e0

08008e04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b086      	sub	sp, #24
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008e14:	f001 fdc0 	bl	800a998 <vPortEnterCritical>
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e1e:	b25b      	sxtb	r3, r3
 8008e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e24:	d103      	bne.n	8008e2e <vQueueWaitForMessageRestricted+0x2a>
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e34:	b25b      	sxtb	r3, r3
 8008e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e3a:	d103      	bne.n	8008e44 <vQueueWaitForMessageRestricted+0x40>
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e44:	f001 fdda 	bl	800a9fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d106      	bne.n	8008e5e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	3324      	adds	r3, #36	; 0x24
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	68b9      	ldr	r1, [r7, #8]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f000 fc35 	bl	80096c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008e5e:	6978      	ldr	r0, [r7, #20]
 8008e60:	f7ff ff28 	bl	8008cb4 <prvUnlockQueue>
	}
 8008e64:	bf00      	nop
 8008e66:	3718      	adds	r7, #24
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b08e      	sub	sp, #56	; 0x38
 8008e70:	af04      	add	r7, sp, #16
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	607a      	str	r2, [r7, #4]
 8008e78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d10b      	bne.n	8008e98 <xTaskCreateStatic+0x2c>
 8008e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e84:	b672      	cpsid	i
 8008e86:	f383 8811 	msr	BASEPRI, r3
 8008e8a:	f3bf 8f6f 	isb	sy
 8008e8e:	f3bf 8f4f 	dsb	sy
 8008e92:	b662      	cpsie	i
 8008e94:	623b      	str	r3, [r7, #32]
 8008e96:	e7fe      	b.n	8008e96 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8008e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d10b      	bne.n	8008eb6 <xTaskCreateStatic+0x4a>
 8008e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea2:	b672      	cpsid	i
 8008ea4:	f383 8811 	msr	BASEPRI, r3
 8008ea8:	f3bf 8f6f 	isb	sy
 8008eac:	f3bf 8f4f 	dsb	sy
 8008eb0:	b662      	cpsie	i
 8008eb2:	61fb      	str	r3, [r7, #28]
 8008eb4:	e7fe      	b.n	8008eb4 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008eb6:	2354      	movs	r3, #84	; 0x54
 8008eb8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	2b54      	cmp	r3, #84	; 0x54
 8008ebe:	d00b      	beq.n	8008ed8 <xTaskCreateStatic+0x6c>
 8008ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec4:	b672      	cpsid	i
 8008ec6:	f383 8811 	msr	BASEPRI, r3
 8008eca:	f3bf 8f6f 	isb	sy
 8008ece:	f3bf 8f4f 	dsb	sy
 8008ed2:	b662      	cpsie	i
 8008ed4:	61bb      	str	r3, [r7, #24]
 8008ed6:	e7fe      	b.n	8008ed6 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008ed8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d01e      	beq.n	8008f1e <xTaskCreateStatic+0xb2>
 8008ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d01b      	beq.n	8008f1e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008eee:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef2:	2202      	movs	r2, #2
 8008ef4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008ef8:	2300      	movs	r3, #0
 8008efa:	9303      	str	r3, [sp, #12]
 8008efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efe:	9302      	str	r3, [sp, #8]
 8008f00:	f107 0314 	add.w	r3, r7, #20
 8008f04:	9301      	str	r3, [sp, #4]
 8008f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f08:	9300      	str	r3, [sp, #0]
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	68b9      	ldr	r1, [r7, #8]
 8008f10:	68f8      	ldr	r0, [r7, #12]
 8008f12:	f000 f850 	bl	8008fb6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f18:	f000 f8d6 	bl	80090c8 <prvAddNewTaskToReadyList>
 8008f1c:	e001      	b.n	8008f22 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008f22:	697b      	ldr	r3, [r7, #20]
	}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3728      	adds	r7, #40	; 0x28
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b08c      	sub	sp, #48	; 0x30
 8008f30:	af04      	add	r7, sp, #16
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	603b      	str	r3, [r7, #0]
 8008f38:	4613      	mov	r3, r2
 8008f3a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008f3c:	88fb      	ldrh	r3, [r7, #6]
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	4618      	mov	r0, r3
 8008f42:	f001 fe4b 	bl	800abdc <pvPortMalloc>
 8008f46:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00e      	beq.n	8008f6c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008f4e:	2054      	movs	r0, #84	; 0x54
 8008f50:	f001 fe44 	bl	800abdc <pvPortMalloc>
 8008f54:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d003      	beq.n	8008f64 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	697a      	ldr	r2, [r7, #20]
 8008f60:	631a      	str	r2, [r3, #48]	; 0x30
 8008f62:	e005      	b.n	8008f70 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008f64:	6978      	ldr	r0, [r7, #20]
 8008f66:	f001 ff01 	bl	800ad6c <vPortFree>
 8008f6a:	e001      	b.n	8008f70 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d017      	beq.n	8008fa6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008f7e:	88fa      	ldrh	r2, [r7, #6]
 8008f80:	2300      	movs	r3, #0
 8008f82:	9303      	str	r3, [sp, #12]
 8008f84:	69fb      	ldr	r3, [r7, #28]
 8008f86:	9302      	str	r3, [sp, #8]
 8008f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f8a:	9301      	str	r3, [sp, #4]
 8008f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f8e:	9300      	str	r3, [sp, #0]
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	68b9      	ldr	r1, [r7, #8]
 8008f94:	68f8      	ldr	r0, [r7, #12]
 8008f96:	f000 f80e 	bl	8008fb6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f9a:	69f8      	ldr	r0, [r7, #28]
 8008f9c:	f000 f894 	bl	80090c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	61bb      	str	r3, [r7, #24]
 8008fa4:	e002      	b.n	8008fac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8008faa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008fac:	69bb      	ldr	r3, [r7, #24]
	}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3720      	adds	r7, #32
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b088      	sub	sp, #32
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	60f8      	str	r0, [r7, #12]
 8008fbe:	60b9      	str	r1, [r7, #8]
 8008fc0:	607a      	str	r2, [r7, #4]
 8008fc2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fc8:	6879      	ldr	r1, [r7, #4]
 8008fca:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008fce:	440b      	add	r3, r1
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	4413      	add	r3, r2
 8008fd4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	f023 0307 	bic.w	r3, r3, #7
 8008fdc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008fde:	69bb      	ldr	r3, [r7, #24]
 8008fe0:	f003 0307 	and.w	r3, r3, #7
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d00b      	beq.n	8009000 <prvInitialiseNewTask+0x4a>
 8008fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fec:	b672      	cpsid	i
 8008fee:	f383 8811 	msr	BASEPRI, r3
 8008ff2:	f3bf 8f6f 	isb	sy
 8008ff6:	f3bf 8f4f 	dsb	sy
 8008ffa:	b662      	cpsie	i
 8008ffc:	617b      	str	r3, [r7, #20]
 8008ffe:	e7fe      	b.n	8008ffe <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d01f      	beq.n	8009046 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009006:	2300      	movs	r3, #0
 8009008:	61fb      	str	r3, [r7, #28]
 800900a:	e012      	b.n	8009032 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800900c:	68ba      	ldr	r2, [r7, #8]
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	4413      	add	r3, r2
 8009012:	7819      	ldrb	r1, [r3, #0]
 8009014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	4413      	add	r3, r2
 800901a:	3334      	adds	r3, #52	; 0x34
 800901c:	460a      	mov	r2, r1
 800901e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009020:	68ba      	ldr	r2, [r7, #8]
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	4413      	add	r3, r2
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d006      	beq.n	800903a <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800902c:	69fb      	ldr	r3, [r7, #28]
 800902e:	3301      	adds	r3, #1
 8009030:	61fb      	str	r3, [r7, #28]
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	2b0f      	cmp	r3, #15
 8009036:	d9e9      	bls.n	800900c <prvInitialiseNewTask+0x56>
 8009038:	e000      	b.n	800903c <prvInitialiseNewTask+0x86>
			{
				break;
 800903a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800903c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903e:	2200      	movs	r2, #0
 8009040:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009044:	e003      	b.n	800904e <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009048:	2200      	movs	r2, #0
 800904a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800904e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009050:	2b06      	cmp	r3, #6
 8009052:	d901      	bls.n	8009058 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009054:	2306      	movs	r3, #6
 8009056:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800905a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800905c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800905e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009060:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009062:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009066:	2200      	movs	r2, #0
 8009068:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800906a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906c:	3304      	adds	r3, #4
 800906e:	4618      	mov	r0, r3
 8009070:	f7ff f8e7 	bl	8008242 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009076:	3318      	adds	r3, #24
 8009078:	4618      	mov	r0, r3
 800907a:	f7ff f8e2 	bl	8008242 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800907e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009082:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009086:	f1c3 0207 	rsb	r2, r3, #7
 800908a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800908c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800908e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009092:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009096:	2200      	movs	r2, #0
 8009098:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800909a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909c:	2200      	movs	r2, #0
 800909e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80090a2:	683a      	ldr	r2, [r7, #0]
 80090a4:	68f9      	ldr	r1, [r7, #12]
 80090a6:	69b8      	ldr	r0, [r7, #24]
 80090a8:	f001 fb70 	bl	800a78c <pxPortInitialiseStack>
 80090ac:	4602      	mov	r2, r0
 80090ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80090b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d002      	beq.n	80090be <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80090b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090be:	bf00      	nop
 80090c0:	3720      	adds	r7, #32
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
	...

080090c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80090d0:	f001 fc62 	bl	800a998 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80090d4:	4b2a      	ldr	r3, [pc, #168]	; (8009180 <prvAddNewTaskToReadyList+0xb8>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	3301      	adds	r3, #1
 80090da:	4a29      	ldr	r2, [pc, #164]	; (8009180 <prvAddNewTaskToReadyList+0xb8>)
 80090dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80090de:	4b29      	ldr	r3, [pc, #164]	; (8009184 <prvAddNewTaskToReadyList+0xbc>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d109      	bne.n	80090fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80090e6:	4a27      	ldr	r2, [pc, #156]	; (8009184 <prvAddNewTaskToReadyList+0xbc>)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80090ec:	4b24      	ldr	r3, [pc, #144]	; (8009180 <prvAddNewTaskToReadyList+0xb8>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d110      	bne.n	8009116 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80090f4:	f000 fc16 	bl	8009924 <prvInitialiseTaskLists>
 80090f8:	e00d      	b.n	8009116 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80090fa:	4b23      	ldr	r3, [pc, #140]	; (8009188 <prvAddNewTaskToReadyList+0xc0>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d109      	bne.n	8009116 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009102:	4b20      	ldr	r3, [pc, #128]	; (8009184 <prvAddNewTaskToReadyList+0xbc>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800910c:	429a      	cmp	r2, r3
 800910e:	d802      	bhi.n	8009116 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009110:	4a1c      	ldr	r2, [pc, #112]	; (8009184 <prvAddNewTaskToReadyList+0xbc>)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009116:	4b1d      	ldr	r3, [pc, #116]	; (800918c <prvAddNewTaskToReadyList+0xc4>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	3301      	adds	r3, #1
 800911c:	4a1b      	ldr	r2, [pc, #108]	; (800918c <prvAddNewTaskToReadyList+0xc4>)
 800911e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009124:	2201      	movs	r2, #1
 8009126:	409a      	lsls	r2, r3
 8009128:	4b19      	ldr	r3, [pc, #100]	; (8009190 <prvAddNewTaskToReadyList+0xc8>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4313      	orrs	r3, r2
 800912e:	4a18      	ldr	r2, [pc, #96]	; (8009190 <prvAddNewTaskToReadyList+0xc8>)
 8009130:	6013      	str	r3, [r2, #0]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009136:	4613      	mov	r3, r2
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	4413      	add	r3, r2
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	4a15      	ldr	r2, [pc, #84]	; (8009194 <prvAddNewTaskToReadyList+0xcc>)
 8009140:	441a      	add	r2, r3
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	3304      	adds	r3, #4
 8009146:	4619      	mov	r1, r3
 8009148:	4610      	mov	r0, r2
 800914a:	f7ff f887 	bl	800825c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800914e:	f001 fc55 	bl	800a9fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009152:	4b0d      	ldr	r3, [pc, #52]	; (8009188 <prvAddNewTaskToReadyList+0xc0>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00e      	beq.n	8009178 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800915a:	4b0a      	ldr	r3, [pc, #40]	; (8009184 <prvAddNewTaskToReadyList+0xbc>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009164:	429a      	cmp	r2, r3
 8009166:	d207      	bcs.n	8009178 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009168:	4b0b      	ldr	r3, [pc, #44]	; (8009198 <prvAddNewTaskToReadyList+0xd0>)
 800916a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800916e:	601a      	str	r2, [r3, #0]
 8009170:	f3bf 8f4f 	dsb	sy
 8009174:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009178:	bf00      	nop
 800917a:	3708      	adds	r7, #8
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	200009c0 	.word	0x200009c0
 8009184:	200008c0 	.word	0x200008c0
 8009188:	200009cc 	.word	0x200009cc
 800918c:	200009dc 	.word	0x200009dc
 8009190:	200009c8 	.word	0x200009c8
 8009194:	200008c4 	.word	0x200008c4
 8009198:	e000ed04 	.word	0xe000ed04

0800919c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80091a4:	2300      	movs	r3, #0
 80091a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d018      	beq.n	80091e0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80091ae:	4b14      	ldr	r3, [pc, #80]	; (8009200 <vTaskDelay+0x64>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d00b      	beq.n	80091ce <vTaskDelay+0x32>
 80091b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ba:	b672      	cpsid	i
 80091bc:	f383 8811 	msr	BASEPRI, r3
 80091c0:	f3bf 8f6f 	isb	sy
 80091c4:	f3bf 8f4f 	dsb	sy
 80091c8:	b662      	cpsie	i
 80091ca:	60bb      	str	r3, [r7, #8]
 80091cc:	e7fe      	b.n	80091cc <vTaskDelay+0x30>
			vTaskSuspendAll();
 80091ce:	f000 f883 	bl	80092d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80091d2:	2100      	movs	r1, #0
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 fe9b 	bl	8009f10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80091da:	f000 f88b 	bl	80092f4 <xTaskResumeAll>
 80091de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d107      	bne.n	80091f6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80091e6:	4b07      	ldr	r3, [pc, #28]	; (8009204 <vTaskDelay+0x68>)
 80091e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091ec:	601a      	str	r2, [r3, #0]
 80091ee:	f3bf 8f4f 	dsb	sy
 80091f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80091f6:	bf00      	nop
 80091f8:	3710      	adds	r7, #16
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop
 8009200:	200009e8 	.word	0x200009e8
 8009204:	e000ed04 	.word	0xe000ed04

08009208 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b08a      	sub	sp, #40	; 0x28
 800920c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800920e:	2300      	movs	r3, #0
 8009210:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009212:	2300      	movs	r3, #0
 8009214:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009216:	463a      	mov	r2, r7
 8009218:	1d39      	adds	r1, r7, #4
 800921a:	f107 0308 	add.w	r3, r7, #8
 800921e:	4618      	mov	r0, r3
 8009220:	f7f8 fc72 	bl	8001b08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009224:	6839      	ldr	r1, [r7, #0]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	68ba      	ldr	r2, [r7, #8]
 800922a:	9202      	str	r2, [sp, #8]
 800922c:	9301      	str	r3, [sp, #4]
 800922e:	2300      	movs	r3, #0
 8009230:	9300      	str	r3, [sp, #0]
 8009232:	2300      	movs	r3, #0
 8009234:	460a      	mov	r2, r1
 8009236:	4922      	ldr	r1, [pc, #136]	; (80092c0 <vTaskStartScheduler+0xb8>)
 8009238:	4822      	ldr	r0, [pc, #136]	; (80092c4 <vTaskStartScheduler+0xbc>)
 800923a:	f7ff fe17 	bl	8008e6c <xTaskCreateStatic>
 800923e:	4602      	mov	r2, r0
 8009240:	4b21      	ldr	r3, [pc, #132]	; (80092c8 <vTaskStartScheduler+0xc0>)
 8009242:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009244:	4b20      	ldr	r3, [pc, #128]	; (80092c8 <vTaskStartScheduler+0xc0>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d002      	beq.n	8009252 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800924c:	2301      	movs	r3, #1
 800924e:	617b      	str	r3, [r7, #20]
 8009250:	e001      	b.n	8009256 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009252:	2300      	movs	r3, #0
 8009254:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	2b01      	cmp	r3, #1
 800925a:	d102      	bne.n	8009262 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800925c:	f000 febe 	bl	8009fdc <xTimerCreateTimerTask>
 8009260:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	2b01      	cmp	r3, #1
 8009266:	d117      	bne.n	8009298 <vTaskStartScheduler+0x90>
 8009268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800926c:	b672      	cpsid	i
 800926e:	f383 8811 	msr	BASEPRI, r3
 8009272:	f3bf 8f6f 	isb	sy
 8009276:	f3bf 8f4f 	dsb	sy
 800927a:	b662      	cpsie	i
 800927c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800927e:	4b13      	ldr	r3, [pc, #76]	; (80092cc <vTaskStartScheduler+0xc4>)
 8009280:	f04f 32ff 	mov.w	r2, #4294967295
 8009284:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009286:	4b12      	ldr	r3, [pc, #72]	; (80092d0 <vTaskStartScheduler+0xc8>)
 8009288:	2201      	movs	r2, #1
 800928a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800928c:	4b11      	ldr	r3, [pc, #68]	; (80092d4 <vTaskStartScheduler+0xcc>)
 800928e:	2200      	movs	r2, #0
 8009290:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009292:	f001 fb05 	bl	800a8a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009296:	e00f      	b.n	80092b8 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800929e:	d10b      	bne.n	80092b8 <vTaskStartScheduler+0xb0>
 80092a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a4:	b672      	cpsid	i
 80092a6:	f383 8811 	msr	BASEPRI, r3
 80092aa:	f3bf 8f6f 	isb	sy
 80092ae:	f3bf 8f4f 	dsb	sy
 80092b2:	b662      	cpsie	i
 80092b4:	60fb      	str	r3, [r7, #12]
 80092b6:	e7fe      	b.n	80092b6 <vTaskStartScheduler+0xae>
}
 80092b8:	bf00      	nop
 80092ba:	3718      	adds	r7, #24
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	0800e6b0 	.word	0x0800e6b0
 80092c4:	080098f5 	.word	0x080098f5
 80092c8:	200009e4 	.word	0x200009e4
 80092cc:	200009e0 	.word	0x200009e0
 80092d0:	200009cc 	.word	0x200009cc
 80092d4:	200009c4 	.word	0x200009c4

080092d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80092d8:	b480      	push	{r7}
 80092da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80092dc:	4b04      	ldr	r3, [pc, #16]	; (80092f0 <vTaskSuspendAll+0x18>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	3301      	adds	r3, #1
 80092e2:	4a03      	ldr	r2, [pc, #12]	; (80092f0 <vTaskSuspendAll+0x18>)
 80092e4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80092e6:	bf00      	nop
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr
 80092f0:	200009e8 	.word	0x200009e8

080092f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80092fa:	2300      	movs	r3, #0
 80092fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80092fe:	2300      	movs	r3, #0
 8009300:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009302:	4b42      	ldr	r3, [pc, #264]	; (800940c <xTaskResumeAll+0x118>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d10b      	bne.n	8009322 <xTaskResumeAll+0x2e>
 800930a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930e:	b672      	cpsid	i
 8009310:	f383 8811 	msr	BASEPRI, r3
 8009314:	f3bf 8f6f 	isb	sy
 8009318:	f3bf 8f4f 	dsb	sy
 800931c:	b662      	cpsie	i
 800931e:	603b      	str	r3, [r7, #0]
 8009320:	e7fe      	b.n	8009320 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009322:	f001 fb39 	bl	800a998 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009326:	4b39      	ldr	r3, [pc, #228]	; (800940c <xTaskResumeAll+0x118>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	3b01      	subs	r3, #1
 800932c:	4a37      	ldr	r2, [pc, #220]	; (800940c <xTaskResumeAll+0x118>)
 800932e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009330:	4b36      	ldr	r3, [pc, #216]	; (800940c <xTaskResumeAll+0x118>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d161      	bne.n	80093fc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009338:	4b35      	ldr	r3, [pc, #212]	; (8009410 <xTaskResumeAll+0x11c>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d05d      	beq.n	80093fc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009340:	e02e      	b.n	80093a0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009342:	4b34      	ldr	r3, [pc, #208]	; (8009414 <xTaskResumeAll+0x120>)
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	68db      	ldr	r3, [r3, #12]
 8009348:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	3318      	adds	r3, #24
 800934e:	4618      	mov	r0, r3
 8009350:	f7fe ffe1 	bl	8008316 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	3304      	adds	r3, #4
 8009358:	4618      	mov	r0, r3
 800935a:	f7fe ffdc 	bl	8008316 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009362:	2201      	movs	r2, #1
 8009364:	409a      	lsls	r2, r3
 8009366:	4b2c      	ldr	r3, [pc, #176]	; (8009418 <xTaskResumeAll+0x124>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4313      	orrs	r3, r2
 800936c:	4a2a      	ldr	r2, [pc, #168]	; (8009418 <xTaskResumeAll+0x124>)
 800936e:	6013      	str	r3, [r2, #0]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009374:	4613      	mov	r3, r2
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	4413      	add	r3, r2
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	4a27      	ldr	r2, [pc, #156]	; (800941c <xTaskResumeAll+0x128>)
 800937e:	441a      	add	r2, r3
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	3304      	adds	r3, #4
 8009384:	4619      	mov	r1, r3
 8009386:	4610      	mov	r0, r2
 8009388:	f7fe ff68 	bl	800825c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009390:	4b23      	ldr	r3, [pc, #140]	; (8009420 <xTaskResumeAll+0x12c>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009396:	429a      	cmp	r2, r3
 8009398:	d302      	bcc.n	80093a0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800939a:	4b22      	ldr	r3, [pc, #136]	; (8009424 <xTaskResumeAll+0x130>)
 800939c:	2201      	movs	r2, #1
 800939e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093a0:	4b1c      	ldr	r3, [pc, #112]	; (8009414 <xTaskResumeAll+0x120>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d1cc      	bne.n	8009342 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d001      	beq.n	80093b2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80093ae:	f000 fb55 	bl	8009a5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80093b2:	4b1d      	ldr	r3, [pc, #116]	; (8009428 <xTaskResumeAll+0x134>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d010      	beq.n	80093e0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80093be:	f000 f847 	bl	8009450 <xTaskIncrementTick>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d002      	beq.n	80093ce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80093c8:	4b16      	ldr	r3, [pc, #88]	; (8009424 <xTaskResumeAll+0x130>)
 80093ca:	2201      	movs	r2, #1
 80093cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	3b01      	subs	r3, #1
 80093d2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d1f1      	bne.n	80093be <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80093da:	4b13      	ldr	r3, [pc, #76]	; (8009428 <xTaskResumeAll+0x134>)
 80093dc:	2200      	movs	r2, #0
 80093de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80093e0:	4b10      	ldr	r3, [pc, #64]	; (8009424 <xTaskResumeAll+0x130>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d009      	beq.n	80093fc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80093e8:	2301      	movs	r3, #1
 80093ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80093ec:	4b0f      	ldr	r3, [pc, #60]	; (800942c <xTaskResumeAll+0x138>)
 80093ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093f2:	601a      	str	r2, [r3, #0]
 80093f4:	f3bf 8f4f 	dsb	sy
 80093f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80093fc:	f001 fafe 	bl	800a9fc <vPortExitCritical>

	return xAlreadyYielded;
 8009400:	68bb      	ldr	r3, [r7, #8]
}
 8009402:	4618      	mov	r0, r3
 8009404:	3710      	adds	r7, #16
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	200009e8 	.word	0x200009e8
 8009410:	200009c0 	.word	0x200009c0
 8009414:	20000980 	.word	0x20000980
 8009418:	200009c8 	.word	0x200009c8
 800941c:	200008c4 	.word	0x200008c4
 8009420:	200008c0 	.word	0x200008c0
 8009424:	200009d4 	.word	0x200009d4
 8009428:	200009d0 	.word	0x200009d0
 800942c:	e000ed04 	.word	0xe000ed04

08009430 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009436:	4b05      	ldr	r3, [pc, #20]	; (800944c <xTaskGetTickCount+0x1c>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800943c:	687b      	ldr	r3, [r7, #4]
}
 800943e:	4618      	mov	r0, r3
 8009440:	370c      	adds	r7, #12
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr
 800944a:	bf00      	nop
 800944c:	200009c4 	.word	0x200009c4

08009450 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b086      	sub	sp, #24
 8009454:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009456:	2300      	movs	r3, #0
 8009458:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800945a:	4b4f      	ldr	r3, [pc, #316]	; (8009598 <xTaskIncrementTick+0x148>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	f040 8089 	bne.w	8009576 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009464:	4b4d      	ldr	r3, [pc, #308]	; (800959c <xTaskIncrementTick+0x14c>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	3301      	adds	r3, #1
 800946a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800946c:	4a4b      	ldr	r2, [pc, #300]	; (800959c <xTaskIncrementTick+0x14c>)
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d121      	bne.n	80094bc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009478:	4b49      	ldr	r3, [pc, #292]	; (80095a0 <xTaskIncrementTick+0x150>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d00b      	beq.n	800949a <xTaskIncrementTick+0x4a>
 8009482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009486:	b672      	cpsid	i
 8009488:	f383 8811 	msr	BASEPRI, r3
 800948c:	f3bf 8f6f 	isb	sy
 8009490:	f3bf 8f4f 	dsb	sy
 8009494:	b662      	cpsie	i
 8009496:	603b      	str	r3, [r7, #0]
 8009498:	e7fe      	b.n	8009498 <xTaskIncrementTick+0x48>
 800949a:	4b41      	ldr	r3, [pc, #260]	; (80095a0 <xTaskIncrementTick+0x150>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	60fb      	str	r3, [r7, #12]
 80094a0:	4b40      	ldr	r3, [pc, #256]	; (80095a4 <xTaskIncrementTick+0x154>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a3e      	ldr	r2, [pc, #248]	; (80095a0 <xTaskIncrementTick+0x150>)
 80094a6:	6013      	str	r3, [r2, #0]
 80094a8:	4a3e      	ldr	r2, [pc, #248]	; (80095a4 <xTaskIncrementTick+0x154>)
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	6013      	str	r3, [r2, #0]
 80094ae:	4b3e      	ldr	r3, [pc, #248]	; (80095a8 <xTaskIncrementTick+0x158>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	3301      	adds	r3, #1
 80094b4:	4a3c      	ldr	r2, [pc, #240]	; (80095a8 <xTaskIncrementTick+0x158>)
 80094b6:	6013      	str	r3, [r2, #0]
 80094b8:	f000 fad0 	bl	8009a5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80094bc:	4b3b      	ldr	r3, [pc, #236]	; (80095ac <xTaskIncrementTick+0x15c>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	693a      	ldr	r2, [r7, #16]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d348      	bcc.n	8009558 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094c6:	4b36      	ldr	r3, [pc, #216]	; (80095a0 <xTaskIncrementTick+0x150>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d104      	bne.n	80094da <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094d0:	4b36      	ldr	r3, [pc, #216]	; (80095ac <xTaskIncrementTick+0x15c>)
 80094d2:	f04f 32ff 	mov.w	r2, #4294967295
 80094d6:	601a      	str	r2, [r3, #0]
					break;
 80094d8:	e03e      	b.n	8009558 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094da:	4b31      	ldr	r3, [pc, #196]	; (80095a0 <xTaskIncrementTick+0x150>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	68db      	ldr	r3, [r3, #12]
 80094e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80094ea:	693a      	ldr	r2, [r7, #16]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d203      	bcs.n	80094fa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80094f2:	4a2e      	ldr	r2, [pc, #184]	; (80095ac <xTaskIncrementTick+0x15c>)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80094f8:	e02e      	b.n	8009558 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	3304      	adds	r3, #4
 80094fe:	4618      	mov	r0, r3
 8009500:	f7fe ff09 	bl	8008316 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009508:	2b00      	cmp	r3, #0
 800950a:	d004      	beq.n	8009516 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	3318      	adds	r3, #24
 8009510:	4618      	mov	r0, r3
 8009512:	f7fe ff00 	bl	8008316 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951a:	2201      	movs	r2, #1
 800951c:	409a      	lsls	r2, r3
 800951e:	4b24      	ldr	r3, [pc, #144]	; (80095b0 <xTaskIncrementTick+0x160>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4313      	orrs	r3, r2
 8009524:	4a22      	ldr	r2, [pc, #136]	; (80095b0 <xTaskIncrementTick+0x160>)
 8009526:	6013      	str	r3, [r2, #0]
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800952c:	4613      	mov	r3, r2
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	4413      	add	r3, r2
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	4a1f      	ldr	r2, [pc, #124]	; (80095b4 <xTaskIncrementTick+0x164>)
 8009536:	441a      	add	r2, r3
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	3304      	adds	r3, #4
 800953c:	4619      	mov	r1, r3
 800953e:	4610      	mov	r0, r2
 8009540:	f7fe fe8c 	bl	800825c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009548:	4b1b      	ldr	r3, [pc, #108]	; (80095b8 <xTaskIncrementTick+0x168>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800954e:	429a      	cmp	r2, r3
 8009550:	d3b9      	bcc.n	80094c6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009552:	2301      	movs	r3, #1
 8009554:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009556:	e7b6      	b.n	80094c6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009558:	4b17      	ldr	r3, [pc, #92]	; (80095b8 <xTaskIncrementTick+0x168>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800955e:	4915      	ldr	r1, [pc, #84]	; (80095b4 <xTaskIncrementTick+0x164>)
 8009560:	4613      	mov	r3, r2
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	4413      	add	r3, r2
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	440b      	add	r3, r1
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	2b01      	cmp	r3, #1
 800956e:	d907      	bls.n	8009580 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8009570:	2301      	movs	r3, #1
 8009572:	617b      	str	r3, [r7, #20]
 8009574:	e004      	b.n	8009580 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009576:	4b11      	ldr	r3, [pc, #68]	; (80095bc <xTaskIncrementTick+0x16c>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	3301      	adds	r3, #1
 800957c:	4a0f      	ldr	r2, [pc, #60]	; (80095bc <xTaskIncrementTick+0x16c>)
 800957e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009580:	4b0f      	ldr	r3, [pc, #60]	; (80095c0 <xTaskIncrementTick+0x170>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d001      	beq.n	800958c <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8009588:	2301      	movs	r3, #1
 800958a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800958c:	697b      	ldr	r3, [r7, #20]
}
 800958e:	4618      	mov	r0, r3
 8009590:	3718      	adds	r7, #24
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	200009e8 	.word	0x200009e8
 800959c:	200009c4 	.word	0x200009c4
 80095a0:	20000978 	.word	0x20000978
 80095a4:	2000097c 	.word	0x2000097c
 80095a8:	200009d8 	.word	0x200009d8
 80095ac:	200009e0 	.word	0x200009e0
 80095b0:	200009c8 	.word	0x200009c8
 80095b4:	200008c4 	.word	0x200008c4
 80095b8:	200008c0 	.word	0x200008c0
 80095bc:	200009d0 	.word	0x200009d0
 80095c0:	200009d4 	.word	0x200009d4

080095c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80095c4:	b480      	push	{r7}
 80095c6:	b087      	sub	sp, #28
 80095c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80095ca:	4b27      	ldr	r3, [pc, #156]	; (8009668 <vTaskSwitchContext+0xa4>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d003      	beq.n	80095da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80095d2:	4b26      	ldr	r3, [pc, #152]	; (800966c <vTaskSwitchContext+0xa8>)
 80095d4:	2201      	movs	r2, #1
 80095d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80095d8:	e040      	b.n	800965c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80095da:	4b24      	ldr	r3, [pc, #144]	; (800966c <vTaskSwitchContext+0xa8>)
 80095dc:	2200      	movs	r2, #0
 80095de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095e0:	4b23      	ldr	r3, [pc, #140]	; (8009670 <vTaskSwitchContext+0xac>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	fab3 f383 	clz	r3, r3
 80095ec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80095ee:	7afb      	ldrb	r3, [r7, #11]
 80095f0:	f1c3 031f 	rsb	r3, r3, #31
 80095f4:	617b      	str	r3, [r7, #20]
 80095f6:	491f      	ldr	r1, [pc, #124]	; (8009674 <vTaskSwitchContext+0xb0>)
 80095f8:	697a      	ldr	r2, [r7, #20]
 80095fa:	4613      	mov	r3, r2
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	4413      	add	r3, r2
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	440b      	add	r3, r1
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d10b      	bne.n	8009622 <vTaskSwitchContext+0x5e>
	__asm volatile
 800960a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800960e:	b672      	cpsid	i
 8009610:	f383 8811 	msr	BASEPRI, r3
 8009614:	f3bf 8f6f 	isb	sy
 8009618:	f3bf 8f4f 	dsb	sy
 800961c:	b662      	cpsie	i
 800961e:	607b      	str	r3, [r7, #4]
 8009620:	e7fe      	b.n	8009620 <vTaskSwitchContext+0x5c>
 8009622:	697a      	ldr	r2, [r7, #20]
 8009624:	4613      	mov	r3, r2
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	4413      	add	r3, r2
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	4a11      	ldr	r2, [pc, #68]	; (8009674 <vTaskSwitchContext+0xb0>)
 800962e:	4413      	add	r3, r2
 8009630:	613b      	str	r3, [r7, #16]
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	685a      	ldr	r2, [r3, #4]
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	605a      	str	r2, [r3, #4]
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	685a      	ldr	r2, [r3, #4]
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	3308      	adds	r3, #8
 8009644:	429a      	cmp	r2, r3
 8009646:	d104      	bne.n	8009652 <vTaskSwitchContext+0x8e>
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	685a      	ldr	r2, [r3, #4]
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	605a      	str	r2, [r3, #4]
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	4a07      	ldr	r2, [pc, #28]	; (8009678 <vTaskSwitchContext+0xb4>)
 800965a:	6013      	str	r3, [r2, #0]
}
 800965c:	bf00      	nop
 800965e:	371c      	adds	r7, #28
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr
 8009668:	200009e8 	.word	0x200009e8
 800966c:	200009d4 	.word	0x200009d4
 8009670:	200009c8 	.word	0x200009c8
 8009674:	200008c4 	.word	0x200008c4
 8009678:	200008c0 	.word	0x200008c0

0800967c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d10b      	bne.n	80096a4 <vTaskPlaceOnEventList+0x28>
 800968c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009690:	b672      	cpsid	i
 8009692:	f383 8811 	msr	BASEPRI, r3
 8009696:	f3bf 8f6f 	isb	sy
 800969a:	f3bf 8f4f 	dsb	sy
 800969e:	b662      	cpsie	i
 80096a0:	60fb      	str	r3, [r7, #12]
 80096a2:	e7fe      	b.n	80096a2 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096a4:	4b07      	ldr	r3, [pc, #28]	; (80096c4 <vTaskPlaceOnEventList+0x48>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	3318      	adds	r3, #24
 80096aa:	4619      	mov	r1, r3
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f7fe fdf9 	bl	80082a4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80096b2:	2101      	movs	r1, #1
 80096b4:	6838      	ldr	r0, [r7, #0]
 80096b6:	f000 fc2b 	bl	8009f10 <prvAddCurrentTaskToDelayedList>
}
 80096ba:	bf00      	nop
 80096bc:	3710      	adds	r7, #16
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop
 80096c4:	200008c0 	.word	0x200008c0

080096c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b086      	sub	sp, #24
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d10b      	bne.n	80096f2 <vTaskPlaceOnEventListRestricted+0x2a>
 80096da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096de:	b672      	cpsid	i
 80096e0:	f383 8811 	msr	BASEPRI, r3
 80096e4:	f3bf 8f6f 	isb	sy
 80096e8:	f3bf 8f4f 	dsb	sy
 80096ec:	b662      	cpsie	i
 80096ee:	617b      	str	r3, [r7, #20]
 80096f0:	e7fe      	b.n	80096f0 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096f2:	4b0a      	ldr	r3, [pc, #40]	; (800971c <vTaskPlaceOnEventListRestricted+0x54>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	3318      	adds	r3, #24
 80096f8:	4619      	mov	r1, r3
 80096fa:	68f8      	ldr	r0, [r7, #12]
 80096fc:	f7fe fdae 	bl	800825c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d002      	beq.n	800970c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009706:	f04f 33ff 	mov.w	r3, #4294967295
 800970a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800970c:	6879      	ldr	r1, [r7, #4]
 800970e:	68b8      	ldr	r0, [r7, #8]
 8009710:	f000 fbfe 	bl	8009f10 <prvAddCurrentTaskToDelayedList>
	}
 8009714:	bf00      	nop
 8009716:	3718      	adds	r7, #24
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}
 800971c:	200008c0 	.word	0x200008c0

08009720 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b086      	sub	sp, #24
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	68db      	ldr	r3, [r3, #12]
 800972e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d10b      	bne.n	800974e <xTaskRemoveFromEventList+0x2e>
 8009736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973a:	b672      	cpsid	i
 800973c:	f383 8811 	msr	BASEPRI, r3
 8009740:	f3bf 8f6f 	isb	sy
 8009744:	f3bf 8f4f 	dsb	sy
 8009748:	b662      	cpsie	i
 800974a:	60fb      	str	r3, [r7, #12]
 800974c:	e7fe      	b.n	800974c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	3318      	adds	r3, #24
 8009752:	4618      	mov	r0, r3
 8009754:	f7fe fddf 	bl	8008316 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009758:	4b1d      	ldr	r3, [pc, #116]	; (80097d0 <xTaskRemoveFromEventList+0xb0>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d11c      	bne.n	800979a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	3304      	adds	r3, #4
 8009764:	4618      	mov	r0, r3
 8009766:	f7fe fdd6 	bl	8008316 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800976e:	2201      	movs	r2, #1
 8009770:	409a      	lsls	r2, r3
 8009772:	4b18      	ldr	r3, [pc, #96]	; (80097d4 <xTaskRemoveFromEventList+0xb4>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4313      	orrs	r3, r2
 8009778:	4a16      	ldr	r2, [pc, #88]	; (80097d4 <xTaskRemoveFromEventList+0xb4>)
 800977a:	6013      	str	r3, [r2, #0]
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009780:	4613      	mov	r3, r2
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	4413      	add	r3, r2
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	4a13      	ldr	r2, [pc, #76]	; (80097d8 <xTaskRemoveFromEventList+0xb8>)
 800978a:	441a      	add	r2, r3
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	3304      	adds	r3, #4
 8009790:	4619      	mov	r1, r3
 8009792:	4610      	mov	r0, r2
 8009794:	f7fe fd62 	bl	800825c <vListInsertEnd>
 8009798:	e005      	b.n	80097a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	3318      	adds	r3, #24
 800979e:	4619      	mov	r1, r3
 80097a0:	480e      	ldr	r0, [pc, #56]	; (80097dc <xTaskRemoveFromEventList+0xbc>)
 80097a2:	f7fe fd5b 	bl	800825c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097aa:	4b0d      	ldr	r3, [pc, #52]	; (80097e0 <xTaskRemoveFromEventList+0xc0>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d905      	bls.n	80097c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80097b4:	2301      	movs	r3, #1
 80097b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80097b8:	4b0a      	ldr	r3, [pc, #40]	; (80097e4 <xTaskRemoveFromEventList+0xc4>)
 80097ba:	2201      	movs	r2, #1
 80097bc:	601a      	str	r2, [r3, #0]
 80097be:	e001      	b.n	80097c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80097c0:	2300      	movs	r3, #0
 80097c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80097c4:	697b      	ldr	r3, [r7, #20]
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3718      	adds	r7, #24
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop
 80097d0:	200009e8 	.word	0x200009e8
 80097d4:	200009c8 	.word	0x200009c8
 80097d8:	200008c4 	.word	0x200008c4
 80097dc:	20000980 	.word	0x20000980
 80097e0:	200008c0 	.word	0x200008c0
 80097e4:	200009d4 	.word	0x200009d4

080097e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80097e8:	b480      	push	{r7}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80097f0:	4b06      	ldr	r3, [pc, #24]	; (800980c <vTaskInternalSetTimeOutState+0x24>)
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80097f8:	4b05      	ldr	r3, [pc, #20]	; (8009810 <vTaskInternalSetTimeOutState+0x28>)
 80097fa:	681a      	ldr	r2, [r3, #0]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	605a      	str	r2, [r3, #4]
}
 8009800:	bf00      	nop
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr
 800980c:	200009d8 	.word	0x200009d8
 8009810:	200009c4 	.word	0x200009c4

08009814 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b088      	sub	sp, #32
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d10b      	bne.n	800983c <xTaskCheckForTimeOut+0x28>
 8009824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009828:	b672      	cpsid	i
 800982a:	f383 8811 	msr	BASEPRI, r3
 800982e:	f3bf 8f6f 	isb	sy
 8009832:	f3bf 8f4f 	dsb	sy
 8009836:	b662      	cpsie	i
 8009838:	613b      	str	r3, [r7, #16]
 800983a:	e7fe      	b.n	800983a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d10b      	bne.n	800985a <xTaskCheckForTimeOut+0x46>
 8009842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009846:	b672      	cpsid	i
 8009848:	f383 8811 	msr	BASEPRI, r3
 800984c:	f3bf 8f6f 	isb	sy
 8009850:	f3bf 8f4f 	dsb	sy
 8009854:	b662      	cpsie	i
 8009856:	60fb      	str	r3, [r7, #12]
 8009858:	e7fe      	b.n	8009858 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800985a:	f001 f89d 	bl	800a998 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800985e:	4b1d      	ldr	r3, [pc, #116]	; (80098d4 <xTaskCheckForTimeOut+0xc0>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	69ba      	ldr	r2, [r7, #24]
 800986a:	1ad3      	subs	r3, r2, r3
 800986c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009876:	d102      	bne.n	800987e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009878:	2300      	movs	r3, #0
 800987a:	61fb      	str	r3, [r7, #28]
 800987c:	e023      	b.n	80098c6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	4b15      	ldr	r3, [pc, #84]	; (80098d8 <xTaskCheckForTimeOut+0xc4>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	429a      	cmp	r2, r3
 8009888:	d007      	beq.n	800989a <xTaskCheckForTimeOut+0x86>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	69ba      	ldr	r2, [r7, #24]
 8009890:	429a      	cmp	r2, r3
 8009892:	d302      	bcc.n	800989a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009894:	2301      	movs	r3, #1
 8009896:	61fb      	str	r3, [r7, #28]
 8009898:	e015      	b.n	80098c6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	697a      	ldr	r2, [r7, #20]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d20b      	bcs.n	80098bc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	1ad2      	subs	r2, r2, r3
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f7ff ff99 	bl	80097e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80098b6:	2300      	movs	r3, #0
 80098b8:	61fb      	str	r3, [r7, #28]
 80098ba:	e004      	b.n	80098c6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	2200      	movs	r2, #0
 80098c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80098c2:	2301      	movs	r3, #1
 80098c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80098c6:	f001 f899 	bl	800a9fc <vPortExitCritical>

	return xReturn;
 80098ca:	69fb      	ldr	r3, [r7, #28]
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3720      	adds	r7, #32
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}
 80098d4:	200009c4 	.word	0x200009c4
 80098d8:	200009d8 	.word	0x200009d8

080098dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80098dc:	b480      	push	{r7}
 80098de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80098e0:	4b03      	ldr	r3, [pc, #12]	; (80098f0 <vTaskMissedYield+0x14>)
 80098e2:	2201      	movs	r2, #1
 80098e4:	601a      	str	r2, [r3, #0]
}
 80098e6:	bf00      	nop
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr
 80098f0:	200009d4 	.word	0x200009d4

080098f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b082      	sub	sp, #8
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80098fc:	f000 f852 	bl	80099a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009900:	4b06      	ldr	r3, [pc, #24]	; (800991c <prvIdleTask+0x28>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	2b01      	cmp	r3, #1
 8009906:	d9f9      	bls.n	80098fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8009908:	4b05      	ldr	r3, [pc, #20]	; (8009920 <prvIdleTask+0x2c>)
 800990a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800990e:	601a      	str	r2, [r3, #0]
 8009910:	f3bf 8f4f 	dsb	sy
 8009914:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009918:	e7f0      	b.n	80098fc <prvIdleTask+0x8>
 800991a:	bf00      	nop
 800991c:	200008c4 	.word	0x200008c4
 8009920:	e000ed04 	.word	0xe000ed04

08009924 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800992a:	2300      	movs	r3, #0
 800992c:	607b      	str	r3, [r7, #4]
 800992e:	e00c      	b.n	800994a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	4613      	mov	r3, r2
 8009934:	009b      	lsls	r3, r3, #2
 8009936:	4413      	add	r3, r2
 8009938:	009b      	lsls	r3, r3, #2
 800993a:	4a12      	ldr	r2, [pc, #72]	; (8009984 <prvInitialiseTaskLists+0x60>)
 800993c:	4413      	add	r3, r2
 800993e:	4618      	mov	r0, r3
 8009940:	f7fe fc5f 	bl	8008202 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	3301      	adds	r3, #1
 8009948:	607b      	str	r3, [r7, #4]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2b06      	cmp	r3, #6
 800994e:	d9ef      	bls.n	8009930 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009950:	480d      	ldr	r0, [pc, #52]	; (8009988 <prvInitialiseTaskLists+0x64>)
 8009952:	f7fe fc56 	bl	8008202 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009956:	480d      	ldr	r0, [pc, #52]	; (800998c <prvInitialiseTaskLists+0x68>)
 8009958:	f7fe fc53 	bl	8008202 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800995c:	480c      	ldr	r0, [pc, #48]	; (8009990 <prvInitialiseTaskLists+0x6c>)
 800995e:	f7fe fc50 	bl	8008202 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009962:	480c      	ldr	r0, [pc, #48]	; (8009994 <prvInitialiseTaskLists+0x70>)
 8009964:	f7fe fc4d 	bl	8008202 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009968:	480b      	ldr	r0, [pc, #44]	; (8009998 <prvInitialiseTaskLists+0x74>)
 800996a:	f7fe fc4a 	bl	8008202 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800996e:	4b0b      	ldr	r3, [pc, #44]	; (800999c <prvInitialiseTaskLists+0x78>)
 8009970:	4a05      	ldr	r2, [pc, #20]	; (8009988 <prvInitialiseTaskLists+0x64>)
 8009972:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009974:	4b0a      	ldr	r3, [pc, #40]	; (80099a0 <prvInitialiseTaskLists+0x7c>)
 8009976:	4a05      	ldr	r2, [pc, #20]	; (800998c <prvInitialiseTaskLists+0x68>)
 8009978:	601a      	str	r2, [r3, #0]
}
 800997a:	bf00      	nop
 800997c:	3708      	adds	r7, #8
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	200008c4 	.word	0x200008c4
 8009988:	20000950 	.word	0x20000950
 800998c:	20000964 	.word	0x20000964
 8009990:	20000980 	.word	0x20000980
 8009994:	20000994 	.word	0x20000994
 8009998:	200009ac 	.word	0x200009ac
 800999c:	20000978 	.word	0x20000978
 80099a0:	2000097c 	.word	0x2000097c

080099a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80099aa:	e019      	b.n	80099e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80099ac:	f000 fff4 	bl	800a998 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099b0:	4b0f      	ldr	r3, [pc, #60]	; (80099f0 <prvCheckTasksWaitingTermination+0x4c>)
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	68db      	ldr	r3, [r3, #12]
 80099b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	3304      	adds	r3, #4
 80099bc:	4618      	mov	r0, r3
 80099be:	f7fe fcaa 	bl	8008316 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80099c2:	4b0c      	ldr	r3, [pc, #48]	; (80099f4 <prvCheckTasksWaitingTermination+0x50>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	3b01      	subs	r3, #1
 80099c8:	4a0a      	ldr	r2, [pc, #40]	; (80099f4 <prvCheckTasksWaitingTermination+0x50>)
 80099ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80099cc:	4b0a      	ldr	r3, [pc, #40]	; (80099f8 <prvCheckTasksWaitingTermination+0x54>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	3b01      	subs	r3, #1
 80099d2:	4a09      	ldr	r2, [pc, #36]	; (80099f8 <prvCheckTasksWaitingTermination+0x54>)
 80099d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80099d6:	f001 f811 	bl	800a9fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 f80e 	bl	80099fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80099e0:	4b05      	ldr	r3, [pc, #20]	; (80099f8 <prvCheckTasksWaitingTermination+0x54>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d1e1      	bne.n	80099ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80099e8:	bf00      	nop
 80099ea:	3708      	adds	r7, #8
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	20000994 	.word	0x20000994
 80099f4:	200009c0 	.word	0x200009c0
 80099f8:	200009a8 	.word	0x200009a8

080099fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d108      	bne.n	8009a20 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a12:	4618      	mov	r0, r3
 8009a14:	f001 f9aa 	bl	800ad6c <vPortFree>
				vPortFree( pxTCB );
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f001 f9a7 	bl	800ad6c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009a1e:	e019      	b.n	8009a54 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d103      	bne.n	8009a32 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f001 f99e 	bl	800ad6c <vPortFree>
	}
 8009a30:	e010      	b.n	8009a54 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a38:	2b02      	cmp	r3, #2
 8009a3a:	d00b      	beq.n	8009a54 <prvDeleteTCB+0x58>
 8009a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a40:	b672      	cpsid	i
 8009a42:	f383 8811 	msr	BASEPRI, r3
 8009a46:	f3bf 8f6f 	isb	sy
 8009a4a:	f3bf 8f4f 	dsb	sy
 8009a4e:	b662      	cpsie	i
 8009a50:	60fb      	str	r3, [r7, #12]
 8009a52:	e7fe      	b.n	8009a52 <prvDeleteTCB+0x56>
	}
 8009a54:	bf00      	nop
 8009a56:	3710      	adds	r7, #16
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a62:	4b0c      	ldr	r3, [pc, #48]	; (8009a94 <prvResetNextTaskUnblockTime+0x38>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d104      	bne.n	8009a76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009a6c:	4b0a      	ldr	r3, [pc, #40]	; (8009a98 <prvResetNextTaskUnblockTime+0x3c>)
 8009a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8009a72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009a74:	e008      	b.n	8009a88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a76:	4b07      	ldr	r3, [pc, #28]	; (8009a94 <prvResetNextTaskUnblockTime+0x38>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	68db      	ldr	r3, [r3, #12]
 8009a7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	4a04      	ldr	r2, [pc, #16]	; (8009a98 <prvResetNextTaskUnblockTime+0x3c>)
 8009a86:	6013      	str	r3, [r2, #0]
}
 8009a88:	bf00      	nop
 8009a8a:	370c      	adds	r7, #12
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr
 8009a94:	20000978 	.word	0x20000978
 8009a98:	200009e0 	.word	0x200009e0

08009a9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009aa2:	4b0b      	ldr	r3, [pc, #44]	; (8009ad0 <xTaskGetSchedulerState+0x34>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d102      	bne.n	8009ab0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	607b      	str	r3, [r7, #4]
 8009aae:	e008      	b.n	8009ac2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ab0:	4b08      	ldr	r3, [pc, #32]	; (8009ad4 <xTaskGetSchedulerState+0x38>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d102      	bne.n	8009abe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009ab8:	2302      	movs	r3, #2
 8009aba:	607b      	str	r3, [r7, #4]
 8009abc:	e001      	b.n	8009ac2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009ac2:	687b      	ldr	r3, [r7, #4]
	}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	370c      	adds	r7, #12
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr
 8009ad0:	200009cc 	.word	0x200009cc
 8009ad4:	200009e8 	.word	0x200009e8

08009ad8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b086      	sub	sp, #24
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d070      	beq.n	8009bd0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009aee:	4b3b      	ldr	r3, [pc, #236]	; (8009bdc <xTaskPriorityDisinherit+0x104>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	693a      	ldr	r2, [r7, #16]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d00b      	beq.n	8009b10 <xTaskPriorityDisinherit+0x38>
 8009af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afc:	b672      	cpsid	i
 8009afe:	f383 8811 	msr	BASEPRI, r3
 8009b02:	f3bf 8f6f 	isb	sy
 8009b06:	f3bf 8f4f 	dsb	sy
 8009b0a:	b662      	cpsie	i
 8009b0c:	60fb      	str	r3, [r7, #12]
 8009b0e:	e7fe      	b.n	8009b0e <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d10b      	bne.n	8009b30 <xTaskPriorityDisinherit+0x58>
 8009b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1c:	b672      	cpsid	i
 8009b1e:	f383 8811 	msr	BASEPRI, r3
 8009b22:	f3bf 8f6f 	isb	sy
 8009b26:	f3bf 8f4f 	dsb	sy
 8009b2a:	b662      	cpsie	i
 8009b2c:	60bb      	str	r3, [r7, #8]
 8009b2e:	e7fe      	b.n	8009b2e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b34:	1e5a      	subs	r2, r3, #1
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d044      	beq.n	8009bd0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d140      	bne.n	8009bd0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	3304      	adds	r3, #4
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7fe fbdf 	bl	8008316 <uxListRemove>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d115      	bne.n	8009b8a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b62:	491f      	ldr	r1, [pc, #124]	; (8009be0 <xTaskPriorityDisinherit+0x108>)
 8009b64:	4613      	mov	r3, r2
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	4413      	add	r3, r2
 8009b6a:	009b      	lsls	r3, r3, #2
 8009b6c:	440b      	add	r3, r1
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d10a      	bne.n	8009b8a <xTaskPriorityDisinherit+0xb2>
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b78:	2201      	movs	r2, #1
 8009b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b7e:	43da      	mvns	r2, r3
 8009b80:	4b18      	ldr	r3, [pc, #96]	; (8009be4 <xTaskPriorityDisinherit+0x10c>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4013      	ands	r3, r2
 8009b86:	4a17      	ldr	r2, [pc, #92]	; (8009be4 <xTaskPriorityDisinherit+0x10c>)
 8009b88:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b96:	f1c3 0207 	rsb	r2, r3, #7
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	409a      	lsls	r2, r3
 8009ba6:	4b0f      	ldr	r3, [pc, #60]	; (8009be4 <xTaskPriorityDisinherit+0x10c>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4313      	orrs	r3, r2
 8009bac:	4a0d      	ldr	r2, [pc, #52]	; (8009be4 <xTaskPriorityDisinherit+0x10c>)
 8009bae:	6013      	str	r3, [r2, #0]
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bb4:	4613      	mov	r3, r2
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	4413      	add	r3, r2
 8009bba:	009b      	lsls	r3, r3, #2
 8009bbc:	4a08      	ldr	r2, [pc, #32]	; (8009be0 <xTaskPriorityDisinherit+0x108>)
 8009bbe:	441a      	add	r2, r3
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	3304      	adds	r3, #4
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	4610      	mov	r0, r2
 8009bc8:	f7fe fb48 	bl	800825c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009bd0:	697b      	ldr	r3, [r7, #20]
	}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3718      	adds	r7, #24
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	200008c0 	.word	0x200008c0
 8009be0:	200008c4 	.word	0x200008c4
 8009be4:	200009c8 	.word	0x200009c8

08009be8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8009bf2:	f000 fed1 	bl	800a998 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8009bf6:	4b1e      	ldr	r3, [pc, #120]	; (8009c70 <ulTaskNotifyTake+0x88>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d113      	bne.n	8009c28 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009c00:	4b1b      	ldr	r3, [pc, #108]	; (8009c70 <ulTaskNotifyTake+0x88>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	2201      	movs	r2, #1
 8009c06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d00b      	beq.n	8009c28 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009c10:	2101      	movs	r1, #1
 8009c12:	6838      	ldr	r0, [r7, #0]
 8009c14:	f000 f97c 	bl	8009f10 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009c18:	4b16      	ldr	r3, [pc, #88]	; (8009c74 <ulTaskNotifyTake+0x8c>)
 8009c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c1e:	601a      	str	r2, [r3, #0]
 8009c20:	f3bf 8f4f 	dsb	sy
 8009c24:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009c28:	f000 fee8 	bl	800a9fc <vPortExitCritical>

		taskENTER_CRITICAL();
 8009c2c:	f000 feb4 	bl	800a998 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8009c30:	4b0f      	ldr	r3, [pc, #60]	; (8009c70 <ulTaskNotifyTake+0x88>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c36:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d00c      	beq.n	8009c58 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d004      	beq.n	8009c4e <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8009c44:	4b0a      	ldr	r3, [pc, #40]	; (8009c70 <ulTaskNotifyTake+0x88>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	64da      	str	r2, [r3, #76]	; 0x4c
 8009c4c:	e004      	b.n	8009c58 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8009c4e:	4b08      	ldr	r3, [pc, #32]	; (8009c70 <ulTaskNotifyTake+0x88>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	68fa      	ldr	r2, [r7, #12]
 8009c54:	3a01      	subs	r2, #1
 8009c56:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009c58:	4b05      	ldr	r3, [pc, #20]	; (8009c70 <ulTaskNotifyTake+0x88>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8009c62:	f000 fecb 	bl	800a9fc <vPortExitCritical>

		return ulReturn;
 8009c66:	68fb      	ldr	r3, [r7, #12]
	}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3710      	adds	r7, #16
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}
 8009c70:	200008c0 	.word	0x200008c0
 8009c74:	e000ed04 	.word	0xe000ed04

08009c78 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b08a      	sub	sp, #40	; 0x28
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	603b      	str	r3, [r7, #0]
 8009c84:	4613      	mov	r3, r2
 8009c86:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d10b      	bne.n	8009caa <xTaskGenericNotify+0x32>
 8009c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c96:	b672      	cpsid	i
 8009c98:	f383 8811 	msr	BASEPRI, r3
 8009c9c:	f3bf 8f6f 	isb	sy
 8009ca0:	f3bf 8f4f 	dsb	sy
 8009ca4:	b662      	cpsie	i
 8009ca6:	61bb      	str	r3, [r7, #24]
 8009ca8:	e7fe      	b.n	8009ca8 <xTaskGenericNotify+0x30>
		pxTCB = xTaskToNotify;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8009cae:	f000 fe73 	bl	800a998 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d003      	beq.n	8009cc0 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009cb8:	6a3b      	ldr	r3, [r7, #32]
 8009cba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009cc0:	6a3b      	ldr	r3, [r7, #32]
 8009cc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009cc6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009cc8:	6a3b      	ldr	r3, [r7, #32]
 8009cca:	2202      	movs	r2, #2
 8009ccc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8009cd0:	79fb      	ldrb	r3, [r7, #7]
 8009cd2:	2b04      	cmp	r3, #4
 8009cd4:	d827      	bhi.n	8009d26 <xTaskGenericNotify+0xae>
 8009cd6:	a201      	add	r2, pc, #4	; (adr r2, 8009cdc <xTaskGenericNotify+0x64>)
 8009cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cdc:	08009d49 	.word	0x08009d49
 8009ce0:	08009cf1 	.word	0x08009cf1
 8009ce4:	08009cff 	.word	0x08009cff
 8009ce8:	08009d0b 	.word	0x08009d0b
 8009cec:	08009d13 	.word	0x08009d13
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009cf0:	6a3b      	ldr	r3, [r7, #32]
 8009cf2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	431a      	orrs	r2, r3
 8009cf8:	6a3b      	ldr	r3, [r7, #32]
 8009cfa:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8009cfc:	e027      	b.n	8009d4e <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009cfe:	6a3b      	ldr	r3, [r7, #32]
 8009d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d02:	1c5a      	adds	r2, r3, #1
 8009d04:	6a3b      	ldr	r3, [r7, #32]
 8009d06:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8009d08:	e021      	b.n	8009d4e <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009d0a:	6a3b      	ldr	r3, [r7, #32]
 8009d0c:	68ba      	ldr	r2, [r7, #8]
 8009d0e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8009d10:	e01d      	b.n	8009d4e <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009d12:	7ffb      	ldrb	r3, [r7, #31]
 8009d14:	2b02      	cmp	r3, #2
 8009d16:	d003      	beq.n	8009d20 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009d18:	6a3b      	ldr	r3, [r7, #32]
 8009d1a:	68ba      	ldr	r2, [r7, #8]
 8009d1c:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009d1e:	e016      	b.n	8009d4e <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 8009d20:	2300      	movs	r3, #0
 8009d22:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8009d24:	e013      	b.n	8009d4e <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009d26:	6a3b      	ldr	r3, [r7, #32]
 8009d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d2e:	d00d      	beq.n	8009d4c <xTaskGenericNotify+0xd4>
 8009d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d34:	b672      	cpsid	i
 8009d36:	f383 8811 	msr	BASEPRI, r3
 8009d3a:	f3bf 8f6f 	isb	sy
 8009d3e:	f3bf 8f4f 	dsb	sy
 8009d42:	b662      	cpsie	i
 8009d44:	617b      	str	r3, [r7, #20]
 8009d46:	e7fe      	b.n	8009d46 <xTaskGenericNotify+0xce>
					break;
 8009d48:	bf00      	nop
 8009d4a:	e000      	b.n	8009d4e <xTaskGenericNotify+0xd6>

					break;
 8009d4c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009d4e:	7ffb      	ldrb	r3, [r7, #31]
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d13a      	bne.n	8009dca <xTaskGenericNotify+0x152>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d54:	6a3b      	ldr	r3, [r7, #32]
 8009d56:	3304      	adds	r3, #4
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f7fe fadc 	bl	8008316 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009d5e:	6a3b      	ldr	r3, [r7, #32]
 8009d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d62:	2201      	movs	r2, #1
 8009d64:	409a      	lsls	r2, r3
 8009d66:	4b1c      	ldr	r3, [pc, #112]	; (8009dd8 <xTaskGenericNotify+0x160>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	4a1a      	ldr	r2, [pc, #104]	; (8009dd8 <xTaskGenericNotify+0x160>)
 8009d6e:	6013      	str	r3, [r2, #0]
 8009d70:	6a3b      	ldr	r3, [r7, #32]
 8009d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d74:	4613      	mov	r3, r2
 8009d76:	009b      	lsls	r3, r3, #2
 8009d78:	4413      	add	r3, r2
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	4a17      	ldr	r2, [pc, #92]	; (8009ddc <xTaskGenericNotify+0x164>)
 8009d7e:	441a      	add	r2, r3
 8009d80:	6a3b      	ldr	r3, [r7, #32]
 8009d82:	3304      	adds	r3, #4
 8009d84:	4619      	mov	r1, r3
 8009d86:	4610      	mov	r0, r2
 8009d88:	f7fe fa68 	bl	800825c <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009d8c:	6a3b      	ldr	r3, [r7, #32]
 8009d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d00b      	beq.n	8009dac <xTaskGenericNotify+0x134>
 8009d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d98:	b672      	cpsid	i
 8009d9a:	f383 8811 	msr	BASEPRI, r3
 8009d9e:	f3bf 8f6f 	isb	sy
 8009da2:	f3bf 8f4f 	dsb	sy
 8009da6:	b662      	cpsie	i
 8009da8:	613b      	str	r3, [r7, #16]
 8009daa:	e7fe      	b.n	8009daa <xTaskGenericNotify+0x132>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009dac:	6a3b      	ldr	r3, [r7, #32]
 8009dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009db0:	4b0b      	ldr	r3, [pc, #44]	; (8009de0 <xTaskGenericNotify+0x168>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d907      	bls.n	8009dca <xTaskGenericNotify+0x152>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009dba:	4b0a      	ldr	r3, [pc, #40]	; (8009de4 <xTaskGenericNotify+0x16c>)
 8009dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dc0:	601a      	str	r2, [r3, #0]
 8009dc2:	f3bf 8f4f 	dsb	sy
 8009dc6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009dca:	f000 fe17 	bl	800a9fc <vPortExitCritical>

		return xReturn;
 8009dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3728      	adds	r7, #40	; 0x28
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}
 8009dd8:	200009c8 	.word	0x200009c8
 8009ddc:	200008c4 	.word	0x200008c4
 8009de0:	200008c0 	.word	0x200008c0
 8009de4:	e000ed04 	.word	0xe000ed04

08009de8 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b08a      	sub	sp, #40	; 0x28
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d10b      	bne.n	8009e10 <vTaskNotifyGiveFromISR+0x28>
 8009df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dfc:	b672      	cpsid	i
 8009dfe:	f383 8811 	msr	BASEPRI, r3
 8009e02:	f3bf 8f6f 	isb	sy
 8009e06:	f3bf 8f4f 	dsb	sy
 8009e0a:	b662      	cpsie	i
 8009e0c:	61bb      	str	r3, [r7, #24]
 8009e0e:	e7fe      	b.n	8009e0e <vTaskNotifyGiveFromISR+0x26>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009e10:	f000 fea2 	bl	800ab58 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 8009e18:	f3ef 8211 	mrs	r2, BASEPRI
 8009e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e20:	b672      	cpsid	i
 8009e22:	f383 8811 	msr	BASEPRI, r3
 8009e26:	f3bf 8f6f 	isb	sy
 8009e2a:	f3bf 8f4f 	dsb	sy
 8009e2e:	b662      	cpsie	i
 8009e30:	617a      	str	r2, [r7, #20]
 8009e32:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009e34:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009e36:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009e3e:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e42:	2202      	movs	r2, #2
 8009e44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8009e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e4c:	1c5a      	adds	r2, r3, #1
 8009e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e50:	64da      	str	r2, [r3, #76]	; 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009e52:	7ffb      	ldrb	r3, [r7, #31]
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d146      	bne.n	8009ee6 <vTaskNotifyGiveFromISR+0xfe>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d00b      	beq.n	8009e78 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 8009e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e64:	b672      	cpsid	i
 8009e66:	f383 8811 	msr	BASEPRI, r3
 8009e6a:	f3bf 8f6f 	isb	sy
 8009e6e:	f3bf 8f4f 	dsb	sy
 8009e72:	b662      	cpsie	i
 8009e74:	60fb      	str	r3, [r7, #12]
 8009e76:	e7fe      	b.n	8009e76 <vTaskNotifyGiveFromISR+0x8e>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e78:	4b1f      	ldr	r3, [pc, #124]	; (8009ef8 <vTaskNotifyGiveFromISR+0x110>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d11c      	bne.n	8009eba <vTaskNotifyGiveFromISR+0xd2>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e82:	3304      	adds	r3, #4
 8009e84:	4618      	mov	r0, r3
 8009e86:	f7fe fa46 	bl	8008316 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e8e:	2201      	movs	r2, #1
 8009e90:	409a      	lsls	r2, r3
 8009e92:	4b1a      	ldr	r3, [pc, #104]	; (8009efc <vTaskNotifyGiveFromISR+0x114>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4313      	orrs	r3, r2
 8009e98:	4a18      	ldr	r2, [pc, #96]	; (8009efc <vTaskNotifyGiveFromISR+0x114>)
 8009e9a:	6013      	str	r3, [r2, #0]
 8009e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ea0:	4613      	mov	r3, r2
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	4413      	add	r3, r2
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	4a15      	ldr	r2, [pc, #84]	; (8009f00 <vTaskNotifyGiveFromISR+0x118>)
 8009eaa:	441a      	add	r2, r3
 8009eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eae:	3304      	adds	r3, #4
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	4610      	mov	r0, r2
 8009eb4:	f7fe f9d2 	bl	800825c <vListInsertEnd>
 8009eb8:	e005      	b.n	8009ec6 <vTaskNotifyGiveFromISR+0xde>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ebc:	3318      	adds	r3, #24
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	4810      	ldr	r0, [pc, #64]	; (8009f04 <vTaskNotifyGiveFromISR+0x11c>)
 8009ec2:	f7fe f9cb 	bl	800825c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eca:	4b0f      	ldr	r3, [pc, #60]	; (8009f08 <vTaskNotifyGiveFromISR+0x120>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d908      	bls.n	8009ee6 <vTaskNotifyGiveFromISR+0xfe>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d002      	beq.n	8009ee0 <vTaskNotifyGiveFromISR+0xf8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	2201      	movs	r2, #1
 8009ede:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8009ee0:	4b0a      	ldr	r3, [pc, #40]	; (8009f0c <vTaskNotifyGiveFromISR+0x124>)
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	601a      	str	r2, [r3, #0]
 8009ee6:	6a3b      	ldr	r3, [r7, #32]
 8009ee8:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8009ef0:	bf00      	nop
 8009ef2:	3728      	adds	r7, #40	; 0x28
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}
 8009ef8:	200009e8 	.word	0x200009e8
 8009efc:	200009c8 	.word	0x200009c8
 8009f00:	200008c4 	.word	0x200008c4
 8009f04:	20000980 	.word	0x20000980
 8009f08:	200008c0 	.word	0x200008c0
 8009f0c:	200009d4 	.word	0x200009d4

08009f10 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009f1a:	4b29      	ldr	r3, [pc, #164]	; (8009fc0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f20:	4b28      	ldr	r3, [pc, #160]	; (8009fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	3304      	adds	r3, #4
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7fe f9f5 	bl	8008316 <uxListRemove>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d10b      	bne.n	8009f4a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009f32:	4b24      	ldr	r3, [pc, #144]	; (8009fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f38:	2201      	movs	r2, #1
 8009f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8009f3e:	43da      	mvns	r2, r3
 8009f40:	4b21      	ldr	r3, [pc, #132]	; (8009fc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4013      	ands	r3, r2
 8009f46:	4a20      	ldr	r2, [pc, #128]	; (8009fc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009f48:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f50:	d10a      	bne.n	8009f68 <prvAddCurrentTaskToDelayedList+0x58>
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d007      	beq.n	8009f68 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f58:	4b1a      	ldr	r3, [pc, #104]	; (8009fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	3304      	adds	r3, #4
 8009f5e:	4619      	mov	r1, r3
 8009f60:	481a      	ldr	r0, [pc, #104]	; (8009fcc <prvAddCurrentTaskToDelayedList+0xbc>)
 8009f62:	f7fe f97b 	bl	800825c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009f66:	e026      	b.n	8009fb6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009f68:	68fa      	ldr	r2, [r7, #12]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4413      	add	r3, r2
 8009f6e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009f70:	4b14      	ldr	r3, [pc, #80]	; (8009fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	68ba      	ldr	r2, [r7, #8]
 8009f76:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009f78:	68ba      	ldr	r2, [r7, #8]
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d209      	bcs.n	8009f94 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f80:	4b13      	ldr	r3, [pc, #76]	; (8009fd0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	4b0f      	ldr	r3, [pc, #60]	; (8009fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	3304      	adds	r3, #4
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	4610      	mov	r0, r2
 8009f8e:	f7fe f989 	bl	80082a4 <vListInsert>
}
 8009f92:	e010      	b.n	8009fb6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f94:	4b0f      	ldr	r3, [pc, #60]	; (8009fd4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	4b0a      	ldr	r3, [pc, #40]	; (8009fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	3304      	adds	r3, #4
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	4610      	mov	r0, r2
 8009fa2:	f7fe f97f 	bl	80082a4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009fa6:	4b0c      	ldr	r3, [pc, #48]	; (8009fd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	68ba      	ldr	r2, [r7, #8]
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d202      	bcs.n	8009fb6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009fb0:	4a09      	ldr	r2, [pc, #36]	; (8009fd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	6013      	str	r3, [r2, #0]
}
 8009fb6:	bf00      	nop
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
 8009fbe:	bf00      	nop
 8009fc0:	200009c4 	.word	0x200009c4
 8009fc4:	200008c0 	.word	0x200008c0
 8009fc8:	200009c8 	.word	0x200009c8
 8009fcc:	200009ac 	.word	0x200009ac
 8009fd0:	2000097c 	.word	0x2000097c
 8009fd4:	20000978 	.word	0x20000978
 8009fd8:	200009e0 	.word	0x200009e0

08009fdc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b08a      	sub	sp, #40	; 0x28
 8009fe0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009fe6:	f000 fb91 	bl	800a70c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009fea:	4b1d      	ldr	r3, [pc, #116]	; (800a060 <xTimerCreateTimerTask+0x84>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d021      	beq.n	800a036 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009ffa:	1d3a      	adds	r2, r7, #4
 8009ffc:	f107 0108 	add.w	r1, r7, #8
 800a000:	f107 030c 	add.w	r3, r7, #12
 800a004:	4618      	mov	r0, r3
 800a006:	f7f7 fd99 	bl	8001b3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a00a:	6879      	ldr	r1, [r7, #4]
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	68fa      	ldr	r2, [r7, #12]
 800a010:	9202      	str	r2, [sp, #8]
 800a012:	9301      	str	r3, [sp, #4]
 800a014:	2302      	movs	r3, #2
 800a016:	9300      	str	r3, [sp, #0]
 800a018:	2300      	movs	r3, #0
 800a01a:	460a      	mov	r2, r1
 800a01c:	4911      	ldr	r1, [pc, #68]	; (800a064 <xTimerCreateTimerTask+0x88>)
 800a01e:	4812      	ldr	r0, [pc, #72]	; (800a068 <xTimerCreateTimerTask+0x8c>)
 800a020:	f7fe ff24 	bl	8008e6c <xTaskCreateStatic>
 800a024:	4602      	mov	r2, r0
 800a026:	4b11      	ldr	r3, [pc, #68]	; (800a06c <xTimerCreateTimerTask+0x90>)
 800a028:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a02a:	4b10      	ldr	r3, [pc, #64]	; (800a06c <xTimerCreateTimerTask+0x90>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d001      	beq.n	800a036 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a032:	2301      	movs	r3, #1
 800a034:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d10b      	bne.n	800a054 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a040:	b672      	cpsid	i
 800a042:	f383 8811 	msr	BASEPRI, r3
 800a046:	f3bf 8f6f 	isb	sy
 800a04a:	f3bf 8f4f 	dsb	sy
 800a04e:	b662      	cpsie	i
 800a050:	613b      	str	r3, [r7, #16]
 800a052:	e7fe      	b.n	800a052 <xTimerCreateTimerTask+0x76>
	return xReturn;
 800a054:	697b      	ldr	r3, [r7, #20]
}
 800a056:	4618      	mov	r0, r3
 800a058:	3718      	adds	r7, #24
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	20000a1c 	.word	0x20000a1c
 800a064:	0800e6b8 	.word	0x0800e6b8
 800a068:	0800a2e5 	.word	0x0800a2e5
 800a06c:	20000a20 	.word	0x20000a20

0800a070 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800a070:	b580      	push	{r7, lr}
 800a072:	b088      	sub	sp, #32
 800a074:	af02      	add	r7, sp, #8
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	60b9      	str	r1, [r7, #8]
 800a07a:	607a      	str	r2, [r7, #4]
 800a07c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800a07e:	2028      	movs	r0, #40	; 0x28
 800a080:	f000 fdac 	bl	800abdc <pvPortMalloc>
 800a084:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d00d      	beq.n	800a0a8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	2200      	movs	r2, #0
 800a090:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	9301      	str	r3, [sp, #4]
 800a098:	6a3b      	ldr	r3, [r7, #32]
 800a09a:	9300      	str	r3, [sp, #0]
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	687a      	ldr	r2, [r7, #4]
 800a0a0:	68b9      	ldr	r1, [r7, #8]
 800a0a2:	68f8      	ldr	r0, [r7, #12]
 800a0a4:	f000 f845 	bl	800a132 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a0a8:	697b      	ldr	r3, [r7, #20]
	}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3718      	adds	r7, #24
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b08a      	sub	sp, #40	; 0x28
 800a0b6:	af02      	add	r7, sp, #8
 800a0b8:	60f8      	str	r0, [r7, #12]
 800a0ba:	60b9      	str	r1, [r7, #8]
 800a0bc:	607a      	str	r2, [r7, #4]
 800a0be:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800a0c0:	2328      	movs	r3, #40	; 0x28
 800a0c2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	2b28      	cmp	r3, #40	; 0x28
 800a0c8:	d00b      	beq.n	800a0e2 <xTimerCreateStatic+0x30>
 800a0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ce:	b672      	cpsid	i
 800a0d0:	f383 8811 	msr	BASEPRI, r3
 800a0d4:	f3bf 8f6f 	isb	sy
 800a0d8:	f3bf 8f4f 	dsb	sy
 800a0dc:	b662      	cpsie	i
 800a0de:	61bb      	str	r3, [r7, #24]
 800a0e0:	e7fe      	b.n	800a0e0 <xTimerCreateStatic+0x2e>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a0e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800a0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d10b      	bne.n	800a102 <xTimerCreateStatic+0x50>
 800a0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ee:	b672      	cpsid	i
 800a0f0:	f383 8811 	msr	BASEPRI, r3
 800a0f4:	f3bf 8f6f 	isb	sy
 800a0f8:	f3bf 8f4f 	dsb	sy
 800a0fc:	b662      	cpsie	i
 800a0fe:	617b      	str	r3, [r7, #20]
 800a100:	e7fe      	b.n	800a100 <xTimerCreateStatic+0x4e>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800a102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a104:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800a106:	69fb      	ldr	r3, [r7, #28]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d00d      	beq.n	800a128 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	2202      	movs	r2, #2
 800a110:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a114:	69fb      	ldr	r3, [r7, #28]
 800a116:	9301      	str	r3, [sp, #4]
 800a118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a11a:	9300      	str	r3, [sp, #0]
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	68b9      	ldr	r1, [r7, #8]
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f000 f805 	bl	800a132 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a128:	69fb      	ldr	r3, [r7, #28]
	}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3720      	adds	r7, #32
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b086      	sub	sp, #24
 800a136:	af00      	add	r7, sp, #0
 800a138:	60f8      	str	r0, [r7, #12]
 800a13a:	60b9      	str	r1, [r7, #8]
 800a13c:	607a      	str	r2, [r7, #4]
 800a13e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d10b      	bne.n	800a15e <prvInitialiseNewTimer+0x2c>
 800a146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a14a:	b672      	cpsid	i
 800a14c:	f383 8811 	msr	BASEPRI, r3
 800a150:	f3bf 8f6f 	isb	sy
 800a154:	f3bf 8f4f 	dsb	sy
 800a158:	b662      	cpsie	i
 800a15a:	617b      	str	r3, [r7, #20]
 800a15c:	e7fe      	b.n	800a15c <prvInitialiseNewTimer+0x2a>

	if( pxNewTimer != NULL )
 800a15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a160:	2b00      	cmp	r3, #0
 800a162:	d01e      	beq.n	800a1a2 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800a164:	f000 fad2 	bl	800a70c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800a168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16a:	68fa      	ldr	r2, [r7, #12]
 800a16c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a170:	68ba      	ldr	r2, [r7, #8]
 800a172:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800a174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a176:	683a      	ldr	r2, [r7, #0]
 800a178:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17c:	6a3a      	ldr	r2, [r7, #32]
 800a17e:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a182:	3304      	adds	r3, #4
 800a184:	4618      	mov	r0, r3
 800a186:	f7fe f85c 	bl	8008242 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d008      	beq.n	800a1a2 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800a190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a192:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a196:	f043 0304 	orr.w	r3, r3, #4
 800a19a:	b2da      	uxtb	r2, r3
 800a19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800a1a2:	bf00      	nop
 800a1a4:	3718      	adds	r7, #24
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}
	...

0800a1ac <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b08a      	sub	sp, #40	; 0x28
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	607a      	str	r2, [r7, #4]
 800a1b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d10b      	bne.n	800a1dc <xTimerGenericCommand+0x30>
 800a1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c8:	b672      	cpsid	i
 800a1ca:	f383 8811 	msr	BASEPRI, r3
 800a1ce:	f3bf 8f6f 	isb	sy
 800a1d2:	f3bf 8f4f 	dsb	sy
 800a1d6:	b662      	cpsie	i
 800a1d8:	623b      	str	r3, [r7, #32]
 800a1da:	e7fe      	b.n	800a1da <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a1dc:	4b19      	ldr	r3, [pc, #100]	; (800a244 <xTimerGenericCommand+0x98>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d02a      	beq.n	800a23a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	2b05      	cmp	r3, #5
 800a1f4:	dc18      	bgt.n	800a228 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a1f6:	f7ff fc51 	bl	8009a9c <xTaskGetSchedulerState>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	2b02      	cmp	r3, #2
 800a1fe:	d109      	bne.n	800a214 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a200:	4b10      	ldr	r3, [pc, #64]	; (800a244 <xTimerGenericCommand+0x98>)
 800a202:	6818      	ldr	r0, [r3, #0]
 800a204:	f107 0114 	add.w	r1, r7, #20
 800a208:	2300      	movs	r3, #0
 800a20a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a20c:	f7fe fa42 	bl	8008694 <xQueueGenericSend>
 800a210:	6278      	str	r0, [r7, #36]	; 0x24
 800a212:	e012      	b.n	800a23a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a214:	4b0b      	ldr	r3, [pc, #44]	; (800a244 <xTimerGenericCommand+0x98>)
 800a216:	6818      	ldr	r0, [r3, #0]
 800a218:	f107 0114 	add.w	r1, r7, #20
 800a21c:	2300      	movs	r3, #0
 800a21e:	2200      	movs	r2, #0
 800a220:	f7fe fa38 	bl	8008694 <xQueueGenericSend>
 800a224:	6278      	str	r0, [r7, #36]	; 0x24
 800a226:	e008      	b.n	800a23a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a228:	4b06      	ldr	r3, [pc, #24]	; (800a244 <xTimerGenericCommand+0x98>)
 800a22a:	6818      	ldr	r0, [r3, #0]
 800a22c:	f107 0114 	add.w	r1, r7, #20
 800a230:	2300      	movs	r3, #0
 800a232:	683a      	ldr	r2, [r7, #0]
 800a234:	f7fe fb30 	bl	8008898 <xQueueGenericSendFromISR>
 800a238:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3728      	adds	r7, #40	; 0x28
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}
 800a244:	20000a1c 	.word	0x20000a1c

0800a248 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b088      	sub	sp, #32
 800a24c:	af02      	add	r7, sp, #8
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a252:	4b23      	ldr	r3, [pc, #140]	; (800a2e0 <prvProcessExpiredTimer+0x98>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	68db      	ldr	r3, [r3, #12]
 800a25a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	3304      	adds	r3, #4
 800a260:	4618      	mov	r0, r3
 800a262:	f7fe f858 	bl	8008316 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a26c:	f003 0304 	and.w	r3, r3, #4
 800a270:	2b00      	cmp	r3, #0
 800a272:	d023      	beq.n	800a2bc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	699a      	ldr	r2, [r3, #24]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	18d1      	adds	r1, r2, r3
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	683a      	ldr	r2, [r7, #0]
 800a280:	6978      	ldr	r0, [r7, #20]
 800a282:	f000 f8d3 	bl	800a42c <prvInsertTimerInActiveList>
 800a286:	4603      	mov	r3, r0
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d020      	beq.n	800a2ce <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a28c:	2300      	movs	r3, #0
 800a28e:	9300      	str	r3, [sp, #0]
 800a290:	2300      	movs	r3, #0
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	2100      	movs	r1, #0
 800a296:	6978      	ldr	r0, [r7, #20]
 800a298:	f7ff ff88 	bl	800a1ac <xTimerGenericCommand>
 800a29c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d114      	bne.n	800a2ce <prvProcessExpiredTimer+0x86>
 800a2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a8:	b672      	cpsid	i
 800a2aa:	f383 8811 	msr	BASEPRI, r3
 800a2ae:	f3bf 8f6f 	isb	sy
 800a2b2:	f3bf 8f4f 	dsb	sy
 800a2b6:	b662      	cpsie	i
 800a2b8:	60fb      	str	r3, [r7, #12]
 800a2ba:	e7fe      	b.n	800a2ba <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a2c2:	f023 0301 	bic.w	r3, r3, #1
 800a2c6:	b2da      	uxtb	r2, r3
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	6a1b      	ldr	r3, [r3, #32]
 800a2d2:	6978      	ldr	r0, [r7, #20]
 800a2d4:	4798      	blx	r3
}
 800a2d6:	bf00      	nop
 800a2d8:	3718      	adds	r7, #24
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
 800a2de:	bf00      	nop
 800a2e0:	20000a14 	.word	0x20000a14

0800a2e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b084      	sub	sp, #16
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a2ec:	f107 0308 	add.w	r3, r7, #8
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f000 f857 	bl	800a3a4 <prvGetNextExpireTime>
 800a2f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	68f8      	ldr	r0, [r7, #12]
 800a2fe:	f000 f803 	bl	800a308 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a302:	f000 f8d5 	bl	800a4b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a306:	e7f1      	b.n	800a2ec <prvTimerTask+0x8>

0800a308 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a312:	f7fe ffe1 	bl	80092d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a316:	f107 0308 	add.w	r3, r7, #8
 800a31a:	4618      	mov	r0, r3
 800a31c:	f000 f866 	bl	800a3ec <prvSampleTimeNow>
 800a320:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d130      	bne.n	800a38a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d10a      	bne.n	800a344 <prvProcessTimerOrBlockTask+0x3c>
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	429a      	cmp	r2, r3
 800a334:	d806      	bhi.n	800a344 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a336:	f7fe ffdd 	bl	80092f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a33a:	68f9      	ldr	r1, [r7, #12]
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f7ff ff83 	bl	800a248 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a342:	e024      	b.n	800a38e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d008      	beq.n	800a35c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a34a:	4b13      	ldr	r3, [pc, #76]	; (800a398 <prvProcessTimerOrBlockTask+0x90>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d101      	bne.n	800a358 <prvProcessTimerOrBlockTask+0x50>
 800a354:	2301      	movs	r3, #1
 800a356:	e000      	b.n	800a35a <prvProcessTimerOrBlockTask+0x52>
 800a358:	2300      	movs	r3, #0
 800a35a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a35c:	4b0f      	ldr	r3, [pc, #60]	; (800a39c <prvProcessTimerOrBlockTask+0x94>)
 800a35e:	6818      	ldr	r0, [r3, #0]
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	1ad3      	subs	r3, r2, r3
 800a366:	683a      	ldr	r2, [r7, #0]
 800a368:	4619      	mov	r1, r3
 800a36a:	f7fe fd4b 	bl	8008e04 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a36e:	f7fe ffc1 	bl	80092f4 <xTaskResumeAll>
 800a372:	4603      	mov	r3, r0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d10a      	bne.n	800a38e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a378:	4b09      	ldr	r3, [pc, #36]	; (800a3a0 <prvProcessTimerOrBlockTask+0x98>)
 800a37a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a37e:	601a      	str	r2, [r3, #0]
 800a380:	f3bf 8f4f 	dsb	sy
 800a384:	f3bf 8f6f 	isb	sy
}
 800a388:	e001      	b.n	800a38e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a38a:	f7fe ffb3 	bl	80092f4 <xTaskResumeAll>
}
 800a38e:	bf00      	nop
 800a390:	3710      	adds	r7, #16
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop
 800a398:	20000a18 	.word	0x20000a18
 800a39c:	20000a1c 	.word	0x20000a1c
 800a3a0:	e000ed04 	.word	0xe000ed04

0800a3a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b085      	sub	sp, #20
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a3ac:	4b0e      	ldr	r3, [pc, #56]	; (800a3e8 <prvGetNextExpireTime+0x44>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d101      	bne.n	800a3ba <prvGetNextExpireTime+0x16>
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	e000      	b.n	800a3bc <prvGetNextExpireTime+0x18>
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d105      	bne.n	800a3d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a3c8:	4b07      	ldr	r3, [pc, #28]	; (800a3e8 <prvGetNextExpireTime+0x44>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	68db      	ldr	r3, [r3, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	60fb      	str	r3, [r7, #12]
 800a3d2:	e001      	b.n	800a3d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3714      	adds	r7, #20
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr
 800a3e6:	bf00      	nop
 800a3e8:	20000a14 	.word	0x20000a14

0800a3ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a3f4:	f7ff f81c 	bl	8009430 <xTaskGetTickCount>
 800a3f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a3fa:	4b0b      	ldr	r3, [pc, #44]	; (800a428 <prvSampleTimeNow+0x3c>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	68fa      	ldr	r2, [r7, #12]
 800a400:	429a      	cmp	r2, r3
 800a402:	d205      	bcs.n	800a410 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a404:	f000 f91c 	bl	800a640 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2201      	movs	r2, #1
 800a40c:	601a      	str	r2, [r3, #0]
 800a40e:	e002      	b.n	800a416 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2200      	movs	r2, #0
 800a414:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a416:	4a04      	ldr	r2, [pc, #16]	; (800a428 <prvSampleTimeNow+0x3c>)
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a41c:	68fb      	ldr	r3, [r7, #12]
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3710      	adds	r7, #16
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop
 800a428:	20000a24 	.word	0x20000a24

0800a42c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b086      	sub	sp, #24
 800a430:	af00      	add	r7, sp, #0
 800a432:	60f8      	str	r0, [r7, #12]
 800a434:	60b9      	str	r1, [r7, #8]
 800a436:	607a      	str	r2, [r7, #4]
 800a438:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a43a:	2300      	movs	r3, #0
 800a43c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	68ba      	ldr	r2, [r7, #8]
 800a442:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	68fa      	ldr	r2, [r7, #12]
 800a448:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a44a:	68ba      	ldr	r2, [r7, #8]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	429a      	cmp	r2, r3
 800a450:	d812      	bhi.n	800a478 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	1ad2      	subs	r2, r2, r3
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	699b      	ldr	r3, [r3, #24]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d302      	bcc.n	800a466 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a460:	2301      	movs	r3, #1
 800a462:	617b      	str	r3, [r7, #20]
 800a464:	e01b      	b.n	800a49e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a466:	4b10      	ldr	r3, [pc, #64]	; (800a4a8 <prvInsertTimerInActiveList+0x7c>)
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	3304      	adds	r3, #4
 800a46e:	4619      	mov	r1, r3
 800a470:	4610      	mov	r0, r2
 800a472:	f7fd ff17 	bl	80082a4 <vListInsert>
 800a476:	e012      	b.n	800a49e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d206      	bcs.n	800a48e <prvInsertTimerInActiveList+0x62>
 800a480:	68ba      	ldr	r2, [r7, #8]
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	429a      	cmp	r2, r3
 800a486:	d302      	bcc.n	800a48e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a488:	2301      	movs	r3, #1
 800a48a:	617b      	str	r3, [r7, #20]
 800a48c:	e007      	b.n	800a49e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a48e:	4b07      	ldr	r3, [pc, #28]	; (800a4ac <prvInsertTimerInActiveList+0x80>)
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	3304      	adds	r3, #4
 800a496:	4619      	mov	r1, r3
 800a498:	4610      	mov	r0, r2
 800a49a:	f7fd ff03 	bl	80082a4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a49e:	697b      	ldr	r3, [r7, #20]
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3718      	adds	r7, #24
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}
 800a4a8:	20000a18 	.word	0x20000a18
 800a4ac:	20000a14 	.word	0x20000a14

0800a4b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b08c      	sub	sp, #48	; 0x30
 800a4b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a4b6:	e0b0      	b.n	800a61a <prvProcessReceivedCommands+0x16a>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	f2c0 80ac 	blt.w	800a618 <prvProcessReceivedCommands+0x168>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c6:	695b      	ldr	r3, [r3, #20]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d004      	beq.n	800a4d6 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ce:	3304      	adds	r3, #4
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7fd ff20 	bl	8008316 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a4d6:	1d3b      	adds	r3, r7, #4
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f7ff ff87 	bl	800a3ec <prvSampleTimeNow>
 800a4de:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	2b09      	cmp	r3, #9
 800a4e4:	f200 8099 	bhi.w	800a61a <prvProcessReceivedCommands+0x16a>
 800a4e8:	a201      	add	r2, pc, #4	; (adr r2, 800a4f0 <prvProcessReceivedCommands+0x40>)
 800a4ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ee:	bf00      	nop
 800a4f0:	0800a519 	.word	0x0800a519
 800a4f4:	0800a519 	.word	0x0800a519
 800a4f8:	0800a519 	.word	0x0800a519
 800a4fc:	0800a58f 	.word	0x0800a58f
 800a500:	0800a5a3 	.word	0x0800a5a3
 800a504:	0800a5ef 	.word	0x0800a5ef
 800a508:	0800a519 	.word	0x0800a519
 800a50c:	0800a519 	.word	0x0800a519
 800a510:	0800a58f 	.word	0x0800a58f
 800a514:	0800a5a3 	.word	0x0800a5a3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a51e:	f043 0301 	orr.w	r3, r3, #1
 800a522:	b2da      	uxtb	r2, r3
 800a524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a526:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a52a:	68fa      	ldr	r2, [r7, #12]
 800a52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52e:	699b      	ldr	r3, [r3, #24]
 800a530:	18d1      	adds	r1, r2, r3
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	6a3a      	ldr	r2, [r7, #32]
 800a536:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a538:	f7ff ff78 	bl	800a42c <prvInsertTimerInActiveList>
 800a53c:	4603      	mov	r3, r0
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d06b      	beq.n	800a61a <prvProcessReceivedCommands+0x16a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a544:	6a1b      	ldr	r3, [r3, #32]
 800a546:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a548:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a550:	f003 0304 	and.w	r3, r3, #4
 800a554:	2b00      	cmp	r3, #0
 800a556:	d060      	beq.n	800a61a <prvProcessReceivedCommands+0x16a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a558:	68fa      	ldr	r2, [r7, #12]
 800a55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55c:	699b      	ldr	r3, [r3, #24]
 800a55e:	441a      	add	r2, r3
 800a560:	2300      	movs	r3, #0
 800a562:	9300      	str	r3, [sp, #0]
 800a564:	2300      	movs	r3, #0
 800a566:	2100      	movs	r1, #0
 800a568:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a56a:	f7ff fe1f 	bl	800a1ac <xTimerGenericCommand>
 800a56e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800a570:	69fb      	ldr	r3, [r7, #28]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d151      	bne.n	800a61a <prvProcessReceivedCommands+0x16a>
 800a576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a57a:	b672      	cpsid	i
 800a57c:	f383 8811 	msr	BASEPRI, r3
 800a580:	f3bf 8f6f 	isb	sy
 800a584:	f3bf 8f4f 	dsb	sy
 800a588:	b662      	cpsie	i
 800a58a:	61bb      	str	r3, [r7, #24]
 800a58c:	e7fe      	b.n	800a58c <prvProcessReceivedCommands+0xdc>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a590:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a594:	f023 0301 	bic.w	r3, r3, #1
 800a598:	b2da      	uxtb	r2, r3
 800a59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800a5a0:	e03b      	b.n	800a61a <prvProcessReceivedCommands+0x16a>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a5a8:	f043 0301 	orr.w	r3, r3, #1
 800a5ac:	b2da      	uxtb	r2, r3
 800a5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a5b4:	68fa      	ldr	r2, [r7, #12]
 800a5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5bc:	699b      	ldr	r3, [r3, #24]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d10b      	bne.n	800a5da <prvProcessReceivedCommands+0x12a>
 800a5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c6:	b672      	cpsid	i
 800a5c8:	f383 8811 	msr	BASEPRI, r3
 800a5cc:	f3bf 8f6f 	isb	sy
 800a5d0:	f3bf 8f4f 	dsb	sy
 800a5d4:	b662      	cpsie	i
 800a5d6:	617b      	str	r3, [r7, #20]
 800a5d8:	e7fe      	b.n	800a5d8 <prvProcessReceivedCommands+0x128>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5dc:	699a      	ldr	r2, [r3, #24]
 800a5de:	6a3b      	ldr	r3, [r7, #32]
 800a5e0:	18d1      	adds	r1, r2, r3
 800a5e2:	6a3b      	ldr	r3, [r7, #32]
 800a5e4:	6a3a      	ldr	r2, [r7, #32]
 800a5e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a5e8:	f7ff ff20 	bl	800a42c <prvInsertTimerInActiveList>
					break;
 800a5ec:	e015      	b.n	800a61a <prvProcessReceivedCommands+0x16a>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a5f4:	f003 0302 	and.w	r3, r3, #2
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d103      	bne.n	800a604 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 800a5fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a5fe:	f000 fbb5 	bl	800ad6c <vPortFree>
 800a602:	e00a      	b.n	800a61a <prvProcessReceivedCommands+0x16a>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a606:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a60a:	f023 0301 	bic.w	r3, r3, #1
 800a60e:	b2da      	uxtb	r2, r3
 800a610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a612:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a616:	e000      	b.n	800a61a <prvProcessReceivedCommands+0x16a>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a618:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a61a:	4b08      	ldr	r3, [pc, #32]	; (800a63c <prvProcessReceivedCommands+0x18c>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f107 0108 	add.w	r1, r7, #8
 800a622:	2200      	movs	r2, #0
 800a624:	4618      	mov	r0, r3
 800a626:	f7fe f9d3 	bl	80089d0 <xQueueReceive>
 800a62a:	4603      	mov	r3, r0
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	f47f af43 	bne.w	800a4b8 <prvProcessReceivedCommands+0x8>
	}
}
 800a632:	bf00      	nop
 800a634:	3728      	adds	r7, #40	; 0x28
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	20000a1c 	.word	0x20000a1c

0800a640 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b088      	sub	sp, #32
 800a644:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a646:	e049      	b.n	800a6dc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a648:	4b2e      	ldr	r3, [pc, #184]	; (800a704 <prvSwitchTimerLists+0xc4>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	68db      	ldr	r3, [r3, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a652:	4b2c      	ldr	r3, [pc, #176]	; (800a704 <prvSwitchTimerLists+0xc4>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	68db      	ldr	r3, [r3, #12]
 800a658:	68db      	ldr	r3, [r3, #12]
 800a65a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	3304      	adds	r3, #4
 800a660:	4618      	mov	r0, r3
 800a662:	f7fd fe58 	bl	8008316 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	6a1b      	ldr	r3, [r3, #32]
 800a66a:	68f8      	ldr	r0, [r7, #12]
 800a66c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a674:	f003 0304 	and.w	r3, r3, #4
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d02f      	beq.n	800a6dc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	699b      	ldr	r3, [r3, #24]
 800a680:	693a      	ldr	r2, [r7, #16]
 800a682:	4413      	add	r3, r2
 800a684:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a686:	68ba      	ldr	r2, [r7, #8]
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d90e      	bls.n	800a6ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	68ba      	ldr	r2, [r7, #8]
 800a692:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	68fa      	ldr	r2, [r7, #12]
 800a698:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a69a:	4b1a      	ldr	r3, [pc, #104]	; (800a704 <prvSwitchTimerLists+0xc4>)
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	3304      	adds	r3, #4
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	4610      	mov	r0, r2
 800a6a6:	f7fd fdfd 	bl	80082a4 <vListInsert>
 800a6aa:	e017      	b.n	800a6dc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	9300      	str	r3, [sp, #0]
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	693a      	ldr	r2, [r7, #16]
 800a6b4:	2100      	movs	r1, #0
 800a6b6:	68f8      	ldr	r0, [r7, #12]
 800a6b8:	f7ff fd78 	bl	800a1ac <xTimerGenericCommand>
 800a6bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d10b      	bne.n	800a6dc <prvSwitchTimerLists+0x9c>
 800a6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c8:	b672      	cpsid	i
 800a6ca:	f383 8811 	msr	BASEPRI, r3
 800a6ce:	f3bf 8f6f 	isb	sy
 800a6d2:	f3bf 8f4f 	dsb	sy
 800a6d6:	b662      	cpsie	i
 800a6d8:	603b      	str	r3, [r7, #0]
 800a6da:	e7fe      	b.n	800a6da <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a6dc:	4b09      	ldr	r3, [pc, #36]	; (800a704 <prvSwitchTimerLists+0xc4>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d1b0      	bne.n	800a648 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a6e6:	4b07      	ldr	r3, [pc, #28]	; (800a704 <prvSwitchTimerLists+0xc4>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a6ec:	4b06      	ldr	r3, [pc, #24]	; (800a708 <prvSwitchTimerLists+0xc8>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a04      	ldr	r2, [pc, #16]	; (800a704 <prvSwitchTimerLists+0xc4>)
 800a6f2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a6f4:	4a04      	ldr	r2, [pc, #16]	; (800a708 <prvSwitchTimerLists+0xc8>)
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	6013      	str	r3, [r2, #0]
}
 800a6fa:	bf00      	nop
 800a6fc:	3718      	adds	r7, #24
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop
 800a704:	20000a14 	.word	0x20000a14
 800a708:	20000a18 	.word	0x20000a18

0800a70c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a712:	f000 f941 	bl	800a998 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a716:	4b15      	ldr	r3, [pc, #84]	; (800a76c <prvCheckForValidListAndQueue+0x60>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d120      	bne.n	800a760 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a71e:	4814      	ldr	r0, [pc, #80]	; (800a770 <prvCheckForValidListAndQueue+0x64>)
 800a720:	f7fd fd6f 	bl	8008202 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a724:	4813      	ldr	r0, [pc, #76]	; (800a774 <prvCheckForValidListAndQueue+0x68>)
 800a726:	f7fd fd6c 	bl	8008202 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a72a:	4b13      	ldr	r3, [pc, #76]	; (800a778 <prvCheckForValidListAndQueue+0x6c>)
 800a72c:	4a10      	ldr	r2, [pc, #64]	; (800a770 <prvCheckForValidListAndQueue+0x64>)
 800a72e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a730:	4b12      	ldr	r3, [pc, #72]	; (800a77c <prvCheckForValidListAndQueue+0x70>)
 800a732:	4a10      	ldr	r2, [pc, #64]	; (800a774 <prvCheckForValidListAndQueue+0x68>)
 800a734:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a736:	2300      	movs	r3, #0
 800a738:	9300      	str	r3, [sp, #0]
 800a73a:	4b11      	ldr	r3, [pc, #68]	; (800a780 <prvCheckForValidListAndQueue+0x74>)
 800a73c:	4a11      	ldr	r2, [pc, #68]	; (800a784 <prvCheckForValidListAndQueue+0x78>)
 800a73e:	210c      	movs	r1, #12
 800a740:	200a      	movs	r0, #10
 800a742:	f7fd fe7d 	bl	8008440 <xQueueGenericCreateStatic>
 800a746:	4602      	mov	r2, r0
 800a748:	4b08      	ldr	r3, [pc, #32]	; (800a76c <prvCheckForValidListAndQueue+0x60>)
 800a74a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a74c:	4b07      	ldr	r3, [pc, #28]	; (800a76c <prvCheckForValidListAndQueue+0x60>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d005      	beq.n	800a760 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a754:	4b05      	ldr	r3, [pc, #20]	; (800a76c <prvCheckForValidListAndQueue+0x60>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	490b      	ldr	r1, [pc, #44]	; (800a788 <prvCheckForValidListAndQueue+0x7c>)
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7fe fb2a 	bl	8008db4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a760:	f000 f94c 	bl	800a9fc <vPortExitCritical>
}
 800a764:	bf00      	nop
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
 800a76a:	bf00      	nop
 800a76c:	20000a1c 	.word	0x20000a1c
 800a770:	200009ec 	.word	0x200009ec
 800a774:	20000a00 	.word	0x20000a00
 800a778:	20000a14 	.word	0x20000a14
 800a77c:	20000a18 	.word	0x20000a18
 800a780:	20000aa0 	.word	0x20000aa0
 800a784:	20000a28 	.word	0x20000a28
 800a788:	0800e6c0 	.word	0x0800e6c0

0800a78c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a78c:	b480      	push	{r7}
 800a78e:	b085      	sub	sp, #20
 800a790:	af00      	add	r7, sp, #0
 800a792:	60f8      	str	r0, [r7, #12]
 800a794:	60b9      	str	r1, [r7, #8]
 800a796:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	3b04      	subs	r3, #4
 800a79c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a7a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	3b04      	subs	r3, #4
 800a7aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	f023 0201 	bic.w	r2, r3, #1
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	3b04      	subs	r3, #4
 800a7ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a7bc:	4a0c      	ldr	r2, [pc, #48]	; (800a7f0 <pxPortInitialiseStack+0x64>)
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	3b14      	subs	r3, #20
 800a7c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a7c8:	687a      	ldr	r2, [r7, #4]
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	3b04      	subs	r3, #4
 800a7d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f06f 0202 	mvn.w	r2, #2
 800a7da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	3b20      	subs	r3, #32
 800a7e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3714      	adds	r7, #20
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr
 800a7f0:	0800a7f5 	.word	0x0800a7f5

0800a7f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b085      	sub	sp, #20
 800a7f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a7fe:	4b13      	ldr	r3, [pc, #76]	; (800a84c <prvTaskExitError+0x58>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a806:	d00b      	beq.n	800a820 <prvTaskExitError+0x2c>
 800a808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a80c:	b672      	cpsid	i
 800a80e:	f383 8811 	msr	BASEPRI, r3
 800a812:	f3bf 8f6f 	isb	sy
 800a816:	f3bf 8f4f 	dsb	sy
 800a81a:	b662      	cpsie	i
 800a81c:	60fb      	str	r3, [r7, #12]
 800a81e:	e7fe      	b.n	800a81e <prvTaskExitError+0x2a>
 800a820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a824:	b672      	cpsid	i
 800a826:	f383 8811 	msr	BASEPRI, r3
 800a82a:	f3bf 8f6f 	isb	sy
 800a82e:	f3bf 8f4f 	dsb	sy
 800a832:	b662      	cpsie	i
 800a834:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a836:	bf00      	nop
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d0fc      	beq.n	800a838 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a83e:	bf00      	nop
 800a840:	3714      	adds	r7, #20
 800a842:	46bd      	mov	sp, r7
 800a844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a848:	4770      	bx	lr
 800a84a:	bf00      	nop
 800a84c:	2000000c 	.word	0x2000000c

0800a850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a850:	4b07      	ldr	r3, [pc, #28]	; (800a870 <pxCurrentTCBConst2>)
 800a852:	6819      	ldr	r1, [r3, #0]
 800a854:	6808      	ldr	r0, [r1, #0]
 800a856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a85a:	f380 8809 	msr	PSP, r0
 800a85e:	f3bf 8f6f 	isb	sy
 800a862:	f04f 0000 	mov.w	r0, #0
 800a866:	f380 8811 	msr	BASEPRI, r0
 800a86a:	4770      	bx	lr
 800a86c:	f3af 8000 	nop.w

0800a870 <pxCurrentTCBConst2>:
 800a870:	200008c0 	.word	0x200008c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a874:	bf00      	nop
 800a876:	bf00      	nop

0800a878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a878:	4808      	ldr	r0, [pc, #32]	; (800a89c <prvPortStartFirstTask+0x24>)
 800a87a:	6800      	ldr	r0, [r0, #0]
 800a87c:	6800      	ldr	r0, [r0, #0]
 800a87e:	f380 8808 	msr	MSP, r0
 800a882:	f04f 0000 	mov.w	r0, #0
 800a886:	f380 8814 	msr	CONTROL, r0
 800a88a:	b662      	cpsie	i
 800a88c:	b661      	cpsie	f
 800a88e:	f3bf 8f4f 	dsb	sy
 800a892:	f3bf 8f6f 	isb	sy
 800a896:	df00      	svc	0
 800a898:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a89a:	bf00      	nop
 800a89c:	e000ed08 	.word	0xe000ed08

0800a8a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a8a6:	4b36      	ldr	r3, [pc, #216]	; (800a980 <xPortStartScheduler+0xe0>)
 800a8a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	781b      	ldrb	r3, [r3, #0]
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	22ff      	movs	r2, #255	; 0xff
 800a8b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	781b      	ldrb	r3, [r3, #0]
 800a8bc:	b2db      	uxtb	r3, r3
 800a8be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a8c0:	78fb      	ldrb	r3, [r7, #3]
 800a8c2:	b2db      	uxtb	r3, r3
 800a8c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a8c8:	b2da      	uxtb	r2, r3
 800a8ca:	4b2e      	ldr	r3, [pc, #184]	; (800a984 <xPortStartScheduler+0xe4>)
 800a8cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a8ce:	4b2e      	ldr	r3, [pc, #184]	; (800a988 <xPortStartScheduler+0xe8>)
 800a8d0:	2207      	movs	r2, #7
 800a8d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a8d4:	e009      	b.n	800a8ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a8d6:	4b2c      	ldr	r3, [pc, #176]	; (800a988 <xPortStartScheduler+0xe8>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	3b01      	subs	r3, #1
 800a8dc:	4a2a      	ldr	r2, [pc, #168]	; (800a988 <xPortStartScheduler+0xe8>)
 800a8de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a8e0:	78fb      	ldrb	r3, [r7, #3]
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	005b      	lsls	r3, r3, #1
 800a8e6:	b2db      	uxtb	r3, r3
 800a8e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a8ea:	78fb      	ldrb	r3, [r7, #3]
 800a8ec:	b2db      	uxtb	r3, r3
 800a8ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8f2:	2b80      	cmp	r3, #128	; 0x80
 800a8f4:	d0ef      	beq.n	800a8d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a8f6:	4b24      	ldr	r3, [pc, #144]	; (800a988 <xPortStartScheduler+0xe8>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f1c3 0307 	rsb	r3, r3, #7
 800a8fe:	2b04      	cmp	r3, #4
 800a900:	d00b      	beq.n	800a91a <xPortStartScheduler+0x7a>
 800a902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a906:	b672      	cpsid	i
 800a908:	f383 8811 	msr	BASEPRI, r3
 800a90c:	f3bf 8f6f 	isb	sy
 800a910:	f3bf 8f4f 	dsb	sy
 800a914:	b662      	cpsie	i
 800a916:	60bb      	str	r3, [r7, #8]
 800a918:	e7fe      	b.n	800a918 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a91a:	4b1b      	ldr	r3, [pc, #108]	; (800a988 <xPortStartScheduler+0xe8>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	021b      	lsls	r3, r3, #8
 800a920:	4a19      	ldr	r2, [pc, #100]	; (800a988 <xPortStartScheduler+0xe8>)
 800a922:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a924:	4b18      	ldr	r3, [pc, #96]	; (800a988 <xPortStartScheduler+0xe8>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a92c:	4a16      	ldr	r2, [pc, #88]	; (800a988 <xPortStartScheduler+0xe8>)
 800a92e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	b2da      	uxtb	r2, r3
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a938:	4b14      	ldr	r3, [pc, #80]	; (800a98c <xPortStartScheduler+0xec>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a13      	ldr	r2, [pc, #76]	; (800a98c <xPortStartScheduler+0xec>)
 800a93e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a942:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a944:	4b11      	ldr	r3, [pc, #68]	; (800a98c <xPortStartScheduler+0xec>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4a10      	ldr	r2, [pc, #64]	; (800a98c <xPortStartScheduler+0xec>)
 800a94a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a94e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a950:	f000 f8d4 	bl	800aafc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a954:	4b0e      	ldr	r3, [pc, #56]	; (800a990 <xPortStartScheduler+0xf0>)
 800a956:	2200      	movs	r2, #0
 800a958:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a95a:	f000 f8f3 	bl	800ab44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a95e:	4b0d      	ldr	r3, [pc, #52]	; (800a994 <xPortStartScheduler+0xf4>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	4a0c      	ldr	r2, [pc, #48]	; (800a994 <xPortStartScheduler+0xf4>)
 800a964:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a968:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a96a:	f7ff ff85 	bl	800a878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a96e:	f7fe fe29 	bl	80095c4 <vTaskSwitchContext>
	prvTaskExitError();
 800a972:	f7ff ff3f 	bl	800a7f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a976:	2300      	movs	r3, #0
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3710      	adds	r7, #16
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}
 800a980:	e000e400 	.word	0xe000e400
 800a984:	20000ae8 	.word	0x20000ae8
 800a988:	20000aec 	.word	0x20000aec
 800a98c:	e000ed20 	.word	0xe000ed20
 800a990:	2000000c 	.word	0x2000000c
 800a994:	e000ef34 	.word	0xe000ef34

0800a998 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a2:	b672      	cpsid	i
 800a9a4:	f383 8811 	msr	BASEPRI, r3
 800a9a8:	f3bf 8f6f 	isb	sy
 800a9ac:	f3bf 8f4f 	dsb	sy
 800a9b0:	b662      	cpsie	i
 800a9b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a9b4:	4b0f      	ldr	r3, [pc, #60]	; (800a9f4 <vPortEnterCritical+0x5c>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	4a0e      	ldr	r2, [pc, #56]	; (800a9f4 <vPortEnterCritical+0x5c>)
 800a9bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a9be:	4b0d      	ldr	r3, [pc, #52]	; (800a9f4 <vPortEnterCritical+0x5c>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d110      	bne.n	800a9e8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a9c6:	4b0c      	ldr	r3, [pc, #48]	; (800a9f8 <vPortEnterCritical+0x60>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	b2db      	uxtb	r3, r3
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d00b      	beq.n	800a9e8 <vPortEnterCritical+0x50>
 800a9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d4:	b672      	cpsid	i
 800a9d6:	f383 8811 	msr	BASEPRI, r3
 800a9da:	f3bf 8f6f 	isb	sy
 800a9de:	f3bf 8f4f 	dsb	sy
 800a9e2:	b662      	cpsie	i
 800a9e4:	603b      	str	r3, [r7, #0]
 800a9e6:	e7fe      	b.n	800a9e6 <vPortEnterCritical+0x4e>
	}
}
 800a9e8:	bf00      	nop
 800a9ea:	370c      	adds	r7, #12
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr
 800a9f4:	2000000c 	.word	0x2000000c
 800a9f8:	e000ed04 	.word	0xe000ed04

0800a9fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b083      	sub	sp, #12
 800aa00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aa02:	4b12      	ldr	r3, [pc, #72]	; (800aa4c <vPortExitCritical+0x50>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d10b      	bne.n	800aa22 <vPortExitCritical+0x26>
 800aa0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa0e:	b672      	cpsid	i
 800aa10:	f383 8811 	msr	BASEPRI, r3
 800aa14:	f3bf 8f6f 	isb	sy
 800aa18:	f3bf 8f4f 	dsb	sy
 800aa1c:	b662      	cpsie	i
 800aa1e:	607b      	str	r3, [r7, #4]
 800aa20:	e7fe      	b.n	800aa20 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800aa22:	4b0a      	ldr	r3, [pc, #40]	; (800aa4c <vPortExitCritical+0x50>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	3b01      	subs	r3, #1
 800aa28:	4a08      	ldr	r2, [pc, #32]	; (800aa4c <vPortExitCritical+0x50>)
 800aa2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aa2c:	4b07      	ldr	r3, [pc, #28]	; (800aa4c <vPortExitCritical+0x50>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d104      	bne.n	800aa3e <vPortExitCritical+0x42>
 800aa34:	2300      	movs	r3, #0
 800aa36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800aa3e:	bf00      	nop
 800aa40:	370c      	adds	r7, #12
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr
 800aa4a:	bf00      	nop
 800aa4c:	2000000c 	.word	0x2000000c

0800aa50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aa50:	f3ef 8009 	mrs	r0, PSP
 800aa54:	f3bf 8f6f 	isb	sy
 800aa58:	4b15      	ldr	r3, [pc, #84]	; (800aab0 <pxCurrentTCBConst>)
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	f01e 0f10 	tst.w	lr, #16
 800aa60:	bf08      	it	eq
 800aa62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aa66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa6a:	6010      	str	r0, [r2, #0]
 800aa6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aa70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aa74:	b672      	cpsid	i
 800aa76:	f380 8811 	msr	BASEPRI, r0
 800aa7a:	f3bf 8f4f 	dsb	sy
 800aa7e:	f3bf 8f6f 	isb	sy
 800aa82:	b662      	cpsie	i
 800aa84:	f7fe fd9e 	bl	80095c4 <vTaskSwitchContext>
 800aa88:	f04f 0000 	mov.w	r0, #0
 800aa8c:	f380 8811 	msr	BASEPRI, r0
 800aa90:	bc09      	pop	{r0, r3}
 800aa92:	6819      	ldr	r1, [r3, #0]
 800aa94:	6808      	ldr	r0, [r1, #0]
 800aa96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa9a:	f01e 0f10 	tst.w	lr, #16
 800aa9e:	bf08      	it	eq
 800aaa0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aaa4:	f380 8809 	msr	PSP, r0
 800aaa8:	f3bf 8f6f 	isb	sy
 800aaac:	4770      	bx	lr
 800aaae:	bf00      	nop

0800aab0 <pxCurrentTCBConst>:
 800aab0:	200008c0 	.word	0x200008c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aab4:	bf00      	nop
 800aab6:	bf00      	nop

0800aab8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
	__asm volatile
 800aabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac2:	b672      	cpsid	i
 800aac4:	f383 8811 	msr	BASEPRI, r3
 800aac8:	f3bf 8f6f 	isb	sy
 800aacc:	f3bf 8f4f 	dsb	sy
 800aad0:	b662      	cpsie	i
 800aad2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aad4:	f7fe fcbc 	bl	8009450 <xTaskIncrementTick>
 800aad8:	4603      	mov	r3, r0
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d003      	beq.n	800aae6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aade:	4b06      	ldr	r3, [pc, #24]	; (800aaf8 <SysTick_Handler+0x40>)
 800aae0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aae4:	601a      	str	r2, [r3, #0]
 800aae6:	2300      	movs	r3, #0
 800aae8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800aaf0:	bf00      	nop
 800aaf2:	3708      	adds	r7, #8
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}
 800aaf8:	e000ed04 	.word	0xe000ed04

0800aafc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aafc:	b480      	push	{r7}
 800aafe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ab00:	4b0b      	ldr	r3, [pc, #44]	; (800ab30 <vPortSetupTimerInterrupt+0x34>)
 800ab02:	2200      	movs	r2, #0
 800ab04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ab06:	4b0b      	ldr	r3, [pc, #44]	; (800ab34 <vPortSetupTimerInterrupt+0x38>)
 800ab08:	2200      	movs	r2, #0
 800ab0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ab0c:	4b0a      	ldr	r3, [pc, #40]	; (800ab38 <vPortSetupTimerInterrupt+0x3c>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4a0a      	ldr	r2, [pc, #40]	; (800ab3c <vPortSetupTimerInterrupt+0x40>)
 800ab12:	fba2 2303 	umull	r2, r3, r2, r3
 800ab16:	099b      	lsrs	r3, r3, #6
 800ab18:	4a09      	ldr	r2, [pc, #36]	; (800ab40 <vPortSetupTimerInterrupt+0x44>)
 800ab1a:	3b01      	subs	r3, #1
 800ab1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ab1e:	4b04      	ldr	r3, [pc, #16]	; (800ab30 <vPortSetupTimerInterrupt+0x34>)
 800ab20:	2207      	movs	r2, #7
 800ab22:	601a      	str	r2, [r3, #0]
}
 800ab24:	bf00      	nop
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr
 800ab2e:	bf00      	nop
 800ab30:	e000e010 	.word	0xe000e010
 800ab34:	e000e018 	.word	0xe000e018
 800ab38:	20000000 	.word	0x20000000
 800ab3c:	10624dd3 	.word	0x10624dd3
 800ab40:	e000e014 	.word	0xe000e014

0800ab44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ab44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ab54 <vPortEnableVFP+0x10>
 800ab48:	6801      	ldr	r1, [r0, #0]
 800ab4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ab4e:	6001      	str	r1, [r0, #0]
 800ab50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ab52:	bf00      	nop
 800ab54:	e000ed88 	.word	0xe000ed88

0800ab58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ab5e:	f3ef 8305 	mrs	r3, IPSR
 800ab62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2b0f      	cmp	r3, #15
 800ab68:	d915      	bls.n	800ab96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ab6a:	4a18      	ldr	r2, [pc, #96]	; (800abcc <vPortValidateInterruptPriority+0x74>)
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	4413      	add	r3, r2
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ab74:	4b16      	ldr	r3, [pc, #88]	; (800abd0 <vPortValidateInterruptPriority+0x78>)
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	7afa      	ldrb	r2, [r7, #11]
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d20b      	bcs.n	800ab96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ab7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab82:	b672      	cpsid	i
 800ab84:	f383 8811 	msr	BASEPRI, r3
 800ab88:	f3bf 8f6f 	isb	sy
 800ab8c:	f3bf 8f4f 	dsb	sy
 800ab90:	b662      	cpsie	i
 800ab92:	607b      	str	r3, [r7, #4]
 800ab94:	e7fe      	b.n	800ab94 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab96:	4b0f      	ldr	r3, [pc, #60]	; (800abd4 <vPortValidateInterruptPriority+0x7c>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ab9e:	4b0e      	ldr	r3, [pc, #56]	; (800abd8 <vPortValidateInterruptPriority+0x80>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d90b      	bls.n	800abbe <vPortValidateInterruptPriority+0x66>
 800aba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abaa:	b672      	cpsid	i
 800abac:	f383 8811 	msr	BASEPRI, r3
 800abb0:	f3bf 8f6f 	isb	sy
 800abb4:	f3bf 8f4f 	dsb	sy
 800abb8:	b662      	cpsie	i
 800abba:	603b      	str	r3, [r7, #0]
 800abbc:	e7fe      	b.n	800abbc <vPortValidateInterruptPriority+0x64>
	}
 800abbe:	bf00      	nop
 800abc0:	3714      	adds	r7, #20
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr
 800abca:	bf00      	nop
 800abcc:	e000e3f0 	.word	0xe000e3f0
 800abd0:	20000ae8 	.word	0x20000ae8
 800abd4:	e000ed0c 	.word	0xe000ed0c
 800abd8:	20000aec 	.word	0x20000aec

0800abdc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b08a      	sub	sp, #40	; 0x28
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800abe4:	2300      	movs	r3, #0
 800abe6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800abe8:	f7fe fb76 	bl	80092d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800abec:	4b5a      	ldr	r3, [pc, #360]	; (800ad58 <pvPortMalloc+0x17c>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d101      	bne.n	800abf8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800abf4:	f000 f916 	bl	800ae24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800abf8:	4b58      	ldr	r3, [pc, #352]	; (800ad5c <pvPortMalloc+0x180>)
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	4013      	ands	r3, r2
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	f040 8090 	bne.w	800ad26 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d01e      	beq.n	800ac4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ac0c:	2208      	movs	r2, #8
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	4413      	add	r3, r2
 800ac12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f003 0307 	and.w	r3, r3, #7
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d015      	beq.n	800ac4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f023 0307 	bic.w	r3, r3, #7
 800ac24:	3308      	adds	r3, #8
 800ac26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f003 0307 	and.w	r3, r3, #7
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d00b      	beq.n	800ac4a <pvPortMalloc+0x6e>
 800ac32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac36:	b672      	cpsid	i
 800ac38:	f383 8811 	msr	BASEPRI, r3
 800ac3c:	f3bf 8f6f 	isb	sy
 800ac40:	f3bf 8f4f 	dsb	sy
 800ac44:	b662      	cpsie	i
 800ac46:	617b      	str	r3, [r7, #20]
 800ac48:	e7fe      	b.n	800ac48 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d06a      	beq.n	800ad26 <pvPortMalloc+0x14a>
 800ac50:	4b43      	ldr	r3, [pc, #268]	; (800ad60 <pvPortMalloc+0x184>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	429a      	cmp	r2, r3
 800ac58:	d865      	bhi.n	800ad26 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ac5a:	4b42      	ldr	r3, [pc, #264]	; (800ad64 <pvPortMalloc+0x188>)
 800ac5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ac5e:	4b41      	ldr	r3, [pc, #260]	; (800ad64 <pvPortMalloc+0x188>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac64:	e004      	b.n	800ac70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ac66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ac6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d903      	bls.n	800ac82 <pvPortMalloc+0xa6>
 800ac7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d1f1      	bne.n	800ac66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ac82:	4b35      	ldr	r3, [pc, #212]	; (800ad58 <pvPortMalloc+0x17c>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d04c      	beq.n	800ad26 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ac8c:	6a3b      	ldr	r3, [r7, #32]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	2208      	movs	r2, #8
 800ac92:	4413      	add	r3, r2
 800ac94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ac96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac98:	681a      	ldr	r2, [r3, #0]
 800ac9a:	6a3b      	ldr	r3, [r7, #32]
 800ac9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ac9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca0:	685a      	ldr	r2, [r3, #4]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	1ad2      	subs	r2, r2, r3
 800aca6:	2308      	movs	r3, #8
 800aca8:	005b      	lsls	r3, r3, #1
 800acaa:	429a      	cmp	r2, r3
 800acac:	d920      	bls.n	800acf0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800acae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	4413      	add	r3, r2
 800acb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800acb6:	69bb      	ldr	r3, [r7, #24]
 800acb8:	f003 0307 	and.w	r3, r3, #7
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d00b      	beq.n	800acd8 <pvPortMalloc+0xfc>
 800acc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc4:	b672      	cpsid	i
 800acc6:	f383 8811 	msr	BASEPRI, r3
 800acca:	f3bf 8f6f 	isb	sy
 800acce:	f3bf 8f4f 	dsb	sy
 800acd2:	b662      	cpsie	i
 800acd4:	613b      	str	r3, [r7, #16]
 800acd6:	e7fe      	b.n	800acd6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800acd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acda:	685a      	ldr	r2, [r3, #4]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	1ad2      	subs	r2, r2, r3
 800ace0:	69bb      	ldr	r3, [r7, #24]
 800ace2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ace4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace6:	687a      	ldr	r2, [r7, #4]
 800ace8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800acea:	69b8      	ldr	r0, [r7, #24]
 800acec:	f000 f8fc 	bl	800aee8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800acf0:	4b1b      	ldr	r3, [pc, #108]	; (800ad60 <pvPortMalloc+0x184>)
 800acf2:	681a      	ldr	r2, [r3, #0]
 800acf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	1ad3      	subs	r3, r2, r3
 800acfa:	4a19      	ldr	r2, [pc, #100]	; (800ad60 <pvPortMalloc+0x184>)
 800acfc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800acfe:	4b18      	ldr	r3, [pc, #96]	; (800ad60 <pvPortMalloc+0x184>)
 800ad00:	681a      	ldr	r2, [r3, #0]
 800ad02:	4b19      	ldr	r3, [pc, #100]	; (800ad68 <pvPortMalloc+0x18c>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d203      	bcs.n	800ad12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ad0a:	4b15      	ldr	r3, [pc, #84]	; (800ad60 <pvPortMalloc+0x184>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	4a16      	ldr	r2, [pc, #88]	; (800ad68 <pvPortMalloc+0x18c>)
 800ad10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ad12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad14:	685a      	ldr	r2, [r3, #4]
 800ad16:	4b11      	ldr	r3, [pc, #68]	; (800ad5c <pvPortMalloc+0x180>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	431a      	orrs	r2, r3
 800ad1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ad20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad22:	2200      	movs	r2, #0
 800ad24:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ad26:	f7fe fae5 	bl	80092f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad2a:	69fb      	ldr	r3, [r7, #28]
 800ad2c:	f003 0307 	and.w	r3, r3, #7
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d00b      	beq.n	800ad4c <pvPortMalloc+0x170>
 800ad34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad38:	b672      	cpsid	i
 800ad3a:	f383 8811 	msr	BASEPRI, r3
 800ad3e:	f3bf 8f6f 	isb	sy
 800ad42:	f3bf 8f4f 	dsb	sy
 800ad46:	b662      	cpsie	i
 800ad48:	60fb      	str	r3, [r7, #12]
 800ad4a:	e7fe      	b.n	800ad4a <pvPortMalloc+0x16e>
	return pvReturn;
 800ad4c:	69fb      	ldr	r3, [r7, #28]
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3728      	adds	r7, #40	; 0x28
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	200046f8 	.word	0x200046f8
 800ad5c:	20004704 	.word	0x20004704
 800ad60:	200046fc 	.word	0x200046fc
 800ad64:	200046f0 	.word	0x200046f0
 800ad68:	20004700 	.word	0x20004700

0800ad6c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b086      	sub	sp, #24
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d04a      	beq.n	800ae14 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ad7e:	2308      	movs	r3, #8
 800ad80:	425b      	negs	r3, r3
 800ad82:	697a      	ldr	r2, [r7, #20]
 800ad84:	4413      	add	r3, r2
 800ad86:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	685a      	ldr	r2, [r3, #4]
 800ad90:	4b22      	ldr	r3, [pc, #136]	; (800ae1c <vPortFree+0xb0>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4013      	ands	r3, r2
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d10b      	bne.n	800adb2 <vPortFree+0x46>
 800ad9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad9e:	b672      	cpsid	i
 800ada0:	f383 8811 	msr	BASEPRI, r3
 800ada4:	f3bf 8f6f 	isb	sy
 800ada8:	f3bf 8f4f 	dsb	sy
 800adac:	b662      	cpsie	i
 800adae:	60fb      	str	r3, [r7, #12]
 800adb0:	e7fe      	b.n	800adb0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d00b      	beq.n	800add2 <vPortFree+0x66>
 800adba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adbe:	b672      	cpsid	i
 800adc0:	f383 8811 	msr	BASEPRI, r3
 800adc4:	f3bf 8f6f 	isb	sy
 800adc8:	f3bf 8f4f 	dsb	sy
 800adcc:	b662      	cpsie	i
 800adce:	60bb      	str	r3, [r7, #8]
 800add0:	e7fe      	b.n	800add0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	685a      	ldr	r2, [r3, #4]
 800add6:	4b11      	ldr	r3, [pc, #68]	; (800ae1c <vPortFree+0xb0>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4013      	ands	r3, r2
 800addc:	2b00      	cmp	r3, #0
 800adde:	d019      	beq.n	800ae14 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d115      	bne.n	800ae14 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	685a      	ldr	r2, [r3, #4]
 800adec:	4b0b      	ldr	r3, [pc, #44]	; (800ae1c <vPortFree+0xb0>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	43db      	mvns	r3, r3
 800adf2:	401a      	ands	r2, r3
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800adf8:	f7fe fa6e 	bl	80092d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	685a      	ldr	r2, [r3, #4]
 800ae00:	4b07      	ldr	r3, [pc, #28]	; (800ae20 <vPortFree+0xb4>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4413      	add	r3, r2
 800ae06:	4a06      	ldr	r2, [pc, #24]	; (800ae20 <vPortFree+0xb4>)
 800ae08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ae0a:	6938      	ldr	r0, [r7, #16]
 800ae0c:	f000 f86c 	bl	800aee8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ae10:	f7fe fa70 	bl	80092f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ae14:	bf00      	nop
 800ae16:	3718      	adds	r7, #24
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	20004704 	.word	0x20004704
 800ae20:	200046fc 	.word	0x200046fc

0800ae24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ae24:	b480      	push	{r7}
 800ae26:	b085      	sub	sp, #20
 800ae28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ae2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ae2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ae30:	4b27      	ldr	r3, [pc, #156]	; (800aed0 <prvHeapInit+0xac>)
 800ae32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f003 0307 	and.w	r3, r3, #7
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d00c      	beq.n	800ae58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	3307      	adds	r3, #7
 800ae42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f023 0307 	bic.w	r3, r3, #7
 800ae4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ae4c:	68ba      	ldr	r2, [r7, #8]
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	1ad3      	subs	r3, r2, r3
 800ae52:	4a1f      	ldr	r2, [pc, #124]	; (800aed0 <prvHeapInit+0xac>)
 800ae54:	4413      	add	r3, r2
 800ae56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ae5c:	4a1d      	ldr	r2, [pc, #116]	; (800aed4 <prvHeapInit+0xb0>)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ae62:	4b1c      	ldr	r3, [pc, #112]	; (800aed4 <prvHeapInit+0xb0>)
 800ae64:	2200      	movs	r2, #0
 800ae66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	68ba      	ldr	r2, [r7, #8]
 800ae6c:	4413      	add	r3, r2
 800ae6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ae70:	2208      	movs	r2, #8
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	1a9b      	subs	r3, r3, r2
 800ae76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f023 0307 	bic.w	r3, r3, #7
 800ae7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	4a15      	ldr	r2, [pc, #84]	; (800aed8 <prvHeapInit+0xb4>)
 800ae84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ae86:	4b14      	ldr	r3, [pc, #80]	; (800aed8 <prvHeapInit+0xb4>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ae8e:	4b12      	ldr	r3, [pc, #72]	; (800aed8 <prvHeapInit+0xb4>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	2200      	movs	r2, #0
 800ae94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	68fa      	ldr	r2, [r7, #12]
 800ae9e:	1ad2      	subs	r2, r2, r3
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aea4:	4b0c      	ldr	r3, [pc, #48]	; (800aed8 <prvHeapInit+0xb4>)
 800aea6:	681a      	ldr	r2, [r3, #0]
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	4a0a      	ldr	r2, [pc, #40]	; (800aedc <prvHeapInit+0xb8>)
 800aeb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	685b      	ldr	r3, [r3, #4]
 800aeb8:	4a09      	ldr	r2, [pc, #36]	; (800aee0 <prvHeapInit+0xbc>)
 800aeba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aebc:	4b09      	ldr	r3, [pc, #36]	; (800aee4 <prvHeapInit+0xc0>)
 800aebe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aec2:	601a      	str	r2, [r3, #0]
}
 800aec4:	bf00      	nop
 800aec6:	3714      	adds	r7, #20
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr
 800aed0:	20000af0 	.word	0x20000af0
 800aed4:	200046f0 	.word	0x200046f0
 800aed8:	200046f8 	.word	0x200046f8
 800aedc:	20004700 	.word	0x20004700
 800aee0:	200046fc 	.word	0x200046fc
 800aee4:	20004704 	.word	0x20004704

0800aee8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aee8:	b480      	push	{r7}
 800aeea:	b085      	sub	sp, #20
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aef0:	4b28      	ldr	r3, [pc, #160]	; (800af94 <prvInsertBlockIntoFreeList+0xac>)
 800aef2:	60fb      	str	r3, [r7, #12]
 800aef4:	e002      	b.n	800aefc <prvInsertBlockIntoFreeList+0x14>
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	60fb      	str	r3, [r7, #12]
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	687a      	ldr	r2, [r7, #4]
 800af02:	429a      	cmp	r2, r3
 800af04:	d8f7      	bhi.n	800aef6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	685b      	ldr	r3, [r3, #4]
 800af0e:	68ba      	ldr	r2, [r7, #8]
 800af10:	4413      	add	r3, r2
 800af12:	687a      	ldr	r2, [r7, #4]
 800af14:	429a      	cmp	r2, r3
 800af16:	d108      	bne.n	800af2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	685a      	ldr	r2, [r3, #4]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	441a      	add	r2, r3
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	685b      	ldr	r3, [r3, #4]
 800af32:	68ba      	ldr	r2, [r7, #8]
 800af34:	441a      	add	r2, r3
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d118      	bne.n	800af70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681a      	ldr	r2, [r3, #0]
 800af42:	4b15      	ldr	r3, [pc, #84]	; (800af98 <prvInsertBlockIntoFreeList+0xb0>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	429a      	cmp	r2, r3
 800af48:	d00d      	beq.n	800af66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	685a      	ldr	r2, [r3, #4]
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	441a      	add	r2, r3
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	681a      	ldr	r2, [r3, #0]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	601a      	str	r2, [r3, #0]
 800af64:	e008      	b.n	800af78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800af66:	4b0c      	ldr	r3, [pc, #48]	; (800af98 <prvInsertBlockIntoFreeList+0xb0>)
 800af68:	681a      	ldr	r2, [r3, #0]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	601a      	str	r2, [r3, #0]
 800af6e:	e003      	b.n	800af78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681a      	ldr	r2, [r3, #0]
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800af78:	68fa      	ldr	r2, [r7, #12]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d002      	beq.n	800af86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af86:	bf00      	nop
 800af88:	3714      	adds	r7, #20
 800af8a:	46bd      	mov	sp, r7
 800af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af90:	4770      	bx	lr
 800af92:	bf00      	nop
 800af94:	200046f0 	.word	0x200046f0
 800af98:	200046f8 	.word	0x200046f8
 800af9c:	00000000 	.word	0x00000000

0800afa0 <pow>:
 800afa0:	b570      	push	{r4, r5, r6, lr}
 800afa2:	ed2d 8b0a 	vpush	{d8-d12}
 800afa6:	eeb0 9b40 	vmov.f64	d9, d0
 800afaa:	eeb0 8b41 	vmov.f64	d8, d1
 800afae:	4c8c      	ldr	r4, [pc, #560]	; (800b1e0 <pow+0x240>)
 800afb0:	b08a      	sub	sp, #40	; 0x28
 800afb2:	f000 f925 	bl	800b200 <__ieee754_pow>
 800afb6:	f994 3000 	ldrsb.w	r3, [r4]
 800afba:	eeb0 ab40 	vmov.f64	d10, d0
 800afbe:	1c5a      	adds	r2, r3, #1
 800afc0:	4626      	mov	r6, r4
 800afc2:	d04b      	beq.n	800b05c <pow+0xbc>
 800afc4:	eeb4 8b48 	vcmp.f64	d8, d8
 800afc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afcc:	d646      	bvs.n	800b05c <pow+0xbc>
 800afce:	eeb4 9b49 	vcmp.f64	d9, d9
 800afd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afd6:	d719      	bvc.n	800b00c <pow+0x6c>
 800afd8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800afdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afe0:	d13c      	bne.n	800b05c <pow+0xbc>
 800afe2:	2201      	movs	r2, #1
 800afe4:	9200      	str	r2, [sp, #0]
 800afe6:	497f      	ldr	r1, [pc, #508]	; (800b1e4 <pow+0x244>)
 800afe8:	4a7f      	ldr	r2, [pc, #508]	; (800b1e8 <pow+0x248>)
 800afea:	9201      	str	r2, [sp, #4]
 800afec:	2000      	movs	r0, #0
 800afee:	2200      	movs	r2, #0
 800aff0:	2b02      	cmp	r3, #2
 800aff2:	9208      	str	r2, [sp, #32]
 800aff4:	ed8d 9b02 	vstr	d9, [sp, #8]
 800aff8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800affc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b000:	d02a      	beq.n	800b058 <pow+0xb8>
 800b002:	4668      	mov	r0, sp
 800b004:	f000 fc96 	bl	800b934 <matherr>
 800b008:	bb00      	cbnz	r0, 800b04c <pow+0xac>
 800b00a:	e04e      	b.n	800b0aa <pow+0x10a>
 800b00c:	ed9f bb72 	vldr	d11, [pc, #456]	; 800b1d8 <pow+0x238>
 800b010:	eeb4 9b4b 	vcmp.f64	d9, d11
 800b014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b018:	eeb0 cb4b 	vmov.f64	d12, d11
 800b01c:	d14a      	bne.n	800b0b4 <pow+0x114>
 800b01e:	eeb4 8b4b 	vcmp.f64	d8, d11
 800b022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b026:	d11f      	bne.n	800b068 <pow+0xc8>
 800b028:	2201      	movs	r2, #1
 800b02a:	9200      	str	r2, [sp, #0]
 800b02c:	4a6e      	ldr	r2, [pc, #440]	; (800b1e8 <pow+0x248>)
 800b02e:	9201      	str	r2, [sp, #4]
 800b030:	2200      	movs	r2, #0
 800b032:	9208      	str	r2, [sp, #32]
 800b034:	ed8d 9b02 	vstr	d9, [sp, #8]
 800b038:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b03c:	ed8d bb06 	vstr	d11, [sp, #24]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d0de      	beq.n	800b002 <pow+0x62>
 800b044:	4b67      	ldr	r3, [pc, #412]	; (800b1e4 <pow+0x244>)
 800b046:	2200      	movs	r2, #0
 800b048:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b04c:	9b08      	ldr	r3, [sp, #32]
 800b04e:	b11b      	cbz	r3, 800b058 <pow+0xb8>
 800b050:	f000 fd94 	bl	800bb7c <__errno>
 800b054:	9b08      	ldr	r3, [sp, #32]
 800b056:	6003      	str	r3, [r0, #0]
 800b058:	ed9d ab06 	vldr	d10, [sp, #24]
 800b05c:	eeb0 0b4a 	vmov.f64	d0, d10
 800b060:	b00a      	add	sp, #40	; 0x28
 800b062:	ecbd 8b0a 	vpop	{d8-d12}
 800b066:	bd70      	pop	{r4, r5, r6, pc}
 800b068:	eeb0 0b48 	vmov.f64	d0, d8
 800b06c:	f000 fc5a 	bl	800b924 <finite>
 800b070:	2800      	cmp	r0, #0
 800b072:	d0f3      	beq.n	800b05c <pow+0xbc>
 800b074:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800b078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b07c:	d5ee      	bpl.n	800b05c <pow+0xbc>
 800b07e:	2301      	movs	r3, #1
 800b080:	9300      	str	r3, [sp, #0]
 800b082:	4b59      	ldr	r3, [pc, #356]	; (800b1e8 <pow+0x248>)
 800b084:	9301      	str	r3, [sp, #4]
 800b086:	2300      	movs	r3, #0
 800b088:	9308      	str	r3, [sp, #32]
 800b08a:	f994 3000 	ldrsb.w	r3, [r4]
 800b08e:	ed8d 9b02 	vstr	d9, [sp, #8]
 800b092:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b096:	b913      	cbnz	r3, 800b09e <pow+0xfe>
 800b098:	ed8d bb06 	vstr	d11, [sp, #24]
 800b09c:	e7b1      	b.n	800b002 <pow+0x62>
 800b09e:	4953      	ldr	r1, [pc, #332]	; (800b1ec <pow+0x24c>)
 800b0a0:	2000      	movs	r0, #0
 800b0a2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b0a6:	2b02      	cmp	r3, #2
 800b0a8:	d1ab      	bne.n	800b002 <pow+0x62>
 800b0aa:	f000 fd67 	bl	800bb7c <__errno>
 800b0ae:	2321      	movs	r3, #33	; 0x21
 800b0b0:	6003      	str	r3, [r0, #0]
 800b0b2:	e7cb      	b.n	800b04c <pow+0xac>
 800b0b4:	f000 fc36 	bl	800b924 <finite>
 800b0b8:	4605      	mov	r5, r0
 800b0ba:	2800      	cmp	r0, #0
 800b0bc:	d164      	bne.n	800b188 <pow+0x1e8>
 800b0be:	eeb0 0b49 	vmov.f64	d0, d9
 800b0c2:	f000 fc2f 	bl	800b924 <finite>
 800b0c6:	2800      	cmp	r0, #0
 800b0c8:	d05e      	beq.n	800b188 <pow+0x1e8>
 800b0ca:	eeb0 0b48 	vmov.f64	d0, d8
 800b0ce:	f000 fc29 	bl	800b924 <finite>
 800b0d2:	2800      	cmp	r0, #0
 800b0d4:	d058      	beq.n	800b188 <pow+0x1e8>
 800b0d6:	eeb4 ab4a 	vcmp.f64	d10, d10
 800b0da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0de:	f994 3000 	ldrsb.w	r3, [r4]
 800b0e2:	4a41      	ldr	r2, [pc, #260]	; (800b1e8 <pow+0x248>)
 800b0e4:	d70e      	bvc.n	800b104 <pow+0x164>
 800b0e6:	2101      	movs	r1, #1
 800b0e8:	e9cd 1200 	strd	r1, r2, [sp]
 800b0ec:	9508      	str	r5, [sp, #32]
 800b0ee:	ed8d 9b02 	vstr	d9, [sp, #8]
 800b0f2:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d0ce      	beq.n	800b098 <pow+0xf8>
 800b0fa:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
 800b0fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b102:	e7d0      	b.n	800b0a6 <pow+0x106>
 800b104:	2103      	movs	r1, #3
 800b106:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b10a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800b10e:	ee28 8b07 	vmul.f64	d8, d8, d7
 800b112:	e9cd 1200 	strd	r1, r2, [sp]
 800b116:	9508      	str	r5, [sp, #32]
 800b118:	ed8d 9b02 	vstr	d9, [sp, #8]
 800b11c:	b9fb      	cbnz	r3, 800b15e <pow+0x1be>
 800b11e:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 800b122:	4b33      	ldr	r3, [pc, #204]	; (800b1f0 <pow+0x250>)
 800b124:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b12c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b130:	d54b      	bpl.n	800b1ca <pow+0x22a>
 800b132:	eeb0 0b48 	vmov.f64	d0, d8
 800b136:	f000 fc07 	bl	800b948 <rint>
 800b13a:	eeb4 0b48 	vcmp.f64	d0, d8
 800b13e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b142:	d004      	beq.n	800b14e <pow+0x1ae>
 800b144:	4b2b      	ldr	r3, [pc, #172]	; (800b1f4 <pow+0x254>)
 800b146:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b14a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b14e:	f996 3000 	ldrsb.w	r3, [r6]
 800b152:	2b02      	cmp	r3, #2
 800b154:	d139      	bne.n	800b1ca <pow+0x22a>
 800b156:	f000 fd11 	bl	800bb7c <__errno>
 800b15a:	2322      	movs	r3, #34	; 0x22
 800b15c:	e7a8      	b.n	800b0b0 <pow+0x110>
 800b15e:	4b26      	ldr	r3, [pc, #152]	; (800b1f8 <pow+0x258>)
 800b160:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 800b164:	2200      	movs	r2, #0
 800b166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b16a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b16e:	d5ee      	bpl.n	800b14e <pow+0x1ae>
 800b170:	eeb0 0b48 	vmov.f64	d0, d8
 800b174:	f000 fbe8 	bl	800b948 <rint>
 800b178:	eeb4 0b48 	vcmp.f64	d0, d8
 800b17c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b180:	d0e5      	beq.n	800b14e <pow+0x1ae>
 800b182:	2200      	movs	r2, #0
 800b184:	4b19      	ldr	r3, [pc, #100]	; (800b1ec <pow+0x24c>)
 800b186:	e7e0      	b.n	800b14a <pow+0x1aa>
 800b188:	eeb5 ab40 	vcmp.f64	d10, #0.0
 800b18c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b190:	f47f af64 	bne.w	800b05c <pow+0xbc>
 800b194:	eeb0 0b49 	vmov.f64	d0, d9
 800b198:	f000 fbc4 	bl	800b924 <finite>
 800b19c:	2800      	cmp	r0, #0
 800b19e:	f43f af5d 	beq.w	800b05c <pow+0xbc>
 800b1a2:	eeb0 0b48 	vmov.f64	d0, d8
 800b1a6:	f000 fbbd 	bl	800b924 <finite>
 800b1aa:	2800      	cmp	r0, #0
 800b1ac:	f43f af56 	beq.w	800b05c <pow+0xbc>
 800b1b0:	2304      	movs	r3, #4
 800b1b2:	9300      	str	r3, [sp, #0]
 800b1b4:	4b0c      	ldr	r3, [pc, #48]	; (800b1e8 <pow+0x248>)
 800b1b6:	9301      	str	r3, [sp, #4]
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	9308      	str	r3, [sp, #32]
 800b1bc:	ed8d 9b02 	vstr	d9, [sp, #8]
 800b1c0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b1c4:	ed8d cb06 	vstr	d12, [sp, #24]
 800b1c8:	e7c1      	b.n	800b14e <pow+0x1ae>
 800b1ca:	4668      	mov	r0, sp
 800b1cc:	f000 fbb2 	bl	800b934 <matherr>
 800b1d0:	2800      	cmp	r0, #0
 800b1d2:	f47f af3b 	bne.w	800b04c <pow+0xac>
 800b1d6:	e7be      	b.n	800b156 <pow+0x1b6>
	...
 800b1e0:	20000010 	.word	0x20000010
 800b1e4:	3ff00000 	.word	0x3ff00000
 800b1e8:	0800e6e0 	.word	0x0800e6e0
 800b1ec:	fff00000 	.word	0xfff00000
 800b1f0:	47efffff 	.word	0x47efffff
 800b1f4:	c7efffff 	.word	0xc7efffff
 800b1f8:	7ff00000 	.word	0x7ff00000
 800b1fc:	00000000 	.word	0x00000000

0800b200 <__ieee754_pow>:
 800b200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b204:	ec57 6b11 	vmov	r6, r7, d1
 800b208:	ed2d 8b02 	vpush	{d8}
 800b20c:	eeb0 8b40 	vmov.f64	d8, d0
 800b210:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b214:	ea58 0306 	orrs.w	r3, r8, r6
 800b218:	b085      	sub	sp, #20
 800b21a:	46b9      	mov	r9, r7
 800b21c:	ee11 2a10 	vmov	r2, s2
 800b220:	f000 8306 	beq.w	800b830 <__ieee754_pow+0x630>
 800b224:	ee18 aa90 	vmov	sl, s17
 800b228:	4bb9      	ldr	r3, [pc, #740]	; (800b510 <__ieee754_pow+0x310>)
 800b22a:	f02a 4400 	bic.w	r4, sl, #2147483648	; 0x80000000
 800b22e:	429c      	cmp	r4, r3
 800b230:	ee10 ba10 	vmov	fp, s0
 800b234:	dc0b      	bgt.n	800b24e <__ieee754_pow+0x4e>
 800b236:	d105      	bne.n	800b244 <__ieee754_pow+0x44>
 800b238:	f1bb 0f00 	cmp.w	fp, #0
 800b23c:	d107      	bne.n	800b24e <__ieee754_pow+0x4e>
 800b23e:	45a0      	cmp	r8, r4
 800b240:	dc0d      	bgt.n	800b25e <__ieee754_pow+0x5e>
 800b242:	e001      	b.n	800b248 <__ieee754_pow+0x48>
 800b244:	4598      	cmp	r8, r3
 800b246:	dc02      	bgt.n	800b24e <__ieee754_pow+0x4e>
 800b248:	4598      	cmp	r8, r3
 800b24a:	d110      	bne.n	800b26e <__ieee754_pow+0x6e>
 800b24c:	b17a      	cbz	r2, 800b26e <__ieee754_pow+0x6e>
 800b24e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b252:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b256:	ea54 030b 	orrs.w	r3, r4, fp
 800b25a:	f000 82e9 	beq.w	800b830 <__ieee754_pow+0x630>
 800b25e:	48ad      	ldr	r0, [pc, #692]	; (800b514 <__ieee754_pow+0x314>)
 800b260:	b005      	add	sp, #20
 800b262:	ecbd 8b02 	vpop	{d8}
 800b266:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b26a:	f000 bb65 	b.w	800b938 <nan>
 800b26e:	f1ba 0f00 	cmp.w	sl, #0
 800b272:	da4e      	bge.n	800b312 <__ieee754_pow+0x112>
 800b274:	4ba8      	ldr	r3, [pc, #672]	; (800b518 <__ieee754_pow+0x318>)
 800b276:	4598      	cmp	r8, r3
 800b278:	dc49      	bgt.n	800b30e <__ieee754_pow+0x10e>
 800b27a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b27e:	4598      	cmp	r8, r3
 800b280:	dd47      	ble.n	800b312 <__ieee754_pow+0x112>
 800b282:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b286:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b28a:	2b14      	cmp	r3, #20
 800b28c:	dd24      	ble.n	800b2d8 <__ieee754_pow+0xd8>
 800b28e:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b292:	fa22 f503 	lsr.w	r5, r2, r3
 800b296:	fa05 f303 	lsl.w	r3, r5, r3
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d139      	bne.n	800b312 <__ieee754_pow+0x112>
 800b29e:	f005 0501 	and.w	r5, r5, #1
 800b2a2:	f1c5 0502 	rsb	r5, r5, #2
 800b2a6:	2a00      	cmp	r2, #0
 800b2a8:	d15a      	bne.n	800b360 <__ieee754_pow+0x160>
 800b2aa:	4b99      	ldr	r3, [pc, #612]	; (800b510 <__ieee754_pow+0x310>)
 800b2ac:	4598      	cmp	r8, r3
 800b2ae:	d122      	bne.n	800b2f6 <__ieee754_pow+0xf6>
 800b2b0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b2b4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b2b8:	ea53 030b 	orrs.w	r3, r3, fp
 800b2bc:	f000 82b8 	beq.w	800b830 <__ieee754_pow+0x630>
 800b2c0:	4b96      	ldr	r3, [pc, #600]	; (800b51c <__ieee754_pow+0x31c>)
 800b2c2:	429c      	cmp	r4, r3
 800b2c4:	dd27      	ble.n	800b316 <__ieee754_pow+0x116>
 800b2c6:	f1b9 0f00 	cmp.w	r9, #0
 800b2ca:	f280 82b4 	bge.w	800b836 <__ieee754_pow+0x636>
 800b2ce:	ed9f 7b84 	vldr	d7, [pc, #528]	; 800b4e0 <__ieee754_pow+0x2e0>
 800b2d2:	ed8d 7b00 	vstr	d7, [sp]
 800b2d6:	e026      	b.n	800b326 <__ieee754_pow+0x126>
 800b2d8:	2a00      	cmp	r2, #0
 800b2da:	d140      	bne.n	800b35e <__ieee754_pow+0x15e>
 800b2dc:	f1c3 0314 	rsb	r3, r3, #20
 800b2e0:	fa48 f503 	asr.w	r5, r8, r3
 800b2e4:	fa05 f303 	lsl.w	r3, r5, r3
 800b2e8:	4543      	cmp	r3, r8
 800b2ea:	f040 82aa 	bne.w	800b842 <__ieee754_pow+0x642>
 800b2ee:	f005 0501 	and.w	r5, r5, #1
 800b2f2:	f1c5 0502 	rsb	r5, r5, #2
 800b2f6:	4b8a      	ldr	r3, [pc, #552]	; (800b520 <__ieee754_pow+0x320>)
 800b2f8:	4598      	cmp	r8, r3
 800b2fa:	d11b      	bne.n	800b334 <__ieee754_pow+0x134>
 800b2fc:	f1b9 0f00 	cmp.w	r9, #0
 800b300:	f280 829c 	bge.w	800b83c <__ieee754_pow+0x63c>
 800b304:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800b308:	ee87 7b08 	vdiv.f64	d7, d7, d8
 800b30c:	e7e1      	b.n	800b2d2 <__ieee754_pow+0xd2>
 800b30e:	2502      	movs	r5, #2
 800b310:	e7c9      	b.n	800b2a6 <__ieee754_pow+0xa6>
 800b312:	2500      	movs	r5, #0
 800b314:	e7c7      	b.n	800b2a6 <__ieee754_pow+0xa6>
 800b316:	f1b9 0f00 	cmp.w	r9, #0
 800b31a:	dad8      	bge.n	800b2ce <__ieee754_pow+0xce>
 800b31c:	f087 4400 	eor.w	r4, r7, #2147483648	; 0x80000000
 800b320:	4633      	mov	r3, r6
 800b322:	e9cd 3400 	strd	r3, r4, [sp]
 800b326:	ed9d 0b00 	vldr	d0, [sp]
 800b32a:	b005      	add	sp, #20
 800b32c:	ecbd 8b02 	vpop	{d8}
 800b330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b334:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b338:	d102      	bne.n	800b340 <__ieee754_pow+0x140>
 800b33a:	ee28 7b08 	vmul.f64	d7, d8, d8
 800b33e:	e7c8      	b.n	800b2d2 <__ieee754_pow+0xd2>
 800b340:	4b78      	ldr	r3, [pc, #480]	; (800b524 <__ieee754_pow+0x324>)
 800b342:	4599      	cmp	r9, r3
 800b344:	d10c      	bne.n	800b360 <__ieee754_pow+0x160>
 800b346:	f1ba 0f00 	cmp.w	sl, #0
 800b34a:	db09      	blt.n	800b360 <__ieee754_pow+0x160>
 800b34c:	eeb0 0b48 	vmov.f64	d0, d8
 800b350:	b005      	add	sp, #20
 800b352:	ecbd 8b02 	vpop	{d8}
 800b356:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b35a:	f000 bad7 	b.w	800b90c <__ieee754_sqrt>
 800b35e:	2500      	movs	r5, #0
 800b360:	eeb0 0b48 	vmov.f64	d0, d8
 800b364:	f000 fad5 	bl	800b912 <fabs>
 800b368:	ed8d 0b00 	vstr	d0, [sp]
 800b36c:	f1bb 0f00 	cmp.w	fp, #0
 800b370:	d128      	bne.n	800b3c4 <__ieee754_pow+0x1c4>
 800b372:	b124      	cbz	r4, 800b37e <__ieee754_pow+0x17e>
 800b374:	4b6a      	ldr	r3, [pc, #424]	; (800b520 <__ieee754_pow+0x320>)
 800b376:	f02a 4240 	bic.w	r2, sl, #3221225472	; 0xc0000000
 800b37a:	429a      	cmp	r2, r3
 800b37c:	d122      	bne.n	800b3c4 <__ieee754_pow+0x1c4>
 800b37e:	f1b9 0f00 	cmp.w	r9, #0
 800b382:	da07      	bge.n	800b394 <__ieee754_pow+0x194>
 800b384:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800b388:	ed9d 6b00 	vldr	d6, [sp]
 800b38c:	ee87 7b06 	vdiv.f64	d7, d7, d6
 800b390:	ed8d 7b00 	vstr	d7, [sp]
 800b394:	f1ba 0f00 	cmp.w	sl, #0
 800b398:	dac5      	bge.n	800b326 <__ieee754_pow+0x126>
 800b39a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b39e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b3a2:	ea54 0305 	orrs.w	r3, r4, r5
 800b3a6:	d106      	bne.n	800b3b6 <__ieee754_pow+0x1b6>
 800b3a8:	ed9d 7b00 	vldr	d7, [sp]
 800b3ac:	ee37 7b47 	vsub.f64	d7, d7, d7
 800b3b0:	ee87 7b07 	vdiv.f64	d7, d7, d7
 800b3b4:	e78d      	b.n	800b2d2 <__ieee754_pow+0xd2>
 800b3b6:	2d01      	cmp	r5, #1
 800b3b8:	d1b5      	bne.n	800b326 <__ieee754_pow+0x126>
 800b3ba:	ed9d 7b00 	vldr	d7, [sp]
 800b3be:	eeb1 7b47 	vneg.f64	d7, d7
 800b3c2:	e786      	b.n	800b2d2 <__ieee754_pow+0xd2>
 800b3c4:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800b3c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b3cc:	ea55 030a 	orrs.w	r3, r5, sl
 800b3d0:	d104      	bne.n	800b3dc <__ieee754_pow+0x1dc>
 800b3d2:	ee38 8b48 	vsub.f64	d8, d8, d8
 800b3d6:	ee88 7b08 	vdiv.f64	d7, d8, d8
 800b3da:	e77a      	b.n	800b2d2 <__ieee754_pow+0xd2>
 800b3dc:	4b52      	ldr	r3, [pc, #328]	; (800b528 <__ieee754_pow+0x328>)
 800b3de:	4598      	cmp	r8, r3
 800b3e0:	f340 80a8 	ble.w	800b534 <__ieee754_pow+0x334>
 800b3e4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b3e8:	4598      	cmp	r8, r3
 800b3ea:	dd0b      	ble.n	800b404 <__ieee754_pow+0x204>
 800b3ec:	4b4b      	ldr	r3, [pc, #300]	; (800b51c <__ieee754_pow+0x31c>)
 800b3ee:	429c      	cmp	r4, r3
 800b3f0:	dc0e      	bgt.n	800b410 <__ieee754_pow+0x210>
 800b3f2:	f1b9 0f00 	cmp.w	r9, #0
 800b3f6:	f6bf af6a 	bge.w	800b2ce <__ieee754_pow+0xce>
 800b3fa:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 800b4e8 <__ieee754_pow+0x2e8>
 800b3fe:	ee27 7b07 	vmul.f64	d7, d7, d7
 800b402:	e766      	b.n	800b2d2 <__ieee754_pow+0xd2>
 800b404:	4b49      	ldr	r3, [pc, #292]	; (800b52c <__ieee754_pow+0x32c>)
 800b406:	429c      	cmp	r4, r3
 800b408:	ddf3      	ble.n	800b3f2 <__ieee754_pow+0x1f2>
 800b40a:	4b45      	ldr	r3, [pc, #276]	; (800b520 <__ieee754_pow+0x320>)
 800b40c:	429c      	cmp	r4, r3
 800b40e:	dd03      	ble.n	800b418 <__ieee754_pow+0x218>
 800b410:	f1b9 0f00 	cmp.w	r9, #0
 800b414:	dcf1      	bgt.n	800b3fa <__ieee754_pow+0x1fa>
 800b416:	e75a      	b.n	800b2ce <__ieee754_pow+0xce>
 800b418:	ed9d 7b00 	vldr	d7, [sp]
 800b41c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b420:	ed9f 5b33 	vldr	d5, [pc, #204]	; 800b4f0 <__ieee754_pow+0x2f0>
 800b424:	ee37 6b46 	vsub.f64	d6, d7, d6
 800b428:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
 800b42c:	eeb1 3b46 	vneg.f64	d3, d6
 800b430:	eea3 5b07 	vfma.f64	d5, d3, d7
 800b434:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800b438:	eea5 7b46 	vfms.f64	d7, d5, d6
 800b43c:	ee26 5b06 	vmul.f64	d5, d6, d6
 800b440:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b444:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 800b4f8 <__ieee754_pow+0x2f8>
 800b448:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800b44c:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800b500 <__ieee754_pow+0x300>
 800b450:	eea6 7b05 	vfma.f64	d7, d6, d5
 800b454:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800b508 <__ieee754_pow+0x308>
 800b458:	eeb0 4b47 	vmov.f64	d4, d7
 800b45c:	eea6 4b05 	vfma.f64	d4, d6, d5
 800b460:	ec53 2b14 	vmov	r2, r3, d4
 800b464:	2200      	movs	r2, #0
 800b466:	ec43 2b14 	vmov	d4, r2, r3
 800b46a:	eeb0 6b44 	vmov.f64	d6, d4
 800b46e:	eea3 6b05 	vfma.f64	d6, d3, d5
 800b472:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b476:	3d01      	subs	r5, #1
 800b478:	ea55 030a 	orrs.w	r3, r5, sl
 800b47c:	f04f 0200 	mov.w	r2, #0
 800b480:	463b      	mov	r3, r7
 800b482:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800b486:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800b48a:	ec47 6b15 	vmov	d5, r6, r7
 800b48e:	fe06 8b08 	vseleq.f64	d8, d6, d8
 800b492:	ec47 6b13 	vmov	d3, r6, r7
 800b496:	ec43 2b16 	vmov	d6, r2, r3
 800b49a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b49e:	ee35 5b46 	vsub.f64	d5, d5, d6
 800b4a2:	4b23      	ldr	r3, [pc, #140]	; (800b530 <__ieee754_pow+0x330>)
 800b4a4:	eea5 7b04 	vfma.f64	d7, d5, d4
 800b4a8:	ee24 6b06 	vmul.f64	d6, d4, d6
 800b4ac:	ee37 5b06 	vadd.f64	d5, d7, d6
 800b4b0:	ee15 1a90 	vmov	r1, s11
 800b4b4:	4299      	cmp	r1, r3
 800b4b6:	ee15 2a10 	vmov	r2, s10
 800b4ba:	f340 819b 	ble.w	800b7f4 <__ieee754_pow+0x5f4>
 800b4be:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b4c2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	f000 810a 	beq.w	800b6e0 <__ieee754_pow+0x4e0>
 800b4cc:	ed9f 7b06 	vldr	d7, [pc, #24]	; 800b4e8 <__ieee754_pow+0x2e8>
 800b4d0:	ee28 8b07 	vmul.f64	d8, d8, d7
 800b4d4:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b4d8:	e6fb      	b.n	800b2d2 <__ieee754_pow+0xd2>
 800b4da:	bf00      	nop
 800b4dc:	f3af 8000 	nop.w
	...
 800b4e8:	8800759c 	.word	0x8800759c
 800b4ec:	7e37e43c 	.word	0x7e37e43c
 800b4f0:	55555555 	.word	0x55555555
 800b4f4:	3fd55555 	.word	0x3fd55555
 800b4f8:	652b82fe 	.word	0x652b82fe
 800b4fc:	3ff71547 	.word	0x3ff71547
 800b500:	f85ddf44 	.word	0xf85ddf44
 800b504:	3e54ae0b 	.word	0x3e54ae0b
 800b508:	60000000 	.word	0x60000000
 800b50c:	3ff71547 	.word	0x3ff71547
 800b510:	7ff00000 	.word	0x7ff00000
 800b514:	0800e8d1 	.word	0x0800e8d1
 800b518:	433fffff 	.word	0x433fffff
 800b51c:	3fefffff 	.word	0x3fefffff
 800b520:	3ff00000 	.word	0x3ff00000
 800b524:	3fe00000 	.word	0x3fe00000
 800b528:	41e00000 	.word	0x41e00000
 800b52c:	3feffffe 	.word	0x3feffffe
 800b530:	408fffff 	.word	0x408fffff
 800b534:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b538:	f280 80ce 	bge.w	800b6d8 <__ieee754_pow+0x4d8>
 800b53c:	ed9d 6b00 	vldr	d6, [sp]
 800b540:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 800b848 <__ieee754_pow+0x648>
 800b544:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b548:	ed8d 7b00 	vstr	d7, [sp]
 800b54c:	9c01      	ldr	r4, [sp, #4]
 800b54e:	f06f 0334 	mvn.w	r3, #52	; 0x34
 800b552:	1521      	asrs	r1, r4, #20
 800b554:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b558:	4419      	add	r1, r3
 800b55a:	4be3      	ldr	r3, [pc, #908]	; (800b8e8 <__ieee754_pow+0x6e8>)
 800b55c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b560:	f044 507f 	orr.w	r0, r4, #1069547520	; 0x3fc00000
 800b564:	429c      	cmp	r4, r3
 800b566:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 800b56a:	dd06      	ble.n	800b57a <__ieee754_pow+0x37a>
 800b56c:	4bdf      	ldr	r3, [pc, #892]	; (800b8ec <__ieee754_pow+0x6ec>)
 800b56e:	429c      	cmp	r4, r3
 800b570:	f340 80b4 	ble.w	800b6dc <__ieee754_pow+0x4dc>
 800b574:	3101      	adds	r1, #1
 800b576:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800b57a:	2400      	movs	r4, #0
 800b57c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b580:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800b584:	4603      	mov	r3, r0
 800b586:	ec43 2b17 	vmov	d7, r2, r3
 800b58a:	4bd9      	ldr	r3, [pc, #868]	; (800b8f0 <__ieee754_pow+0x6f0>)
 800b58c:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 800b590:	4463      	add	r3, ip
 800b592:	ed93 5b00 	vldr	d5, [r3]
 800b596:	1040      	asrs	r0, r0, #1
 800b598:	ee37 2b45 	vsub.f64	d2, d7, d5
 800b59c:	ee35 6b07 	vadd.f64	d6, d5, d7
 800b5a0:	ee84 1b06 	vdiv.f64	d1, d4, d6
 800b5a4:	ee22 6b01 	vmul.f64	d6, d2, d1
 800b5a8:	ed8d 6b00 	vstr	d6, [sp]
 800b5ac:	e9dd 8900 	ldrd	r8, r9, [sp]
 800b5b0:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 800b5b4:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
 800b5b8:	f04f 0800 	mov.w	r8, #0
 800b5bc:	eb00 4384 	add.w	r3, r0, r4, lsl #18
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	ec49 8b14 	vmov	d4, r8, r9
 800b5c6:	ec43 2b16 	vmov	d6, r2, r3
 800b5ca:	eeb1 3b44 	vneg.f64	d3, d4
 800b5ce:	eea3 2b06 	vfma.f64	d2, d3, d6
 800b5d2:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b5d6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b5da:	eea3 2b07 	vfma.f64	d2, d3, d7
 800b5de:	ed9d 7b00 	vldr	d7, [sp]
 800b5e2:	ee22 2b01 	vmul.f64	d2, d2, d1
 800b5e6:	ee27 5b07 	vmul.f64	d5, d7, d7
 800b5ea:	ee37 6b04 	vadd.f64	d6, d7, d4
 800b5ee:	ed9f 1b98 	vldr	d1, [pc, #608]	; 800b850 <__ieee754_pow+0x650>
 800b5f2:	ee25 0b05 	vmul.f64	d0, d5, d5
 800b5f6:	ee26 6b02 	vmul.f64	d6, d6, d2
 800b5fa:	ed9f 7b97 	vldr	d7, [pc, #604]	; 800b858 <__ieee754_pow+0x658>
 800b5fe:	eea5 7b01 	vfma.f64	d7, d5, d1
 800b602:	ed9f 1b97 	vldr	d1, [pc, #604]	; 800b860 <__ieee754_pow+0x660>
 800b606:	eea7 1b05 	vfma.f64	d1, d7, d5
 800b60a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 800b868 <__ieee754_pow+0x668>
 800b60e:	eea1 7b05 	vfma.f64	d7, d1, d5
 800b612:	ed9f 1b97 	vldr	d1, [pc, #604]	; 800b870 <__ieee754_pow+0x670>
 800b616:	eea7 1b05 	vfma.f64	d1, d7, d5
 800b61a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 800b878 <__ieee754_pow+0x678>
 800b61e:	eea1 7b05 	vfma.f64	d7, d1, d5
 800b622:	eea0 6b07 	vfma.f64	d6, d0, d7
 800b626:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 800b62a:	eeb0 5b47 	vmov.f64	d5, d7
 800b62e:	eea4 5b04 	vfma.f64	d5, d4, d4
 800b632:	ee35 5b06 	vadd.f64	d5, d5, d6
 800b636:	ed8d 5b02 	vstr	d5, [sp, #8]
 800b63a:	f8cd 8008 	str.w	r8, [sp, #8]
 800b63e:	ed9d 5b02 	vldr	d5, [sp, #8]
 800b642:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b646:	eea3 7b04 	vfma.f64	d7, d3, d4
 800b64a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b64e:	ed9d 6b00 	vldr	d6, [sp]
 800b652:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b656:	eea2 7b05 	vfma.f64	d7, d2, d5
 800b65a:	eeb0 6b47 	vmov.f64	d6, d7
 800b65e:	eea4 6b05 	vfma.f64	d6, d4, d5
 800b662:	ed8d 6b00 	vstr	d6, [sp]
 800b666:	f8cd 8000 	str.w	r8, [sp]
 800b66a:	ed9d 2b00 	vldr	d2, [sp]
 800b66e:	eeb0 6b42 	vmov.f64	d6, d2
 800b672:	eea3 6b05 	vfma.f64	d6, d3, d5
 800b676:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b67a:	ed9f 6b81 	vldr	d6, [pc, #516]	; 800b880 <__ieee754_pow+0x680>
 800b67e:	4b9d      	ldr	r3, [pc, #628]	; (800b8f4 <__ieee754_pow+0x6f4>)
 800b680:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b684:	ed9f 6b80 	vldr	d6, [pc, #512]	; 800b888 <__ieee754_pow+0x688>
 800b688:	4463      	add	r3, ip
 800b68a:	eea2 7b06 	vfma.f64	d7, d2, d6
 800b68e:	ed93 6b00 	vldr	d6, [r3]
 800b692:	4b99      	ldr	r3, [pc, #612]	; (800b8f8 <__ieee754_pow+0x6f8>)
 800b694:	ee37 6b06 	vadd.f64	d6, d7, d6
 800b698:	449c      	add	ip, r3
 800b69a:	ed9c 1b00 	vldr	d1, [ip]
 800b69e:	eeb0 4b46 	vmov.f64	d4, d6
 800b6a2:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 800b890 <__ieee754_pow+0x690>
 800b6a6:	ee07 1a90 	vmov	s15, r1
 800b6aa:	eea2 4b03 	vfma.f64	d4, d2, d3
 800b6ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b6b2:	ee34 4b01 	vadd.f64	d4, d4, d1
 800b6b6:	ee34 5b07 	vadd.f64	d5, d4, d7
 800b6ba:	ed8d 5b00 	vstr	d5, [sp]
 800b6be:	f8cd 8000 	str.w	r8, [sp]
 800b6c2:	ed9d 4b00 	vldr	d4, [sp]
 800b6c6:	ee34 7b47 	vsub.f64	d7, d4, d7
 800b6ca:	ee37 7b41 	vsub.f64	d7, d7, d1
 800b6ce:	eea2 7b43 	vfms.f64	d7, d2, d3
 800b6d2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b6d6:	e6ce      	b.n	800b476 <__ieee754_pow+0x276>
 800b6d8:	2300      	movs	r3, #0
 800b6da:	e73a      	b.n	800b552 <__ieee754_pow+0x352>
 800b6dc:	2401      	movs	r4, #1
 800b6de:	e74d      	b.n	800b57c <__ieee754_pow+0x37c>
 800b6e0:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 800b898 <__ieee754_pow+0x698>
 800b6e4:	ee35 5b46 	vsub.f64	d5, d5, d6
 800b6e8:	ee37 4b04 	vadd.f64	d4, d7, d4
 800b6ec:	eeb4 4bc5 	vcmpe.f64	d4, d5
 800b6f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6f4:	f73f aeea 	bgt.w	800b4cc <__ieee754_pow+0x2cc>
 800b6f8:	4a80      	ldr	r2, [pc, #512]	; (800b8fc <__ieee754_pow+0x6fc>)
 800b6fa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b6fe:	4293      	cmp	r3, r2
 800b700:	f340 808e 	ble.w	800b820 <__ieee754_pow+0x620>
 800b704:	151b      	asrs	r3, r3, #20
 800b706:	f2a3 30fe 	subw	r0, r3, #1022	; 0x3fe
 800b70a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b70e:	4103      	asrs	r3, r0
 800b710:	440b      	add	r3, r1
 800b712:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b716:	487a      	ldr	r0, [pc, #488]	; (800b900 <__ieee754_pow+0x700>)
 800b718:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b71c:	4110      	asrs	r0, r2
 800b71e:	ea23 0500 	bic.w	r5, r3, r0
 800b722:	f3c3 0013 	ubfx	r0, r3, #0, #20
 800b726:	2400      	movs	r4, #0
 800b728:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 800b72c:	f1c2 0214 	rsb	r2, r2, #20
 800b730:	ec45 4b15 	vmov	d5, r4, r5
 800b734:	4110      	asrs	r0, r2
 800b736:	2900      	cmp	r1, #0
 800b738:	bfb8      	it	lt
 800b73a:	4240      	neglt	r0, r0
 800b73c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b740:	ee36 5b07 	vadd.f64	d5, d6, d7
 800b744:	ec53 2b15 	vmov	r2, r3, d5
 800b748:	2200      	movs	r2, #0
 800b74a:	ec43 2b15 	vmov	d5, r2, r3
 800b74e:	ed9f 4b54 	vldr	d4, [pc, #336]	; 800b8a0 <__ieee754_pow+0x6a0>
 800b752:	ee35 6b46 	vsub.f64	d6, d5, d6
 800b756:	ee37 6b46 	vsub.f64	d6, d7, d6
 800b75a:	ed9f 7b53 	vldr	d7, [pc, #332]	; 800b8a8 <__ieee754_pow+0x6a8>
 800b75e:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b762:	eea6 7b04 	vfma.f64	d7, d6, d4
 800b766:	ed9f 6b52 	vldr	d6, [pc, #328]	; 800b8b0 <__ieee754_pow+0x6b0>
 800b76a:	eeb0 4b47 	vmov.f64	d4, d7
 800b76e:	eea5 4b06 	vfma.f64	d4, d5, d6
 800b772:	eeb0 3b44 	vmov.f64	d3, d4
 800b776:	eea5 3b46 	vfms.f64	d3, d5, d6
 800b77a:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 800b8b8 <__ieee754_pow+0x6b8>
 800b77e:	ee37 7b43 	vsub.f64	d7, d7, d3
 800b782:	ee24 6b04 	vmul.f64	d6, d4, d4
 800b786:	ed9f 3b4e 	vldr	d3, [pc, #312]	; 800b8c0 <__ieee754_pow+0x6c0>
 800b78a:	eea4 7b07 	vfma.f64	d7, d4, d7
 800b78e:	eea6 3b05 	vfma.f64	d3, d6, d5
 800b792:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 800b8c8 <__ieee754_pow+0x6c8>
 800b796:	eea3 5b06 	vfma.f64	d5, d3, d6
 800b79a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800b8d0 <__ieee754_pow+0x6d0>
 800b79e:	eea5 3b06 	vfma.f64	d3, d5, d6
 800b7a2:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 800b8d8 <__ieee754_pow+0x6d8>
 800b7a6:	eea3 5b06 	vfma.f64	d5, d3, d6
 800b7aa:	eeb0 3b44 	vmov.f64	d3, d4
 800b7ae:	eea5 3b46 	vfms.f64	d3, d5, d6
 800b7b2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b7b6:	eeb0 6b43 	vmov.f64	d6, d3
 800b7ba:	ee24 3b03 	vmul.f64	d3, d4, d3
 800b7be:	ee36 5b45 	vsub.f64	d5, d6, d5
 800b7c2:	ee83 6b05 	vdiv.f64	d6, d3, d5
 800b7c6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b7ca:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b7ce:	ee37 7b44 	vsub.f64	d7, d7, d4
 800b7d2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b7d6:	ed8d 7b00 	vstr	d7, [sp]
 800b7da:	9901      	ldr	r1, [sp, #4]
 800b7dc:	eb01 5100 	add.w	r1, r1, r0, lsl #20
 800b7e0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800b7e4:	da1e      	bge.n	800b824 <__ieee754_pow+0x624>
 800b7e6:	eeb0 0b47 	vmov.f64	d0, d7
 800b7ea:	f000 f939 	bl	800ba60 <scalbn>
 800b7ee:	ee20 7b08 	vmul.f64	d7, d0, d8
 800b7f2:	e56e      	b.n	800b2d2 <__ieee754_pow+0xd2>
 800b7f4:	4b43      	ldr	r3, [pc, #268]	; (800b904 <__ieee754_pow+0x704>)
 800b7f6:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 800b7fa:	4298      	cmp	r0, r3
 800b7fc:	f77f af7c 	ble.w	800b6f8 <__ieee754_pow+0x4f8>
 800b800:	4b41      	ldr	r3, [pc, #260]	; (800b908 <__ieee754_pow+0x708>)
 800b802:	440b      	add	r3, r1
 800b804:	4313      	orrs	r3, r2
 800b806:	d002      	beq.n	800b80e <__ieee754_pow+0x60e>
 800b808:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800b8e0 <__ieee754_pow+0x6e0>
 800b80c:	e660      	b.n	800b4d0 <__ieee754_pow+0x2d0>
 800b80e:	ee35 5b46 	vsub.f64	d5, d5, d6
 800b812:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b81a:	f6ff af6d 	blt.w	800b6f8 <__ieee754_pow+0x4f8>
 800b81e:	e7f3      	b.n	800b808 <__ieee754_pow+0x608>
 800b820:	2000      	movs	r0, #0
 800b822:	e78d      	b.n	800b740 <__ieee754_pow+0x540>
 800b824:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b828:	460b      	mov	r3, r1
 800b82a:	ec43 2b10 	vmov	d0, r2, r3
 800b82e:	e7de      	b.n	800b7ee <__ieee754_pow+0x5ee>
 800b830:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800b834:	e54d      	b.n	800b2d2 <__ieee754_pow+0xd2>
 800b836:	e9cd 6700 	strd	r6, r7, [sp]
 800b83a:	e574      	b.n	800b326 <__ieee754_pow+0x126>
 800b83c:	ed8d 8b00 	vstr	d8, [sp]
 800b840:	e571      	b.n	800b326 <__ieee754_pow+0x126>
 800b842:	4615      	mov	r5, r2
 800b844:	e557      	b.n	800b2f6 <__ieee754_pow+0xf6>
 800b846:	bf00      	nop
 800b848:	00000000 	.word	0x00000000
 800b84c:	43400000 	.word	0x43400000
 800b850:	4a454eef 	.word	0x4a454eef
 800b854:	3fca7e28 	.word	0x3fca7e28
 800b858:	93c9db65 	.word	0x93c9db65
 800b85c:	3fcd864a 	.word	0x3fcd864a
 800b860:	a91d4101 	.word	0xa91d4101
 800b864:	3fd17460 	.word	0x3fd17460
 800b868:	518f264d 	.word	0x518f264d
 800b86c:	3fd55555 	.word	0x3fd55555
 800b870:	db6fabff 	.word	0xdb6fabff
 800b874:	3fdb6db6 	.word	0x3fdb6db6
 800b878:	33333303 	.word	0x33333303
 800b87c:	3fe33333 	.word	0x3fe33333
 800b880:	dc3a03fd 	.word	0xdc3a03fd
 800b884:	3feec709 	.word	0x3feec709
 800b888:	145b01f5 	.word	0x145b01f5
 800b88c:	be3e2fe0 	.word	0xbe3e2fe0
 800b890:	e0000000 	.word	0xe0000000
 800b894:	3feec709 	.word	0x3feec709
 800b898:	652b82fe 	.word	0x652b82fe
 800b89c:	3c971547 	.word	0x3c971547
 800b8a0:	fefa39ef 	.word	0xfefa39ef
 800b8a4:	3fe62e42 	.word	0x3fe62e42
 800b8a8:	0ca86c39 	.word	0x0ca86c39
 800b8ac:	be205c61 	.word	0xbe205c61
 800b8b0:	00000000 	.word	0x00000000
 800b8b4:	3fe62e43 	.word	0x3fe62e43
 800b8b8:	72bea4d0 	.word	0x72bea4d0
 800b8bc:	3e663769 	.word	0x3e663769
 800b8c0:	c5d26bf1 	.word	0xc5d26bf1
 800b8c4:	bebbbd41 	.word	0xbebbbd41
 800b8c8:	af25de2c 	.word	0xaf25de2c
 800b8cc:	3f11566a 	.word	0x3f11566a
 800b8d0:	16bebd93 	.word	0x16bebd93
 800b8d4:	bf66c16c 	.word	0xbf66c16c
 800b8d8:	5555553e 	.word	0x5555553e
 800b8dc:	3fc55555 	.word	0x3fc55555
 800b8e0:	c2f8f359 	.word	0xc2f8f359
 800b8e4:	01a56e1f 	.word	0x01a56e1f
 800b8e8:	0003988e 	.word	0x0003988e
 800b8ec:	000bb679 	.word	0x000bb679
 800b8f0:	0800e6e8 	.word	0x0800e6e8
 800b8f4:	0800e708 	.word	0x0800e708
 800b8f8:	0800e6f8 	.word	0x0800e6f8
 800b8fc:	3fe00000 	.word	0x3fe00000
 800b900:	000fffff 	.word	0x000fffff
 800b904:	4090cbff 	.word	0x4090cbff
 800b908:	3f6f3400 	.word	0x3f6f3400

0800b90c <__ieee754_sqrt>:
 800b90c:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800b910:	4770      	bx	lr

0800b912 <fabs>:
 800b912:	ec51 0b10 	vmov	r0, r1, d0
 800b916:	ee10 2a10 	vmov	r2, s0
 800b91a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b91e:	ec43 2b10 	vmov	d0, r2, r3
 800b922:	4770      	bx	lr

0800b924 <finite>:
 800b924:	ee10 3a90 	vmov	r3, s1
 800b928:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800b92c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b930:	0fc0      	lsrs	r0, r0, #31
 800b932:	4770      	bx	lr

0800b934 <matherr>:
 800b934:	2000      	movs	r0, #0
 800b936:	4770      	bx	lr

0800b938 <nan>:
 800b938:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b940 <nan+0x8>
 800b93c:	4770      	bx	lr
 800b93e:	bf00      	nop
 800b940:	00000000 	.word	0x00000000
 800b944:	7ff80000 	.word	0x7ff80000

0800b948 <rint>:
 800b948:	b530      	push	{r4, r5, lr}
 800b94a:	b085      	sub	sp, #20
 800b94c:	ed8d 0b00 	vstr	d0, [sp]
 800b950:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b954:	f3c3 510a 	ubfx	r1, r3, #20, #11
 800b958:	f2a1 30ff 	subw	r0, r1, #1023	; 0x3ff
 800b95c:	2813      	cmp	r0, #19
 800b95e:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 800b962:	dc5a      	bgt.n	800ba1a <rint+0xd2>
 800b964:	2800      	cmp	r0, #0
 800b966:	da2f      	bge.n	800b9c8 <rint+0x80>
 800b968:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b96c:	4311      	orrs	r1, r2
 800b96e:	d027      	beq.n	800b9c0 <rint+0x78>
 800b970:	f3c3 0513 	ubfx	r5, r3, #0, #20
 800b974:	4315      	orrs	r5, r2
 800b976:	426a      	negs	r2, r5
 800b978:	432a      	orrs	r2, r5
 800b97a:	0b12      	lsrs	r2, r2, #12
 800b97c:	0c5b      	lsrs	r3, r3, #17
 800b97e:	045b      	lsls	r3, r3, #17
 800b980:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800b984:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b988:	ea42 0103 	orr.w	r1, r2, r3
 800b98c:	4b31      	ldr	r3, [pc, #196]	; (800ba54 <rint+0x10c>)
 800b98e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b992:	ed93 6b00 	vldr	d6, [r3]
 800b996:	ec41 0b17 	vmov	d7, r0, r1
 800b99a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b99e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b9a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b9a6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b9aa:	ed8d 7b00 	vstr	d7, [sp]
 800b9ae:	9b01      	ldr	r3, [sp, #4]
 800b9b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b9b8:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 800b9bc:	e9cd 0100 	strd	r0, r1, [sp]
 800b9c0:	ed9d 0b00 	vldr	d0, [sp]
 800b9c4:	b005      	add	sp, #20
 800b9c6:	bd30      	pop	{r4, r5, pc}
 800b9c8:	4923      	ldr	r1, [pc, #140]	; (800ba58 <rint+0x110>)
 800b9ca:	4101      	asrs	r1, r0
 800b9cc:	ea03 0501 	and.w	r5, r3, r1
 800b9d0:	4315      	orrs	r5, r2
 800b9d2:	d0f5      	beq.n	800b9c0 <rint+0x78>
 800b9d4:	0849      	lsrs	r1, r1, #1
 800b9d6:	ea03 0501 	and.w	r5, r3, r1
 800b9da:	432a      	orrs	r2, r5
 800b9dc:	d00b      	beq.n	800b9f6 <rint+0xae>
 800b9de:	ea23 0101 	bic.w	r1, r3, r1
 800b9e2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b9e6:	2813      	cmp	r0, #19
 800b9e8:	fa43 f300 	asr.w	r3, r3, r0
 800b9ec:	bf0c      	ite	eq
 800b9ee:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 800b9f2:	2200      	movne	r2, #0
 800b9f4:	430b      	orrs	r3, r1
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	4b16      	ldr	r3, [pc, #88]	; (800ba54 <rint+0x10c>)
 800b9fa:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800b9fe:	ed94 6b00 	vldr	d6, [r4]
 800ba02:	4610      	mov	r0, r2
 800ba04:	ec41 0b17 	vmov	d7, r0, r1
 800ba08:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ba0c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ba10:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba14:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ba18:	e008      	b.n	800ba2c <rint+0xe4>
 800ba1a:	2833      	cmp	r0, #51	; 0x33
 800ba1c:	dd09      	ble.n	800ba32 <rint+0xea>
 800ba1e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800ba22:	d1cd      	bne.n	800b9c0 <rint+0x78>
 800ba24:	ed9d 7b00 	vldr	d7, [sp]
 800ba28:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ba2c:	ed8d 7b00 	vstr	d7, [sp]
 800ba30:	e7c6      	b.n	800b9c0 <rint+0x78>
 800ba32:	f2a1 4013 	subw	r0, r1, #1043	; 0x413
 800ba36:	f04f 31ff 	mov.w	r1, #4294967295
 800ba3a:	40c1      	lsrs	r1, r0
 800ba3c:	420a      	tst	r2, r1
 800ba3e:	d0bf      	beq.n	800b9c0 <rint+0x78>
 800ba40:	0849      	lsrs	r1, r1, #1
 800ba42:	420a      	tst	r2, r1
 800ba44:	bf1f      	itttt	ne
 800ba46:	ea22 0101 	bicne.w	r1, r2, r1
 800ba4a:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 800ba4e:	4102      	asrne	r2, r0
 800ba50:	430a      	orrne	r2, r1
 800ba52:	e7d0      	b.n	800b9f6 <rint+0xae>
 800ba54:	0800e718 	.word	0x0800e718
 800ba58:	000fffff 	.word	0x000fffff
 800ba5c:	00000000 	.word	0x00000000

0800ba60 <scalbn>:
 800ba60:	b500      	push	{lr}
 800ba62:	ed2d 8b02 	vpush	{d8}
 800ba66:	b083      	sub	sp, #12
 800ba68:	ed8d 0b00 	vstr	d0, [sp]
 800ba6c:	9b01      	ldr	r3, [sp, #4]
 800ba6e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ba72:	b9a2      	cbnz	r2, 800ba9e <scalbn+0x3e>
 800ba74:	9a00      	ldr	r2, [sp, #0]
 800ba76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	d03a      	beq.n	800baf4 <scalbn+0x94>
 800ba7e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800bb38 <scalbn+0xd8>
 800ba82:	4b35      	ldr	r3, [pc, #212]	; (800bb58 <scalbn+0xf8>)
 800ba84:	ee20 7b07 	vmul.f64	d7, d0, d7
 800ba88:	4298      	cmp	r0, r3
 800ba8a:	ed8d 7b00 	vstr	d7, [sp]
 800ba8e:	da11      	bge.n	800bab4 <scalbn+0x54>
 800ba90:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800bb40 <scalbn+0xe0>
 800ba94:	ed9d 6b00 	vldr	d6, [sp]
 800ba98:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ba9c:	e007      	b.n	800baae <scalbn+0x4e>
 800ba9e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800baa2:	428a      	cmp	r2, r1
 800baa4:	d10a      	bne.n	800babc <scalbn+0x5c>
 800baa6:	ed9d 7b00 	vldr	d7, [sp]
 800baaa:	ee37 7b07 	vadd.f64	d7, d7, d7
 800baae:	ed8d 7b00 	vstr	d7, [sp]
 800bab2:	e01f      	b.n	800baf4 <scalbn+0x94>
 800bab4:	9b01      	ldr	r3, [sp, #4]
 800bab6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800baba:	3a36      	subs	r2, #54	; 0x36
 800babc:	4402      	add	r2, r0
 800babe:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bac2:	428a      	cmp	r2, r1
 800bac4:	dd0a      	ble.n	800badc <scalbn+0x7c>
 800bac6:	ed9f 8b20 	vldr	d8, [pc, #128]	; 800bb48 <scalbn+0xe8>
 800baca:	eeb0 0b48 	vmov.f64	d0, d8
 800bace:	ed9d 1b00 	vldr	d1, [sp]
 800bad2:	f000 f843 	bl	800bb5c <copysign>
 800bad6:	ee20 7b08 	vmul.f64	d7, d0, d8
 800bada:	e7e8      	b.n	800baae <scalbn+0x4e>
 800badc:	2a00      	cmp	r2, #0
 800bade:	dd10      	ble.n	800bb02 <scalbn+0xa2>
 800bae0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bae4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bae8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800baec:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800baf0:	e9cd 0100 	strd	r0, r1, [sp]
 800baf4:	ed9d 0b00 	vldr	d0, [sp]
 800baf8:	b003      	add	sp, #12
 800bafa:	ecbd 8b02 	vpop	{d8}
 800bafe:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb02:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bb06:	da06      	bge.n	800bb16 <scalbn+0xb6>
 800bb08:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bb0c:	4298      	cmp	r0, r3
 800bb0e:	dcda      	bgt.n	800bac6 <scalbn+0x66>
 800bb10:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 800bb40 <scalbn+0xe0>
 800bb14:	e7d9      	b.n	800baca <scalbn+0x6a>
 800bb16:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb1a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bb1e:	3236      	adds	r2, #54	; 0x36
 800bb20:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bb24:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bb28:	ec41 0b17 	vmov	d7, r0, r1
 800bb2c:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800bb50 <scalbn+0xf0>
 800bb30:	e7b2      	b.n	800ba98 <scalbn+0x38>
 800bb32:	bf00      	nop
 800bb34:	f3af 8000 	nop.w
 800bb38:	00000000 	.word	0x00000000
 800bb3c:	43500000 	.word	0x43500000
 800bb40:	c2f8f359 	.word	0xc2f8f359
 800bb44:	01a56e1f 	.word	0x01a56e1f
 800bb48:	8800759c 	.word	0x8800759c
 800bb4c:	7e37e43c 	.word	0x7e37e43c
 800bb50:	00000000 	.word	0x00000000
 800bb54:	3c900000 	.word	0x3c900000
 800bb58:	ffff3cb0 	.word	0xffff3cb0

0800bb5c <copysign>:
 800bb5c:	ec51 0b10 	vmov	r0, r1, d0
 800bb60:	ee11 0a90 	vmov	r0, s3
 800bb64:	ee10 2a10 	vmov	r2, s0
 800bb68:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800bb6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800bb70:	ea41 0300 	orr.w	r3, r1, r0
 800bb74:	ec43 2b10 	vmov	d0, r2, r3
 800bb78:	4770      	bx	lr
	...

0800bb7c <__errno>:
 800bb7c:	4b01      	ldr	r3, [pc, #4]	; (800bb84 <__errno+0x8>)
 800bb7e:	6818      	ldr	r0, [r3, #0]
 800bb80:	4770      	bx	lr
 800bb82:	bf00      	nop
 800bb84:	20000014 	.word	0x20000014

0800bb88 <__libc_init_array>:
 800bb88:	b570      	push	{r4, r5, r6, lr}
 800bb8a:	4e0d      	ldr	r6, [pc, #52]	; (800bbc0 <__libc_init_array+0x38>)
 800bb8c:	4c0d      	ldr	r4, [pc, #52]	; (800bbc4 <__libc_init_array+0x3c>)
 800bb8e:	1ba4      	subs	r4, r4, r6
 800bb90:	10a4      	asrs	r4, r4, #2
 800bb92:	2500      	movs	r5, #0
 800bb94:	42a5      	cmp	r5, r4
 800bb96:	d109      	bne.n	800bbac <__libc_init_array+0x24>
 800bb98:	4e0b      	ldr	r6, [pc, #44]	; (800bbc8 <__libc_init_array+0x40>)
 800bb9a:	4c0c      	ldr	r4, [pc, #48]	; (800bbcc <__libc_init_array+0x44>)
 800bb9c:	f002 fc7e 	bl	800e49c <_init>
 800bba0:	1ba4      	subs	r4, r4, r6
 800bba2:	10a4      	asrs	r4, r4, #2
 800bba4:	2500      	movs	r5, #0
 800bba6:	42a5      	cmp	r5, r4
 800bba8:	d105      	bne.n	800bbb6 <__libc_init_array+0x2e>
 800bbaa:	bd70      	pop	{r4, r5, r6, pc}
 800bbac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bbb0:	4798      	blx	r3
 800bbb2:	3501      	adds	r5, #1
 800bbb4:	e7ee      	b.n	800bb94 <__libc_init_array+0xc>
 800bbb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bbba:	4798      	blx	r3
 800bbbc:	3501      	adds	r5, #1
 800bbbe:	e7f2      	b.n	800bba6 <__libc_init_array+0x1e>
 800bbc0:	0800e9f0 	.word	0x0800e9f0
 800bbc4:	0800e9f0 	.word	0x0800e9f0
 800bbc8:	0800e9f0 	.word	0x0800e9f0
 800bbcc:	0800e9f4 	.word	0x0800e9f4

0800bbd0 <malloc>:
 800bbd0:	4b02      	ldr	r3, [pc, #8]	; (800bbdc <malloc+0xc>)
 800bbd2:	4601      	mov	r1, r0
 800bbd4:	6818      	ldr	r0, [r3, #0]
 800bbd6:	f000 b86d 	b.w	800bcb4 <_malloc_r>
 800bbda:	bf00      	nop
 800bbdc:	20000014 	.word	0x20000014

0800bbe0 <free>:
 800bbe0:	4b02      	ldr	r3, [pc, #8]	; (800bbec <free+0xc>)
 800bbe2:	4601      	mov	r1, r0
 800bbe4:	6818      	ldr	r0, [r3, #0]
 800bbe6:	f000 b817 	b.w	800bc18 <_free_r>
 800bbea:	bf00      	nop
 800bbec:	20000014 	.word	0x20000014

0800bbf0 <memcpy>:
 800bbf0:	b510      	push	{r4, lr}
 800bbf2:	1e43      	subs	r3, r0, #1
 800bbf4:	440a      	add	r2, r1
 800bbf6:	4291      	cmp	r1, r2
 800bbf8:	d100      	bne.n	800bbfc <memcpy+0xc>
 800bbfa:	bd10      	pop	{r4, pc}
 800bbfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc00:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc04:	e7f7      	b.n	800bbf6 <memcpy+0x6>

0800bc06 <memset>:
 800bc06:	4402      	add	r2, r0
 800bc08:	4603      	mov	r3, r0
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d100      	bne.n	800bc10 <memset+0xa>
 800bc0e:	4770      	bx	lr
 800bc10:	f803 1b01 	strb.w	r1, [r3], #1
 800bc14:	e7f9      	b.n	800bc0a <memset+0x4>
	...

0800bc18 <_free_r>:
 800bc18:	b538      	push	{r3, r4, r5, lr}
 800bc1a:	4605      	mov	r5, r0
 800bc1c:	2900      	cmp	r1, #0
 800bc1e:	d045      	beq.n	800bcac <_free_r+0x94>
 800bc20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc24:	1f0c      	subs	r4, r1, #4
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	bfb8      	it	lt
 800bc2a:	18e4      	addlt	r4, r4, r3
 800bc2c:	f001 fbd0 	bl	800d3d0 <__malloc_lock>
 800bc30:	4a1f      	ldr	r2, [pc, #124]	; (800bcb0 <_free_r+0x98>)
 800bc32:	6813      	ldr	r3, [r2, #0]
 800bc34:	4610      	mov	r0, r2
 800bc36:	b933      	cbnz	r3, 800bc46 <_free_r+0x2e>
 800bc38:	6063      	str	r3, [r4, #4]
 800bc3a:	6014      	str	r4, [r2, #0]
 800bc3c:	4628      	mov	r0, r5
 800bc3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc42:	f001 bbc6 	b.w	800d3d2 <__malloc_unlock>
 800bc46:	42a3      	cmp	r3, r4
 800bc48:	d90c      	bls.n	800bc64 <_free_r+0x4c>
 800bc4a:	6821      	ldr	r1, [r4, #0]
 800bc4c:	1862      	adds	r2, r4, r1
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	bf04      	itt	eq
 800bc52:	681a      	ldreq	r2, [r3, #0]
 800bc54:	685b      	ldreq	r3, [r3, #4]
 800bc56:	6063      	str	r3, [r4, #4]
 800bc58:	bf04      	itt	eq
 800bc5a:	1852      	addeq	r2, r2, r1
 800bc5c:	6022      	streq	r2, [r4, #0]
 800bc5e:	6004      	str	r4, [r0, #0]
 800bc60:	e7ec      	b.n	800bc3c <_free_r+0x24>
 800bc62:	4613      	mov	r3, r2
 800bc64:	685a      	ldr	r2, [r3, #4]
 800bc66:	b10a      	cbz	r2, 800bc6c <_free_r+0x54>
 800bc68:	42a2      	cmp	r2, r4
 800bc6a:	d9fa      	bls.n	800bc62 <_free_r+0x4a>
 800bc6c:	6819      	ldr	r1, [r3, #0]
 800bc6e:	1858      	adds	r0, r3, r1
 800bc70:	42a0      	cmp	r0, r4
 800bc72:	d10b      	bne.n	800bc8c <_free_r+0x74>
 800bc74:	6820      	ldr	r0, [r4, #0]
 800bc76:	4401      	add	r1, r0
 800bc78:	1858      	adds	r0, r3, r1
 800bc7a:	4282      	cmp	r2, r0
 800bc7c:	6019      	str	r1, [r3, #0]
 800bc7e:	d1dd      	bne.n	800bc3c <_free_r+0x24>
 800bc80:	6810      	ldr	r0, [r2, #0]
 800bc82:	6852      	ldr	r2, [r2, #4]
 800bc84:	605a      	str	r2, [r3, #4]
 800bc86:	4401      	add	r1, r0
 800bc88:	6019      	str	r1, [r3, #0]
 800bc8a:	e7d7      	b.n	800bc3c <_free_r+0x24>
 800bc8c:	d902      	bls.n	800bc94 <_free_r+0x7c>
 800bc8e:	230c      	movs	r3, #12
 800bc90:	602b      	str	r3, [r5, #0]
 800bc92:	e7d3      	b.n	800bc3c <_free_r+0x24>
 800bc94:	6820      	ldr	r0, [r4, #0]
 800bc96:	1821      	adds	r1, r4, r0
 800bc98:	428a      	cmp	r2, r1
 800bc9a:	bf04      	itt	eq
 800bc9c:	6811      	ldreq	r1, [r2, #0]
 800bc9e:	6852      	ldreq	r2, [r2, #4]
 800bca0:	6062      	str	r2, [r4, #4]
 800bca2:	bf04      	itt	eq
 800bca4:	1809      	addeq	r1, r1, r0
 800bca6:	6021      	streq	r1, [r4, #0]
 800bca8:	605c      	str	r4, [r3, #4]
 800bcaa:	e7c7      	b.n	800bc3c <_free_r+0x24>
 800bcac:	bd38      	pop	{r3, r4, r5, pc}
 800bcae:	bf00      	nop
 800bcb0:	20004708 	.word	0x20004708

0800bcb4 <_malloc_r>:
 800bcb4:	b570      	push	{r4, r5, r6, lr}
 800bcb6:	1ccd      	adds	r5, r1, #3
 800bcb8:	f025 0503 	bic.w	r5, r5, #3
 800bcbc:	3508      	adds	r5, #8
 800bcbe:	2d0c      	cmp	r5, #12
 800bcc0:	bf38      	it	cc
 800bcc2:	250c      	movcc	r5, #12
 800bcc4:	2d00      	cmp	r5, #0
 800bcc6:	4606      	mov	r6, r0
 800bcc8:	db01      	blt.n	800bcce <_malloc_r+0x1a>
 800bcca:	42a9      	cmp	r1, r5
 800bccc:	d903      	bls.n	800bcd6 <_malloc_r+0x22>
 800bcce:	230c      	movs	r3, #12
 800bcd0:	6033      	str	r3, [r6, #0]
 800bcd2:	2000      	movs	r0, #0
 800bcd4:	bd70      	pop	{r4, r5, r6, pc}
 800bcd6:	f001 fb7b 	bl	800d3d0 <__malloc_lock>
 800bcda:	4a21      	ldr	r2, [pc, #132]	; (800bd60 <_malloc_r+0xac>)
 800bcdc:	6814      	ldr	r4, [r2, #0]
 800bcde:	4621      	mov	r1, r4
 800bce0:	b991      	cbnz	r1, 800bd08 <_malloc_r+0x54>
 800bce2:	4c20      	ldr	r4, [pc, #128]	; (800bd64 <_malloc_r+0xb0>)
 800bce4:	6823      	ldr	r3, [r4, #0]
 800bce6:	b91b      	cbnz	r3, 800bcf0 <_malloc_r+0x3c>
 800bce8:	4630      	mov	r0, r6
 800bcea:	f000 fc91 	bl	800c610 <_sbrk_r>
 800bcee:	6020      	str	r0, [r4, #0]
 800bcf0:	4629      	mov	r1, r5
 800bcf2:	4630      	mov	r0, r6
 800bcf4:	f000 fc8c 	bl	800c610 <_sbrk_r>
 800bcf8:	1c43      	adds	r3, r0, #1
 800bcfa:	d124      	bne.n	800bd46 <_malloc_r+0x92>
 800bcfc:	230c      	movs	r3, #12
 800bcfe:	6033      	str	r3, [r6, #0]
 800bd00:	4630      	mov	r0, r6
 800bd02:	f001 fb66 	bl	800d3d2 <__malloc_unlock>
 800bd06:	e7e4      	b.n	800bcd2 <_malloc_r+0x1e>
 800bd08:	680b      	ldr	r3, [r1, #0]
 800bd0a:	1b5b      	subs	r3, r3, r5
 800bd0c:	d418      	bmi.n	800bd40 <_malloc_r+0x8c>
 800bd0e:	2b0b      	cmp	r3, #11
 800bd10:	d90f      	bls.n	800bd32 <_malloc_r+0x7e>
 800bd12:	600b      	str	r3, [r1, #0]
 800bd14:	50cd      	str	r5, [r1, r3]
 800bd16:	18cc      	adds	r4, r1, r3
 800bd18:	4630      	mov	r0, r6
 800bd1a:	f001 fb5a 	bl	800d3d2 <__malloc_unlock>
 800bd1e:	f104 000b 	add.w	r0, r4, #11
 800bd22:	1d23      	adds	r3, r4, #4
 800bd24:	f020 0007 	bic.w	r0, r0, #7
 800bd28:	1ac3      	subs	r3, r0, r3
 800bd2a:	d0d3      	beq.n	800bcd4 <_malloc_r+0x20>
 800bd2c:	425a      	negs	r2, r3
 800bd2e:	50e2      	str	r2, [r4, r3]
 800bd30:	e7d0      	b.n	800bcd4 <_malloc_r+0x20>
 800bd32:	428c      	cmp	r4, r1
 800bd34:	684b      	ldr	r3, [r1, #4]
 800bd36:	bf16      	itet	ne
 800bd38:	6063      	strne	r3, [r4, #4]
 800bd3a:	6013      	streq	r3, [r2, #0]
 800bd3c:	460c      	movne	r4, r1
 800bd3e:	e7eb      	b.n	800bd18 <_malloc_r+0x64>
 800bd40:	460c      	mov	r4, r1
 800bd42:	6849      	ldr	r1, [r1, #4]
 800bd44:	e7cc      	b.n	800bce0 <_malloc_r+0x2c>
 800bd46:	1cc4      	adds	r4, r0, #3
 800bd48:	f024 0403 	bic.w	r4, r4, #3
 800bd4c:	42a0      	cmp	r0, r4
 800bd4e:	d005      	beq.n	800bd5c <_malloc_r+0xa8>
 800bd50:	1a21      	subs	r1, r4, r0
 800bd52:	4630      	mov	r0, r6
 800bd54:	f000 fc5c 	bl	800c610 <_sbrk_r>
 800bd58:	3001      	adds	r0, #1
 800bd5a:	d0cf      	beq.n	800bcfc <_malloc_r+0x48>
 800bd5c:	6025      	str	r5, [r4, #0]
 800bd5e:	e7db      	b.n	800bd18 <_malloc_r+0x64>
 800bd60:	20004708 	.word	0x20004708
 800bd64:	2000470c 	.word	0x2000470c

0800bd68 <__cvt>:
 800bd68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd6a:	ed2d 8b02 	vpush	{d8}
 800bd6e:	eeb0 8b40 	vmov.f64	d8, d0
 800bd72:	b085      	sub	sp, #20
 800bd74:	4617      	mov	r7, r2
 800bd76:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800bd78:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800bd7a:	ee18 2a90 	vmov	r2, s17
 800bd7e:	f025 0520 	bic.w	r5, r5, #32
 800bd82:	2a00      	cmp	r2, #0
 800bd84:	bfb6      	itet	lt
 800bd86:	222d      	movlt	r2, #45	; 0x2d
 800bd88:	2200      	movge	r2, #0
 800bd8a:	eeb1 8b40 	vneglt.f64	d8, d0
 800bd8e:	2d46      	cmp	r5, #70	; 0x46
 800bd90:	460c      	mov	r4, r1
 800bd92:	701a      	strb	r2, [r3, #0]
 800bd94:	d004      	beq.n	800bda0 <__cvt+0x38>
 800bd96:	2d45      	cmp	r5, #69	; 0x45
 800bd98:	d100      	bne.n	800bd9c <__cvt+0x34>
 800bd9a:	3401      	adds	r4, #1
 800bd9c:	2102      	movs	r1, #2
 800bd9e:	e000      	b.n	800bda2 <__cvt+0x3a>
 800bda0:	2103      	movs	r1, #3
 800bda2:	ab03      	add	r3, sp, #12
 800bda4:	9301      	str	r3, [sp, #4]
 800bda6:	ab02      	add	r3, sp, #8
 800bda8:	9300      	str	r3, [sp, #0]
 800bdaa:	4622      	mov	r2, r4
 800bdac:	4633      	mov	r3, r6
 800bdae:	eeb0 0b48 	vmov.f64	d0, d8
 800bdb2:	f000 fce9 	bl	800c788 <_dtoa_r>
 800bdb6:	2d47      	cmp	r5, #71	; 0x47
 800bdb8:	d101      	bne.n	800bdbe <__cvt+0x56>
 800bdba:	07fb      	lsls	r3, r7, #31
 800bdbc:	d51e      	bpl.n	800bdfc <__cvt+0x94>
 800bdbe:	2d46      	cmp	r5, #70	; 0x46
 800bdc0:	eb00 0304 	add.w	r3, r0, r4
 800bdc4:	d10c      	bne.n	800bde0 <__cvt+0x78>
 800bdc6:	7802      	ldrb	r2, [r0, #0]
 800bdc8:	2a30      	cmp	r2, #48	; 0x30
 800bdca:	d107      	bne.n	800bddc <__cvt+0x74>
 800bdcc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bdd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdd4:	bf1c      	itt	ne
 800bdd6:	f1c4 0401 	rsbne	r4, r4, #1
 800bdda:	6034      	strne	r4, [r6, #0]
 800bddc:	6832      	ldr	r2, [r6, #0]
 800bdde:	4413      	add	r3, r2
 800bde0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bde4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bde8:	d007      	beq.n	800bdfa <__cvt+0x92>
 800bdea:	2130      	movs	r1, #48	; 0x30
 800bdec:	9a03      	ldr	r2, [sp, #12]
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d204      	bcs.n	800bdfc <__cvt+0x94>
 800bdf2:	1c54      	adds	r4, r2, #1
 800bdf4:	9403      	str	r4, [sp, #12]
 800bdf6:	7011      	strb	r1, [r2, #0]
 800bdf8:	e7f8      	b.n	800bdec <__cvt+0x84>
 800bdfa:	9303      	str	r3, [sp, #12]
 800bdfc:	9b03      	ldr	r3, [sp, #12]
 800bdfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be00:	1a1b      	subs	r3, r3, r0
 800be02:	6013      	str	r3, [r2, #0]
 800be04:	b005      	add	sp, #20
 800be06:	ecbd 8b02 	vpop	{d8}
 800be0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800be0c <__exponent>:
 800be0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be0e:	2900      	cmp	r1, #0
 800be10:	4604      	mov	r4, r0
 800be12:	bfba      	itte	lt
 800be14:	4249      	neglt	r1, r1
 800be16:	232d      	movlt	r3, #45	; 0x2d
 800be18:	232b      	movge	r3, #43	; 0x2b
 800be1a:	2909      	cmp	r1, #9
 800be1c:	f804 2b02 	strb.w	r2, [r4], #2
 800be20:	7043      	strb	r3, [r0, #1]
 800be22:	dd20      	ble.n	800be66 <__exponent+0x5a>
 800be24:	f10d 0307 	add.w	r3, sp, #7
 800be28:	461f      	mov	r7, r3
 800be2a:	260a      	movs	r6, #10
 800be2c:	fb91 f5f6 	sdiv	r5, r1, r6
 800be30:	fb06 1115 	mls	r1, r6, r5, r1
 800be34:	3130      	adds	r1, #48	; 0x30
 800be36:	2d09      	cmp	r5, #9
 800be38:	f803 1c01 	strb.w	r1, [r3, #-1]
 800be3c:	f103 32ff 	add.w	r2, r3, #4294967295
 800be40:	4629      	mov	r1, r5
 800be42:	dc09      	bgt.n	800be58 <__exponent+0x4c>
 800be44:	3130      	adds	r1, #48	; 0x30
 800be46:	3b02      	subs	r3, #2
 800be48:	f802 1c01 	strb.w	r1, [r2, #-1]
 800be4c:	42bb      	cmp	r3, r7
 800be4e:	4622      	mov	r2, r4
 800be50:	d304      	bcc.n	800be5c <__exponent+0x50>
 800be52:	1a10      	subs	r0, r2, r0
 800be54:	b003      	add	sp, #12
 800be56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be58:	4613      	mov	r3, r2
 800be5a:	e7e7      	b.n	800be2c <__exponent+0x20>
 800be5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be60:	f804 2b01 	strb.w	r2, [r4], #1
 800be64:	e7f2      	b.n	800be4c <__exponent+0x40>
 800be66:	2330      	movs	r3, #48	; 0x30
 800be68:	4419      	add	r1, r3
 800be6a:	7083      	strb	r3, [r0, #2]
 800be6c:	1d02      	adds	r2, r0, #4
 800be6e:	70c1      	strb	r1, [r0, #3]
 800be70:	e7ef      	b.n	800be52 <__exponent+0x46>
 800be72:	0000      	movs	r0, r0
 800be74:	0000      	movs	r0, r0
	...

0800be78 <_printf_float>:
 800be78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be7c:	b08d      	sub	sp, #52	; 0x34
 800be7e:	460c      	mov	r4, r1
 800be80:	4616      	mov	r6, r2
 800be82:	461f      	mov	r7, r3
 800be84:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800be88:	4605      	mov	r5, r0
 800be8a:	f001 fa93 	bl	800d3b4 <_localeconv_r>
 800be8e:	f8d0 b000 	ldr.w	fp, [r0]
 800be92:	4658      	mov	r0, fp
 800be94:	f7f4 f9d4 	bl	8000240 <strlen>
 800be98:	2300      	movs	r3, #0
 800be9a:	930a      	str	r3, [sp, #40]	; 0x28
 800be9c:	f8d8 3000 	ldr.w	r3, [r8]
 800bea0:	9005      	str	r0, [sp, #20]
 800bea2:	3307      	adds	r3, #7
 800bea4:	f023 0307 	bic.w	r3, r3, #7
 800bea8:	f103 0108 	add.w	r1, r3, #8
 800beac:	f894 9018 	ldrb.w	r9, [r4, #24]
 800beb0:	6822      	ldr	r2, [r4, #0]
 800beb2:	f8c8 1000 	str.w	r1, [r8]
 800beb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800beba:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800bebe:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800c148 <_printf_float+0x2d0>
 800bec2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800bec6:	eeb0 6bc0 	vabs.f64	d6, d0
 800beca:	eeb4 6b47 	vcmp.f64	d6, d7
 800bece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bed2:	dd24      	ble.n	800bf1e <_printf_float+0xa6>
 800bed4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800bed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bedc:	d502      	bpl.n	800bee4 <_printf_float+0x6c>
 800bede:	232d      	movs	r3, #45	; 0x2d
 800bee0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bee4:	499a      	ldr	r1, [pc, #616]	; (800c150 <_printf_float+0x2d8>)
 800bee6:	4b9b      	ldr	r3, [pc, #620]	; (800c154 <_printf_float+0x2dc>)
 800bee8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800beec:	bf8c      	ite	hi
 800beee:	4688      	movhi	r8, r1
 800bef0:	4698      	movls	r8, r3
 800bef2:	f022 0204 	bic.w	r2, r2, #4
 800bef6:	2303      	movs	r3, #3
 800bef8:	6123      	str	r3, [r4, #16]
 800befa:	6022      	str	r2, [r4, #0]
 800befc:	f04f 0a00 	mov.w	sl, #0
 800bf00:	9700      	str	r7, [sp, #0]
 800bf02:	4633      	mov	r3, r6
 800bf04:	aa0b      	add	r2, sp, #44	; 0x2c
 800bf06:	4621      	mov	r1, r4
 800bf08:	4628      	mov	r0, r5
 800bf0a:	f000 f9e1 	bl	800c2d0 <_printf_common>
 800bf0e:	3001      	adds	r0, #1
 800bf10:	f040 8089 	bne.w	800c026 <_printf_float+0x1ae>
 800bf14:	f04f 30ff 	mov.w	r0, #4294967295
 800bf18:	b00d      	add	sp, #52	; 0x34
 800bf1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf1e:	eeb4 0b40 	vcmp.f64	d0, d0
 800bf22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf26:	d702      	bvc.n	800bf2e <_printf_float+0xb6>
 800bf28:	498b      	ldr	r1, [pc, #556]	; (800c158 <_printf_float+0x2e0>)
 800bf2a:	4b8c      	ldr	r3, [pc, #560]	; (800c15c <_printf_float+0x2e4>)
 800bf2c:	e7dc      	b.n	800bee8 <_printf_float+0x70>
 800bf2e:	6861      	ldr	r1, [r4, #4]
 800bf30:	1c4b      	adds	r3, r1, #1
 800bf32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bf36:	ab0a      	add	r3, sp, #40	; 0x28
 800bf38:	a809      	add	r0, sp, #36	; 0x24
 800bf3a:	d13b      	bne.n	800bfb4 <_printf_float+0x13c>
 800bf3c:	2106      	movs	r1, #6
 800bf3e:	6061      	str	r1, [r4, #4]
 800bf40:	f04f 0c00 	mov.w	ip, #0
 800bf44:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800bf48:	e9cd 0900 	strd	r0, r9, [sp]
 800bf4c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bf50:	6022      	str	r2, [r4, #0]
 800bf52:	6861      	ldr	r1, [r4, #4]
 800bf54:	4628      	mov	r0, r5
 800bf56:	f7ff ff07 	bl	800bd68 <__cvt>
 800bf5a:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800bf5e:	2b47      	cmp	r3, #71	; 0x47
 800bf60:	4680      	mov	r8, r0
 800bf62:	d109      	bne.n	800bf78 <_printf_float+0x100>
 800bf64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf66:	1cd8      	adds	r0, r3, #3
 800bf68:	db02      	blt.n	800bf70 <_printf_float+0xf8>
 800bf6a:	6862      	ldr	r2, [r4, #4]
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	dd47      	ble.n	800c000 <_printf_float+0x188>
 800bf70:	f1a9 0902 	sub.w	r9, r9, #2
 800bf74:	fa5f f989 	uxtb.w	r9, r9
 800bf78:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bf7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf7e:	d824      	bhi.n	800bfca <_printf_float+0x152>
 800bf80:	3901      	subs	r1, #1
 800bf82:	464a      	mov	r2, r9
 800bf84:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bf88:	9109      	str	r1, [sp, #36]	; 0x24
 800bf8a:	f7ff ff3f 	bl	800be0c <__exponent>
 800bf8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf90:	1813      	adds	r3, r2, r0
 800bf92:	2a01      	cmp	r2, #1
 800bf94:	4682      	mov	sl, r0
 800bf96:	6123      	str	r3, [r4, #16]
 800bf98:	dc02      	bgt.n	800bfa0 <_printf_float+0x128>
 800bf9a:	6822      	ldr	r2, [r4, #0]
 800bf9c:	07d1      	lsls	r1, r2, #31
 800bf9e:	d501      	bpl.n	800bfa4 <_printf_float+0x12c>
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	6123      	str	r3, [r4, #16]
 800bfa4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d0a9      	beq.n	800bf00 <_printf_float+0x88>
 800bfac:	232d      	movs	r3, #45	; 0x2d
 800bfae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfb2:	e7a5      	b.n	800bf00 <_printf_float+0x88>
 800bfb4:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800bfb8:	f000 8178 	beq.w	800c2ac <_printf_float+0x434>
 800bfbc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800bfc0:	d1be      	bne.n	800bf40 <_printf_float+0xc8>
 800bfc2:	2900      	cmp	r1, #0
 800bfc4:	d1bc      	bne.n	800bf40 <_printf_float+0xc8>
 800bfc6:	2101      	movs	r1, #1
 800bfc8:	e7b9      	b.n	800bf3e <_printf_float+0xc6>
 800bfca:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800bfce:	d119      	bne.n	800c004 <_printf_float+0x18c>
 800bfd0:	2900      	cmp	r1, #0
 800bfd2:	6863      	ldr	r3, [r4, #4]
 800bfd4:	dd0c      	ble.n	800bff0 <_printf_float+0x178>
 800bfd6:	6121      	str	r1, [r4, #16]
 800bfd8:	b913      	cbnz	r3, 800bfe0 <_printf_float+0x168>
 800bfda:	6822      	ldr	r2, [r4, #0]
 800bfdc:	07d2      	lsls	r2, r2, #31
 800bfde:	d502      	bpl.n	800bfe6 <_printf_float+0x16e>
 800bfe0:	3301      	adds	r3, #1
 800bfe2:	440b      	add	r3, r1
 800bfe4:	6123      	str	r3, [r4, #16]
 800bfe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfe8:	65a3      	str	r3, [r4, #88]	; 0x58
 800bfea:	f04f 0a00 	mov.w	sl, #0
 800bfee:	e7d9      	b.n	800bfa4 <_printf_float+0x12c>
 800bff0:	b913      	cbnz	r3, 800bff8 <_printf_float+0x180>
 800bff2:	6822      	ldr	r2, [r4, #0]
 800bff4:	07d0      	lsls	r0, r2, #31
 800bff6:	d501      	bpl.n	800bffc <_printf_float+0x184>
 800bff8:	3302      	adds	r3, #2
 800bffa:	e7f3      	b.n	800bfe4 <_printf_float+0x16c>
 800bffc:	2301      	movs	r3, #1
 800bffe:	e7f1      	b.n	800bfe4 <_printf_float+0x16c>
 800c000:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c004:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c008:	4293      	cmp	r3, r2
 800c00a:	db05      	blt.n	800c018 <_printf_float+0x1a0>
 800c00c:	6822      	ldr	r2, [r4, #0]
 800c00e:	6123      	str	r3, [r4, #16]
 800c010:	07d1      	lsls	r1, r2, #31
 800c012:	d5e8      	bpl.n	800bfe6 <_printf_float+0x16e>
 800c014:	3301      	adds	r3, #1
 800c016:	e7e5      	b.n	800bfe4 <_printf_float+0x16c>
 800c018:	2b00      	cmp	r3, #0
 800c01a:	bfd4      	ite	le
 800c01c:	f1c3 0302 	rsble	r3, r3, #2
 800c020:	2301      	movgt	r3, #1
 800c022:	4413      	add	r3, r2
 800c024:	e7de      	b.n	800bfe4 <_printf_float+0x16c>
 800c026:	6823      	ldr	r3, [r4, #0]
 800c028:	055a      	lsls	r2, r3, #21
 800c02a:	d407      	bmi.n	800c03c <_printf_float+0x1c4>
 800c02c:	6923      	ldr	r3, [r4, #16]
 800c02e:	4642      	mov	r2, r8
 800c030:	4631      	mov	r1, r6
 800c032:	4628      	mov	r0, r5
 800c034:	47b8      	blx	r7
 800c036:	3001      	adds	r0, #1
 800c038:	d12a      	bne.n	800c090 <_printf_float+0x218>
 800c03a:	e76b      	b.n	800bf14 <_printf_float+0x9c>
 800c03c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c040:	f240 80de 	bls.w	800c200 <_printf_float+0x388>
 800c044:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c048:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c04c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c050:	d133      	bne.n	800c0ba <_printf_float+0x242>
 800c052:	2301      	movs	r3, #1
 800c054:	4a42      	ldr	r2, [pc, #264]	; (800c160 <_printf_float+0x2e8>)
 800c056:	4631      	mov	r1, r6
 800c058:	4628      	mov	r0, r5
 800c05a:	47b8      	blx	r7
 800c05c:	3001      	adds	r0, #1
 800c05e:	f43f af59 	beq.w	800bf14 <_printf_float+0x9c>
 800c062:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c066:	429a      	cmp	r2, r3
 800c068:	db02      	blt.n	800c070 <_printf_float+0x1f8>
 800c06a:	6823      	ldr	r3, [r4, #0]
 800c06c:	07d8      	lsls	r0, r3, #31
 800c06e:	d50f      	bpl.n	800c090 <_printf_float+0x218>
 800c070:	9b05      	ldr	r3, [sp, #20]
 800c072:	465a      	mov	r2, fp
 800c074:	4631      	mov	r1, r6
 800c076:	4628      	mov	r0, r5
 800c078:	47b8      	blx	r7
 800c07a:	3001      	adds	r0, #1
 800c07c:	f43f af4a 	beq.w	800bf14 <_printf_float+0x9c>
 800c080:	f04f 0800 	mov.w	r8, #0
 800c084:	f104 091a 	add.w	r9, r4, #26
 800c088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c08a:	3b01      	subs	r3, #1
 800c08c:	4543      	cmp	r3, r8
 800c08e:	dc09      	bgt.n	800c0a4 <_printf_float+0x22c>
 800c090:	6823      	ldr	r3, [r4, #0]
 800c092:	079b      	lsls	r3, r3, #30
 800c094:	f100 8105 	bmi.w	800c2a2 <_printf_float+0x42a>
 800c098:	68e0      	ldr	r0, [r4, #12]
 800c09a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c09c:	4298      	cmp	r0, r3
 800c09e:	bfb8      	it	lt
 800c0a0:	4618      	movlt	r0, r3
 800c0a2:	e739      	b.n	800bf18 <_printf_float+0xa0>
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	464a      	mov	r2, r9
 800c0a8:	4631      	mov	r1, r6
 800c0aa:	4628      	mov	r0, r5
 800c0ac:	47b8      	blx	r7
 800c0ae:	3001      	adds	r0, #1
 800c0b0:	f43f af30 	beq.w	800bf14 <_printf_float+0x9c>
 800c0b4:	f108 0801 	add.w	r8, r8, #1
 800c0b8:	e7e6      	b.n	800c088 <_printf_float+0x210>
 800c0ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	dc2b      	bgt.n	800c118 <_printf_float+0x2a0>
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	4a27      	ldr	r2, [pc, #156]	; (800c160 <_printf_float+0x2e8>)
 800c0c4:	4631      	mov	r1, r6
 800c0c6:	4628      	mov	r0, r5
 800c0c8:	47b8      	blx	r7
 800c0ca:	3001      	adds	r0, #1
 800c0cc:	f43f af22 	beq.w	800bf14 <_printf_float+0x9c>
 800c0d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0d2:	b923      	cbnz	r3, 800c0de <_printf_float+0x266>
 800c0d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0d6:	b913      	cbnz	r3, 800c0de <_printf_float+0x266>
 800c0d8:	6823      	ldr	r3, [r4, #0]
 800c0da:	07d9      	lsls	r1, r3, #31
 800c0dc:	d5d8      	bpl.n	800c090 <_printf_float+0x218>
 800c0de:	9b05      	ldr	r3, [sp, #20]
 800c0e0:	465a      	mov	r2, fp
 800c0e2:	4631      	mov	r1, r6
 800c0e4:	4628      	mov	r0, r5
 800c0e6:	47b8      	blx	r7
 800c0e8:	3001      	adds	r0, #1
 800c0ea:	f43f af13 	beq.w	800bf14 <_printf_float+0x9c>
 800c0ee:	f04f 0900 	mov.w	r9, #0
 800c0f2:	f104 0a1a 	add.w	sl, r4, #26
 800c0f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0f8:	425b      	negs	r3, r3
 800c0fa:	454b      	cmp	r3, r9
 800c0fc:	dc01      	bgt.n	800c102 <_printf_float+0x28a>
 800c0fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c100:	e795      	b.n	800c02e <_printf_float+0x1b6>
 800c102:	2301      	movs	r3, #1
 800c104:	4652      	mov	r2, sl
 800c106:	4631      	mov	r1, r6
 800c108:	4628      	mov	r0, r5
 800c10a:	47b8      	blx	r7
 800c10c:	3001      	adds	r0, #1
 800c10e:	f43f af01 	beq.w	800bf14 <_printf_float+0x9c>
 800c112:	f109 0901 	add.w	r9, r9, #1
 800c116:	e7ee      	b.n	800c0f6 <_printf_float+0x27e>
 800c118:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c11a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c11c:	429a      	cmp	r2, r3
 800c11e:	bfa8      	it	ge
 800c120:	461a      	movge	r2, r3
 800c122:	2a00      	cmp	r2, #0
 800c124:	4691      	mov	r9, r2
 800c126:	dd07      	ble.n	800c138 <_printf_float+0x2c0>
 800c128:	4613      	mov	r3, r2
 800c12a:	4631      	mov	r1, r6
 800c12c:	4642      	mov	r2, r8
 800c12e:	4628      	mov	r0, r5
 800c130:	47b8      	blx	r7
 800c132:	3001      	adds	r0, #1
 800c134:	f43f aeee 	beq.w	800bf14 <_printf_float+0x9c>
 800c138:	f104 031a 	add.w	r3, r4, #26
 800c13c:	f04f 0a00 	mov.w	sl, #0
 800c140:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c144:	9307      	str	r3, [sp, #28]
 800c146:	e017      	b.n	800c178 <_printf_float+0x300>
 800c148:	ffffffff 	.word	0xffffffff
 800c14c:	7fefffff 	.word	0x7fefffff
 800c150:	0800e730 	.word	0x0800e730
 800c154:	0800e72c 	.word	0x0800e72c
 800c158:	0800e738 	.word	0x0800e738
 800c15c:	0800e734 	.word	0x0800e734
 800c160:	0800e73c 	.word	0x0800e73c
 800c164:	2301      	movs	r3, #1
 800c166:	9a07      	ldr	r2, [sp, #28]
 800c168:	4631      	mov	r1, r6
 800c16a:	4628      	mov	r0, r5
 800c16c:	47b8      	blx	r7
 800c16e:	3001      	adds	r0, #1
 800c170:	f43f aed0 	beq.w	800bf14 <_printf_float+0x9c>
 800c174:	f10a 0a01 	add.w	sl, sl, #1
 800c178:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c17a:	9306      	str	r3, [sp, #24]
 800c17c:	eba3 0309 	sub.w	r3, r3, r9
 800c180:	4553      	cmp	r3, sl
 800c182:	dcef      	bgt.n	800c164 <_printf_float+0x2ec>
 800c184:	9b06      	ldr	r3, [sp, #24]
 800c186:	4498      	add	r8, r3
 800c188:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c18c:	429a      	cmp	r2, r3
 800c18e:	db15      	blt.n	800c1bc <_printf_float+0x344>
 800c190:	6823      	ldr	r3, [r4, #0]
 800c192:	07da      	lsls	r2, r3, #31
 800c194:	d412      	bmi.n	800c1bc <_printf_float+0x344>
 800c196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c198:	9a06      	ldr	r2, [sp, #24]
 800c19a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c19c:	1a9a      	subs	r2, r3, r2
 800c19e:	eba3 0a01 	sub.w	sl, r3, r1
 800c1a2:	4592      	cmp	sl, r2
 800c1a4:	bfa8      	it	ge
 800c1a6:	4692      	movge	sl, r2
 800c1a8:	f1ba 0f00 	cmp.w	sl, #0
 800c1ac:	dc0e      	bgt.n	800c1cc <_printf_float+0x354>
 800c1ae:	f04f 0800 	mov.w	r8, #0
 800c1b2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c1b6:	f104 091a 	add.w	r9, r4, #26
 800c1ba:	e019      	b.n	800c1f0 <_printf_float+0x378>
 800c1bc:	9b05      	ldr	r3, [sp, #20]
 800c1be:	465a      	mov	r2, fp
 800c1c0:	4631      	mov	r1, r6
 800c1c2:	4628      	mov	r0, r5
 800c1c4:	47b8      	blx	r7
 800c1c6:	3001      	adds	r0, #1
 800c1c8:	d1e5      	bne.n	800c196 <_printf_float+0x31e>
 800c1ca:	e6a3      	b.n	800bf14 <_printf_float+0x9c>
 800c1cc:	4653      	mov	r3, sl
 800c1ce:	4642      	mov	r2, r8
 800c1d0:	4631      	mov	r1, r6
 800c1d2:	4628      	mov	r0, r5
 800c1d4:	47b8      	blx	r7
 800c1d6:	3001      	adds	r0, #1
 800c1d8:	d1e9      	bne.n	800c1ae <_printf_float+0x336>
 800c1da:	e69b      	b.n	800bf14 <_printf_float+0x9c>
 800c1dc:	2301      	movs	r3, #1
 800c1de:	464a      	mov	r2, r9
 800c1e0:	4631      	mov	r1, r6
 800c1e2:	4628      	mov	r0, r5
 800c1e4:	47b8      	blx	r7
 800c1e6:	3001      	adds	r0, #1
 800c1e8:	f43f ae94 	beq.w	800bf14 <_printf_float+0x9c>
 800c1ec:	f108 0801 	add.w	r8, r8, #1
 800c1f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c1f4:	1a9b      	subs	r3, r3, r2
 800c1f6:	eba3 030a 	sub.w	r3, r3, sl
 800c1fa:	4543      	cmp	r3, r8
 800c1fc:	dcee      	bgt.n	800c1dc <_printf_float+0x364>
 800c1fe:	e747      	b.n	800c090 <_printf_float+0x218>
 800c200:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c202:	2a01      	cmp	r2, #1
 800c204:	dc01      	bgt.n	800c20a <_printf_float+0x392>
 800c206:	07db      	lsls	r3, r3, #31
 800c208:	d539      	bpl.n	800c27e <_printf_float+0x406>
 800c20a:	2301      	movs	r3, #1
 800c20c:	4642      	mov	r2, r8
 800c20e:	4631      	mov	r1, r6
 800c210:	4628      	mov	r0, r5
 800c212:	47b8      	blx	r7
 800c214:	3001      	adds	r0, #1
 800c216:	f43f ae7d 	beq.w	800bf14 <_printf_float+0x9c>
 800c21a:	9b05      	ldr	r3, [sp, #20]
 800c21c:	465a      	mov	r2, fp
 800c21e:	4631      	mov	r1, r6
 800c220:	4628      	mov	r0, r5
 800c222:	47b8      	blx	r7
 800c224:	3001      	adds	r0, #1
 800c226:	f108 0801 	add.w	r8, r8, #1
 800c22a:	f43f ae73 	beq.w	800bf14 <_printf_float+0x9c>
 800c22e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c234:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c23c:	f103 33ff 	add.w	r3, r3, #4294967295
 800c240:	d018      	beq.n	800c274 <_printf_float+0x3fc>
 800c242:	4642      	mov	r2, r8
 800c244:	4631      	mov	r1, r6
 800c246:	4628      	mov	r0, r5
 800c248:	47b8      	blx	r7
 800c24a:	3001      	adds	r0, #1
 800c24c:	d10e      	bne.n	800c26c <_printf_float+0x3f4>
 800c24e:	e661      	b.n	800bf14 <_printf_float+0x9c>
 800c250:	2301      	movs	r3, #1
 800c252:	464a      	mov	r2, r9
 800c254:	4631      	mov	r1, r6
 800c256:	4628      	mov	r0, r5
 800c258:	47b8      	blx	r7
 800c25a:	3001      	adds	r0, #1
 800c25c:	f43f ae5a 	beq.w	800bf14 <_printf_float+0x9c>
 800c260:	f108 0801 	add.w	r8, r8, #1
 800c264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c266:	3b01      	subs	r3, #1
 800c268:	4543      	cmp	r3, r8
 800c26a:	dcf1      	bgt.n	800c250 <_printf_float+0x3d8>
 800c26c:	4653      	mov	r3, sl
 800c26e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c272:	e6dd      	b.n	800c030 <_printf_float+0x1b8>
 800c274:	f04f 0800 	mov.w	r8, #0
 800c278:	f104 091a 	add.w	r9, r4, #26
 800c27c:	e7f2      	b.n	800c264 <_printf_float+0x3ec>
 800c27e:	2301      	movs	r3, #1
 800c280:	e7df      	b.n	800c242 <_printf_float+0x3ca>
 800c282:	2301      	movs	r3, #1
 800c284:	464a      	mov	r2, r9
 800c286:	4631      	mov	r1, r6
 800c288:	4628      	mov	r0, r5
 800c28a:	47b8      	blx	r7
 800c28c:	3001      	adds	r0, #1
 800c28e:	f43f ae41 	beq.w	800bf14 <_printf_float+0x9c>
 800c292:	f108 0801 	add.w	r8, r8, #1
 800c296:	68e3      	ldr	r3, [r4, #12]
 800c298:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c29a:	1a9b      	subs	r3, r3, r2
 800c29c:	4543      	cmp	r3, r8
 800c29e:	dcf0      	bgt.n	800c282 <_printf_float+0x40a>
 800c2a0:	e6fa      	b.n	800c098 <_printf_float+0x220>
 800c2a2:	f04f 0800 	mov.w	r8, #0
 800c2a6:	f104 0919 	add.w	r9, r4, #25
 800c2aa:	e7f4      	b.n	800c296 <_printf_float+0x41e>
 800c2ac:	2900      	cmp	r1, #0
 800c2ae:	f43f ae8a 	beq.w	800bfc6 <_printf_float+0x14e>
 800c2b2:	f04f 0c00 	mov.w	ip, #0
 800c2b6:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800c2ba:	e9cd 0900 	strd	r0, r9, [sp]
 800c2be:	6022      	str	r2, [r4, #0]
 800c2c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c2c4:	4628      	mov	r0, r5
 800c2c6:	f7ff fd4f 	bl	800bd68 <__cvt>
 800c2ca:	4680      	mov	r8, r0
 800c2cc:	e64a      	b.n	800bf64 <_printf_float+0xec>
 800c2ce:	bf00      	nop

0800c2d0 <_printf_common>:
 800c2d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2d4:	4691      	mov	r9, r2
 800c2d6:	461f      	mov	r7, r3
 800c2d8:	688a      	ldr	r2, [r1, #8]
 800c2da:	690b      	ldr	r3, [r1, #16]
 800c2dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	bfb8      	it	lt
 800c2e4:	4613      	movlt	r3, r2
 800c2e6:	f8c9 3000 	str.w	r3, [r9]
 800c2ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c2ee:	4606      	mov	r6, r0
 800c2f0:	460c      	mov	r4, r1
 800c2f2:	b112      	cbz	r2, 800c2fa <_printf_common+0x2a>
 800c2f4:	3301      	adds	r3, #1
 800c2f6:	f8c9 3000 	str.w	r3, [r9]
 800c2fa:	6823      	ldr	r3, [r4, #0]
 800c2fc:	0699      	lsls	r1, r3, #26
 800c2fe:	bf42      	ittt	mi
 800c300:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c304:	3302      	addmi	r3, #2
 800c306:	f8c9 3000 	strmi.w	r3, [r9]
 800c30a:	6825      	ldr	r5, [r4, #0]
 800c30c:	f015 0506 	ands.w	r5, r5, #6
 800c310:	d107      	bne.n	800c322 <_printf_common+0x52>
 800c312:	f104 0a19 	add.w	sl, r4, #25
 800c316:	68e3      	ldr	r3, [r4, #12]
 800c318:	f8d9 2000 	ldr.w	r2, [r9]
 800c31c:	1a9b      	subs	r3, r3, r2
 800c31e:	42ab      	cmp	r3, r5
 800c320:	dc28      	bgt.n	800c374 <_printf_common+0xa4>
 800c322:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c326:	6822      	ldr	r2, [r4, #0]
 800c328:	3300      	adds	r3, #0
 800c32a:	bf18      	it	ne
 800c32c:	2301      	movne	r3, #1
 800c32e:	0692      	lsls	r2, r2, #26
 800c330:	d42d      	bmi.n	800c38e <_printf_common+0xbe>
 800c332:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c336:	4639      	mov	r1, r7
 800c338:	4630      	mov	r0, r6
 800c33a:	47c0      	blx	r8
 800c33c:	3001      	adds	r0, #1
 800c33e:	d020      	beq.n	800c382 <_printf_common+0xb2>
 800c340:	6823      	ldr	r3, [r4, #0]
 800c342:	68e5      	ldr	r5, [r4, #12]
 800c344:	f8d9 2000 	ldr.w	r2, [r9]
 800c348:	f003 0306 	and.w	r3, r3, #6
 800c34c:	2b04      	cmp	r3, #4
 800c34e:	bf08      	it	eq
 800c350:	1aad      	subeq	r5, r5, r2
 800c352:	68a3      	ldr	r3, [r4, #8]
 800c354:	6922      	ldr	r2, [r4, #16]
 800c356:	bf0c      	ite	eq
 800c358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c35c:	2500      	movne	r5, #0
 800c35e:	4293      	cmp	r3, r2
 800c360:	bfc4      	itt	gt
 800c362:	1a9b      	subgt	r3, r3, r2
 800c364:	18ed      	addgt	r5, r5, r3
 800c366:	f04f 0900 	mov.w	r9, #0
 800c36a:	341a      	adds	r4, #26
 800c36c:	454d      	cmp	r5, r9
 800c36e:	d11a      	bne.n	800c3a6 <_printf_common+0xd6>
 800c370:	2000      	movs	r0, #0
 800c372:	e008      	b.n	800c386 <_printf_common+0xb6>
 800c374:	2301      	movs	r3, #1
 800c376:	4652      	mov	r2, sl
 800c378:	4639      	mov	r1, r7
 800c37a:	4630      	mov	r0, r6
 800c37c:	47c0      	blx	r8
 800c37e:	3001      	adds	r0, #1
 800c380:	d103      	bne.n	800c38a <_printf_common+0xba>
 800c382:	f04f 30ff 	mov.w	r0, #4294967295
 800c386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c38a:	3501      	adds	r5, #1
 800c38c:	e7c3      	b.n	800c316 <_printf_common+0x46>
 800c38e:	18e1      	adds	r1, r4, r3
 800c390:	1c5a      	adds	r2, r3, #1
 800c392:	2030      	movs	r0, #48	; 0x30
 800c394:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c398:	4422      	add	r2, r4
 800c39a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c39e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c3a2:	3302      	adds	r3, #2
 800c3a4:	e7c5      	b.n	800c332 <_printf_common+0x62>
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	4622      	mov	r2, r4
 800c3aa:	4639      	mov	r1, r7
 800c3ac:	4630      	mov	r0, r6
 800c3ae:	47c0      	blx	r8
 800c3b0:	3001      	adds	r0, #1
 800c3b2:	d0e6      	beq.n	800c382 <_printf_common+0xb2>
 800c3b4:	f109 0901 	add.w	r9, r9, #1
 800c3b8:	e7d8      	b.n	800c36c <_printf_common+0x9c>
	...

0800c3bc <_printf_i>:
 800c3bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c3c0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c3c4:	460c      	mov	r4, r1
 800c3c6:	7e09      	ldrb	r1, [r1, #24]
 800c3c8:	b085      	sub	sp, #20
 800c3ca:	296e      	cmp	r1, #110	; 0x6e
 800c3cc:	4617      	mov	r7, r2
 800c3ce:	4606      	mov	r6, r0
 800c3d0:	4698      	mov	r8, r3
 800c3d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c3d4:	f000 80b3 	beq.w	800c53e <_printf_i+0x182>
 800c3d8:	d822      	bhi.n	800c420 <_printf_i+0x64>
 800c3da:	2963      	cmp	r1, #99	; 0x63
 800c3dc:	d036      	beq.n	800c44c <_printf_i+0x90>
 800c3de:	d80a      	bhi.n	800c3f6 <_printf_i+0x3a>
 800c3e0:	2900      	cmp	r1, #0
 800c3e2:	f000 80b9 	beq.w	800c558 <_printf_i+0x19c>
 800c3e6:	2958      	cmp	r1, #88	; 0x58
 800c3e8:	f000 8083 	beq.w	800c4f2 <_printf_i+0x136>
 800c3ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c3f0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c3f4:	e032      	b.n	800c45c <_printf_i+0xa0>
 800c3f6:	2964      	cmp	r1, #100	; 0x64
 800c3f8:	d001      	beq.n	800c3fe <_printf_i+0x42>
 800c3fa:	2969      	cmp	r1, #105	; 0x69
 800c3fc:	d1f6      	bne.n	800c3ec <_printf_i+0x30>
 800c3fe:	6820      	ldr	r0, [r4, #0]
 800c400:	6813      	ldr	r3, [r2, #0]
 800c402:	0605      	lsls	r5, r0, #24
 800c404:	f103 0104 	add.w	r1, r3, #4
 800c408:	d52a      	bpl.n	800c460 <_printf_i+0xa4>
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	6011      	str	r1, [r2, #0]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	da03      	bge.n	800c41a <_printf_i+0x5e>
 800c412:	222d      	movs	r2, #45	; 0x2d
 800c414:	425b      	negs	r3, r3
 800c416:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c41a:	486f      	ldr	r0, [pc, #444]	; (800c5d8 <_printf_i+0x21c>)
 800c41c:	220a      	movs	r2, #10
 800c41e:	e039      	b.n	800c494 <_printf_i+0xd8>
 800c420:	2973      	cmp	r1, #115	; 0x73
 800c422:	f000 809d 	beq.w	800c560 <_printf_i+0x1a4>
 800c426:	d808      	bhi.n	800c43a <_printf_i+0x7e>
 800c428:	296f      	cmp	r1, #111	; 0x6f
 800c42a:	d020      	beq.n	800c46e <_printf_i+0xb2>
 800c42c:	2970      	cmp	r1, #112	; 0x70
 800c42e:	d1dd      	bne.n	800c3ec <_printf_i+0x30>
 800c430:	6823      	ldr	r3, [r4, #0]
 800c432:	f043 0320 	orr.w	r3, r3, #32
 800c436:	6023      	str	r3, [r4, #0]
 800c438:	e003      	b.n	800c442 <_printf_i+0x86>
 800c43a:	2975      	cmp	r1, #117	; 0x75
 800c43c:	d017      	beq.n	800c46e <_printf_i+0xb2>
 800c43e:	2978      	cmp	r1, #120	; 0x78
 800c440:	d1d4      	bne.n	800c3ec <_printf_i+0x30>
 800c442:	2378      	movs	r3, #120	; 0x78
 800c444:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c448:	4864      	ldr	r0, [pc, #400]	; (800c5dc <_printf_i+0x220>)
 800c44a:	e055      	b.n	800c4f8 <_printf_i+0x13c>
 800c44c:	6813      	ldr	r3, [r2, #0]
 800c44e:	1d19      	adds	r1, r3, #4
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	6011      	str	r1, [r2, #0]
 800c454:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c458:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c45c:	2301      	movs	r3, #1
 800c45e:	e08c      	b.n	800c57a <_printf_i+0x1be>
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	6011      	str	r1, [r2, #0]
 800c464:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c468:	bf18      	it	ne
 800c46a:	b21b      	sxthne	r3, r3
 800c46c:	e7cf      	b.n	800c40e <_printf_i+0x52>
 800c46e:	6813      	ldr	r3, [r2, #0]
 800c470:	6825      	ldr	r5, [r4, #0]
 800c472:	1d18      	adds	r0, r3, #4
 800c474:	6010      	str	r0, [r2, #0]
 800c476:	0628      	lsls	r0, r5, #24
 800c478:	d501      	bpl.n	800c47e <_printf_i+0xc2>
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	e002      	b.n	800c484 <_printf_i+0xc8>
 800c47e:	0668      	lsls	r0, r5, #25
 800c480:	d5fb      	bpl.n	800c47a <_printf_i+0xbe>
 800c482:	881b      	ldrh	r3, [r3, #0]
 800c484:	4854      	ldr	r0, [pc, #336]	; (800c5d8 <_printf_i+0x21c>)
 800c486:	296f      	cmp	r1, #111	; 0x6f
 800c488:	bf14      	ite	ne
 800c48a:	220a      	movne	r2, #10
 800c48c:	2208      	moveq	r2, #8
 800c48e:	2100      	movs	r1, #0
 800c490:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c494:	6865      	ldr	r5, [r4, #4]
 800c496:	60a5      	str	r5, [r4, #8]
 800c498:	2d00      	cmp	r5, #0
 800c49a:	f2c0 8095 	blt.w	800c5c8 <_printf_i+0x20c>
 800c49e:	6821      	ldr	r1, [r4, #0]
 800c4a0:	f021 0104 	bic.w	r1, r1, #4
 800c4a4:	6021      	str	r1, [r4, #0]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d13d      	bne.n	800c526 <_printf_i+0x16a>
 800c4aa:	2d00      	cmp	r5, #0
 800c4ac:	f040 808e 	bne.w	800c5cc <_printf_i+0x210>
 800c4b0:	4665      	mov	r5, ip
 800c4b2:	2a08      	cmp	r2, #8
 800c4b4:	d10b      	bne.n	800c4ce <_printf_i+0x112>
 800c4b6:	6823      	ldr	r3, [r4, #0]
 800c4b8:	07db      	lsls	r3, r3, #31
 800c4ba:	d508      	bpl.n	800c4ce <_printf_i+0x112>
 800c4bc:	6923      	ldr	r3, [r4, #16]
 800c4be:	6862      	ldr	r2, [r4, #4]
 800c4c0:	429a      	cmp	r2, r3
 800c4c2:	bfde      	ittt	le
 800c4c4:	2330      	movle	r3, #48	; 0x30
 800c4c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c4ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c4ce:	ebac 0305 	sub.w	r3, ip, r5
 800c4d2:	6123      	str	r3, [r4, #16]
 800c4d4:	f8cd 8000 	str.w	r8, [sp]
 800c4d8:	463b      	mov	r3, r7
 800c4da:	aa03      	add	r2, sp, #12
 800c4dc:	4621      	mov	r1, r4
 800c4de:	4630      	mov	r0, r6
 800c4e0:	f7ff fef6 	bl	800c2d0 <_printf_common>
 800c4e4:	3001      	adds	r0, #1
 800c4e6:	d14d      	bne.n	800c584 <_printf_i+0x1c8>
 800c4e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c4ec:	b005      	add	sp, #20
 800c4ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4f2:	4839      	ldr	r0, [pc, #228]	; (800c5d8 <_printf_i+0x21c>)
 800c4f4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c4f8:	6813      	ldr	r3, [r2, #0]
 800c4fa:	6821      	ldr	r1, [r4, #0]
 800c4fc:	1d1d      	adds	r5, r3, #4
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	6015      	str	r5, [r2, #0]
 800c502:	060a      	lsls	r2, r1, #24
 800c504:	d50b      	bpl.n	800c51e <_printf_i+0x162>
 800c506:	07ca      	lsls	r2, r1, #31
 800c508:	bf44      	itt	mi
 800c50a:	f041 0120 	orrmi.w	r1, r1, #32
 800c50e:	6021      	strmi	r1, [r4, #0]
 800c510:	b91b      	cbnz	r3, 800c51a <_printf_i+0x15e>
 800c512:	6822      	ldr	r2, [r4, #0]
 800c514:	f022 0220 	bic.w	r2, r2, #32
 800c518:	6022      	str	r2, [r4, #0]
 800c51a:	2210      	movs	r2, #16
 800c51c:	e7b7      	b.n	800c48e <_printf_i+0xd2>
 800c51e:	064d      	lsls	r5, r1, #25
 800c520:	bf48      	it	mi
 800c522:	b29b      	uxthmi	r3, r3
 800c524:	e7ef      	b.n	800c506 <_printf_i+0x14a>
 800c526:	4665      	mov	r5, ip
 800c528:	fbb3 f1f2 	udiv	r1, r3, r2
 800c52c:	fb02 3311 	mls	r3, r2, r1, r3
 800c530:	5cc3      	ldrb	r3, [r0, r3]
 800c532:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c536:	460b      	mov	r3, r1
 800c538:	2900      	cmp	r1, #0
 800c53a:	d1f5      	bne.n	800c528 <_printf_i+0x16c>
 800c53c:	e7b9      	b.n	800c4b2 <_printf_i+0xf6>
 800c53e:	6813      	ldr	r3, [r2, #0]
 800c540:	6825      	ldr	r5, [r4, #0]
 800c542:	6961      	ldr	r1, [r4, #20]
 800c544:	1d18      	adds	r0, r3, #4
 800c546:	6010      	str	r0, [r2, #0]
 800c548:	0628      	lsls	r0, r5, #24
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	d501      	bpl.n	800c552 <_printf_i+0x196>
 800c54e:	6019      	str	r1, [r3, #0]
 800c550:	e002      	b.n	800c558 <_printf_i+0x19c>
 800c552:	066a      	lsls	r2, r5, #25
 800c554:	d5fb      	bpl.n	800c54e <_printf_i+0x192>
 800c556:	8019      	strh	r1, [r3, #0]
 800c558:	2300      	movs	r3, #0
 800c55a:	6123      	str	r3, [r4, #16]
 800c55c:	4665      	mov	r5, ip
 800c55e:	e7b9      	b.n	800c4d4 <_printf_i+0x118>
 800c560:	6813      	ldr	r3, [r2, #0]
 800c562:	1d19      	adds	r1, r3, #4
 800c564:	6011      	str	r1, [r2, #0]
 800c566:	681d      	ldr	r5, [r3, #0]
 800c568:	6862      	ldr	r2, [r4, #4]
 800c56a:	2100      	movs	r1, #0
 800c56c:	4628      	mov	r0, r5
 800c56e:	f7f3 fe6f 	bl	8000250 <memchr>
 800c572:	b108      	cbz	r0, 800c578 <_printf_i+0x1bc>
 800c574:	1b40      	subs	r0, r0, r5
 800c576:	6060      	str	r0, [r4, #4]
 800c578:	6863      	ldr	r3, [r4, #4]
 800c57a:	6123      	str	r3, [r4, #16]
 800c57c:	2300      	movs	r3, #0
 800c57e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c582:	e7a7      	b.n	800c4d4 <_printf_i+0x118>
 800c584:	6923      	ldr	r3, [r4, #16]
 800c586:	462a      	mov	r2, r5
 800c588:	4639      	mov	r1, r7
 800c58a:	4630      	mov	r0, r6
 800c58c:	47c0      	blx	r8
 800c58e:	3001      	adds	r0, #1
 800c590:	d0aa      	beq.n	800c4e8 <_printf_i+0x12c>
 800c592:	6823      	ldr	r3, [r4, #0]
 800c594:	079b      	lsls	r3, r3, #30
 800c596:	d413      	bmi.n	800c5c0 <_printf_i+0x204>
 800c598:	68e0      	ldr	r0, [r4, #12]
 800c59a:	9b03      	ldr	r3, [sp, #12]
 800c59c:	4298      	cmp	r0, r3
 800c59e:	bfb8      	it	lt
 800c5a0:	4618      	movlt	r0, r3
 800c5a2:	e7a3      	b.n	800c4ec <_printf_i+0x130>
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	464a      	mov	r2, r9
 800c5a8:	4639      	mov	r1, r7
 800c5aa:	4630      	mov	r0, r6
 800c5ac:	47c0      	blx	r8
 800c5ae:	3001      	adds	r0, #1
 800c5b0:	d09a      	beq.n	800c4e8 <_printf_i+0x12c>
 800c5b2:	3501      	adds	r5, #1
 800c5b4:	68e3      	ldr	r3, [r4, #12]
 800c5b6:	9a03      	ldr	r2, [sp, #12]
 800c5b8:	1a9b      	subs	r3, r3, r2
 800c5ba:	42ab      	cmp	r3, r5
 800c5bc:	dcf2      	bgt.n	800c5a4 <_printf_i+0x1e8>
 800c5be:	e7eb      	b.n	800c598 <_printf_i+0x1dc>
 800c5c0:	2500      	movs	r5, #0
 800c5c2:	f104 0919 	add.w	r9, r4, #25
 800c5c6:	e7f5      	b.n	800c5b4 <_printf_i+0x1f8>
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d1ac      	bne.n	800c526 <_printf_i+0x16a>
 800c5cc:	7803      	ldrb	r3, [r0, #0]
 800c5ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c5d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5d6:	e76c      	b.n	800c4b2 <_printf_i+0xf6>
 800c5d8:	0800e73e 	.word	0x0800e73e
 800c5dc:	0800e74f 	.word	0x0800e74f

0800c5e0 <iprintf>:
 800c5e0:	b40f      	push	{r0, r1, r2, r3}
 800c5e2:	4b0a      	ldr	r3, [pc, #40]	; (800c60c <iprintf+0x2c>)
 800c5e4:	b513      	push	{r0, r1, r4, lr}
 800c5e6:	681c      	ldr	r4, [r3, #0]
 800c5e8:	b124      	cbz	r4, 800c5f4 <iprintf+0x14>
 800c5ea:	69a3      	ldr	r3, [r4, #24]
 800c5ec:	b913      	cbnz	r3, 800c5f4 <iprintf+0x14>
 800c5ee:	4620      	mov	r0, r4
 800c5f0:	f000 fe56 	bl	800d2a0 <__sinit>
 800c5f4:	ab05      	add	r3, sp, #20
 800c5f6:	9a04      	ldr	r2, [sp, #16]
 800c5f8:	68a1      	ldr	r1, [r4, #8]
 800c5fa:	9301      	str	r3, [sp, #4]
 800c5fc:	4620      	mov	r0, r4
 800c5fe:	f001 fb4f 	bl	800dca0 <_vfiprintf_r>
 800c602:	b002      	add	sp, #8
 800c604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c608:	b004      	add	sp, #16
 800c60a:	4770      	bx	lr
 800c60c:	20000014 	.word	0x20000014

0800c610 <_sbrk_r>:
 800c610:	b538      	push	{r3, r4, r5, lr}
 800c612:	4c06      	ldr	r4, [pc, #24]	; (800c62c <_sbrk_r+0x1c>)
 800c614:	2300      	movs	r3, #0
 800c616:	4605      	mov	r5, r0
 800c618:	4608      	mov	r0, r1
 800c61a:	6023      	str	r3, [r4, #0]
 800c61c:	f7f6 fcb6 	bl	8002f8c <_sbrk>
 800c620:	1c43      	adds	r3, r0, #1
 800c622:	d102      	bne.n	800c62a <_sbrk_r+0x1a>
 800c624:	6823      	ldr	r3, [r4, #0]
 800c626:	b103      	cbz	r3, 800c62a <_sbrk_r+0x1a>
 800c628:	602b      	str	r3, [r5, #0]
 800c62a:	bd38      	pop	{r3, r4, r5, pc}
 800c62c:	20004a20 	.word	0x20004a20

0800c630 <siprintf>:
 800c630:	b40e      	push	{r1, r2, r3}
 800c632:	b500      	push	{lr}
 800c634:	b09c      	sub	sp, #112	; 0x70
 800c636:	ab1d      	add	r3, sp, #116	; 0x74
 800c638:	9002      	str	r0, [sp, #8]
 800c63a:	9006      	str	r0, [sp, #24]
 800c63c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c640:	4809      	ldr	r0, [pc, #36]	; (800c668 <siprintf+0x38>)
 800c642:	9107      	str	r1, [sp, #28]
 800c644:	9104      	str	r1, [sp, #16]
 800c646:	4909      	ldr	r1, [pc, #36]	; (800c66c <siprintf+0x3c>)
 800c648:	f853 2b04 	ldr.w	r2, [r3], #4
 800c64c:	9105      	str	r1, [sp, #20]
 800c64e:	6800      	ldr	r0, [r0, #0]
 800c650:	9301      	str	r3, [sp, #4]
 800c652:	a902      	add	r1, sp, #8
 800c654:	f001 fa02 	bl	800da5c <_svfiprintf_r>
 800c658:	9b02      	ldr	r3, [sp, #8]
 800c65a:	2200      	movs	r2, #0
 800c65c:	701a      	strb	r2, [r3, #0]
 800c65e:	b01c      	add	sp, #112	; 0x70
 800c660:	f85d eb04 	ldr.w	lr, [sp], #4
 800c664:	b003      	add	sp, #12
 800c666:	4770      	bx	lr
 800c668:	20000014 	.word	0x20000014
 800c66c:	ffff0208 	.word	0xffff0208

0800c670 <quorem>:
 800c670:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c674:	6903      	ldr	r3, [r0, #16]
 800c676:	690c      	ldr	r4, [r1, #16]
 800c678:	42a3      	cmp	r3, r4
 800c67a:	4680      	mov	r8, r0
 800c67c:	f2c0 8082 	blt.w	800c784 <quorem+0x114>
 800c680:	3c01      	subs	r4, #1
 800c682:	f101 0714 	add.w	r7, r1, #20
 800c686:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c68a:	f100 0614 	add.w	r6, r0, #20
 800c68e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c692:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c696:	eb06 030c 	add.w	r3, r6, ip
 800c69a:	3501      	adds	r5, #1
 800c69c:	eb07 090c 	add.w	r9, r7, ip
 800c6a0:	9301      	str	r3, [sp, #4]
 800c6a2:	fbb0 f5f5 	udiv	r5, r0, r5
 800c6a6:	b395      	cbz	r5, 800c70e <quorem+0x9e>
 800c6a8:	f04f 0a00 	mov.w	sl, #0
 800c6ac:	4638      	mov	r0, r7
 800c6ae:	46b6      	mov	lr, r6
 800c6b0:	46d3      	mov	fp, sl
 800c6b2:	f850 2b04 	ldr.w	r2, [r0], #4
 800c6b6:	b293      	uxth	r3, r2
 800c6b8:	fb05 a303 	mla	r3, r5, r3, sl
 800c6bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c6c0:	b29b      	uxth	r3, r3
 800c6c2:	ebab 0303 	sub.w	r3, fp, r3
 800c6c6:	0c12      	lsrs	r2, r2, #16
 800c6c8:	f8de b000 	ldr.w	fp, [lr]
 800c6cc:	fb05 a202 	mla	r2, r5, r2, sl
 800c6d0:	fa13 f38b 	uxtah	r3, r3, fp
 800c6d4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c6d8:	fa1f fb82 	uxth.w	fp, r2
 800c6dc:	f8de 2000 	ldr.w	r2, [lr]
 800c6e0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c6e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c6e8:	b29b      	uxth	r3, r3
 800c6ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c6ee:	4581      	cmp	r9, r0
 800c6f0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c6f4:	f84e 3b04 	str.w	r3, [lr], #4
 800c6f8:	d2db      	bcs.n	800c6b2 <quorem+0x42>
 800c6fa:	f856 300c 	ldr.w	r3, [r6, ip]
 800c6fe:	b933      	cbnz	r3, 800c70e <quorem+0x9e>
 800c700:	9b01      	ldr	r3, [sp, #4]
 800c702:	3b04      	subs	r3, #4
 800c704:	429e      	cmp	r6, r3
 800c706:	461a      	mov	r2, r3
 800c708:	d330      	bcc.n	800c76c <quorem+0xfc>
 800c70a:	f8c8 4010 	str.w	r4, [r8, #16]
 800c70e:	4640      	mov	r0, r8
 800c710:	f001 f876 	bl	800d800 <__mcmp>
 800c714:	2800      	cmp	r0, #0
 800c716:	db25      	blt.n	800c764 <quorem+0xf4>
 800c718:	3501      	adds	r5, #1
 800c71a:	4630      	mov	r0, r6
 800c71c:	f04f 0c00 	mov.w	ip, #0
 800c720:	f857 2b04 	ldr.w	r2, [r7], #4
 800c724:	f8d0 e000 	ldr.w	lr, [r0]
 800c728:	b293      	uxth	r3, r2
 800c72a:	ebac 0303 	sub.w	r3, ip, r3
 800c72e:	0c12      	lsrs	r2, r2, #16
 800c730:	fa13 f38e 	uxtah	r3, r3, lr
 800c734:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c738:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c73c:	b29b      	uxth	r3, r3
 800c73e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c742:	45b9      	cmp	r9, r7
 800c744:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c748:	f840 3b04 	str.w	r3, [r0], #4
 800c74c:	d2e8      	bcs.n	800c720 <quorem+0xb0>
 800c74e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c752:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c756:	b92a      	cbnz	r2, 800c764 <quorem+0xf4>
 800c758:	3b04      	subs	r3, #4
 800c75a:	429e      	cmp	r6, r3
 800c75c:	461a      	mov	r2, r3
 800c75e:	d30b      	bcc.n	800c778 <quorem+0x108>
 800c760:	f8c8 4010 	str.w	r4, [r8, #16]
 800c764:	4628      	mov	r0, r5
 800c766:	b003      	add	sp, #12
 800c768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c76c:	6812      	ldr	r2, [r2, #0]
 800c76e:	3b04      	subs	r3, #4
 800c770:	2a00      	cmp	r2, #0
 800c772:	d1ca      	bne.n	800c70a <quorem+0x9a>
 800c774:	3c01      	subs	r4, #1
 800c776:	e7c5      	b.n	800c704 <quorem+0x94>
 800c778:	6812      	ldr	r2, [r2, #0]
 800c77a:	3b04      	subs	r3, #4
 800c77c:	2a00      	cmp	r2, #0
 800c77e:	d1ef      	bne.n	800c760 <quorem+0xf0>
 800c780:	3c01      	subs	r4, #1
 800c782:	e7ea      	b.n	800c75a <quorem+0xea>
 800c784:	2000      	movs	r0, #0
 800c786:	e7ee      	b.n	800c766 <quorem+0xf6>

0800c788 <_dtoa_r>:
 800c788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c78c:	ec57 6b10 	vmov	r6, r7, d0
 800c790:	b095      	sub	sp, #84	; 0x54
 800c792:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c794:	9108      	str	r1, [sp, #32]
 800c796:	4604      	mov	r4, r0
 800c798:	920a      	str	r2, [sp, #40]	; 0x28
 800c79a:	9311      	str	r3, [sp, #68]	; 0x44
 800c79c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800c7a0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c7a4:	b93d      	cbnz	r5, 800c7b6 <_dtoa_r+0x2e>
 800c7a6:	2010      	movs	r0, #16
 800c7a8:	f7ff fa12 	bl	800bbd0 <malloc>
 800c7ac:	6260      	str	r0, [r4, #36]	; 0x24
 800c7ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c7b2:	6005      	str	r5, [r0, #0]
 800c7b4:	60c5      	str	r5, [r0, #12]
 800c7b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7b8:	6819      	ldr	r1, [r3, #0]
 800c7ba:	b151      	cbz	r1, 800c7d2 <_dtoa_r+0x4a>
 800c7bc:	685a      	ldr	r2, [r3, #4]
 800c7be:	604a      	str	r2, [r1, #4]
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	4093      	lsls	r3, r2
 800c7c4:	608b      	str	r3, [r1, #8]
 800c7c6:	4620      	mov	r0, r4
 800c7c8:	f000 fe38 	bl	800d43c <_Bfree>
 800c7cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	601a      	str	r2, [r3, #0]
 800c7d2:	1e3b      	subs	r3, r7, #0
 800c7d4:	bfb9      	ittee	lt
 800c7d6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c7da:	9303      	strlt	r3, [sp, #12]
 800c7dc:	2300      	movge	r3, #0
 800c7de:	f8c8 3000 	strge.w	r3, [r8]
 800c7e2:	9d03      	ldr	r5, [sp, #12]
 800c7e4:	4bac      	ldr	r3, [pc, #688]	; (800ca98 <_dtoa_r+0x310>)
 800c7e6:	bfbc      	itt	lt
 800c7e8:	2201      	movlt	r2, #1
 800c7ea:	f8c8 2000 	strlt.w	r2, [r8]
 800c7ee:	43ab      	bics	r3, r5
 800c7f0:	d11b      	bne.n	800c82a <_dtoa_r+0xa2>
 800c7f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c7f4:	f242 730f 	movw	r3, #9999	; 0x270f
 800c7f8:	6013      	str	r3, [r2, #0]
 800c7fa:	9b02      	ldr	r3, [sp, #8]
 800c7fc:	b923      	cbnz	r3, 800c808 <_dtoa_r+0x80>
 800c7fe:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800c802:	2d00      	cmp	r5, #0
 800c804:	f000 84dd 	beq.w	800d1c2 <_dtoa_r+0xa3a>
 800c808:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c80a:	b953      	cbnz	r3, 800c822 <_dtoa_r+0x9a>
 800c80c:	4ba3      	ldr	r3, [pc, #652]	; (800ca9c <_dtoa_r+0x314>)
 800c80e:	e020      	b.n	800c852 <_dtoa_r+0xca>
 800c810:	4ba3      	ldr	r3, [pc, #652]	; (800caa0 <_dtoa_r+0x318>)
 800c812:	9304      	str	r3, [sp, #16]
 800c814:	3308      	adds	r3, #8
 800c816:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c818:	6013      	str	r3, [r2, #0]
 800c81a:	9804      	ldr	r0, [sp, #16]
 800c81c:	b015      	add	sp, #84	; 0x54
 800c81e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c822:	4b9e      	ldr	r3, [pc, #632]	; (800ca9c <_dtoa_r+0x314>)
 800c824:	9304      	str	r3, [sp, #16]
 800c826:	3303      	adds	r3, #3
 800c828:	e7f5      	b.n	800c816 <_dtoa_r+0x8e>
 800c82a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c82e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c836:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c83a:	d10c      	bne.n	800c856 <_dtoa_r+0xce>
 800c83c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c83e:	2301      	movs	r3, #1
 800c840:	6013      	str	r3, [r2, #0]
 800c842:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c844:	2b00      	cmp	r3, #0
 800c846:	f000 84b9 	beq.w	800d1bc <_dtoa_r+0xa34>
 800c84a:	4b96      	ldr	r3, [pc, #600]	; (800caa4 <_dtoa_r+0x31c>)
 800c84c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c84e:	6013      	str	r3, [r2, #0]
 800c850:	3b01      	subs	r3, #1
 800c852:	9304      	str	r3, [sp, #16]
 800c854:	e7e1      	b.n	800c81a <_dtoa_r+0x92>
 800c856:	a913      	add	r1, sp, #76	; 0x4c
 800c858:	aa12      	add	r2, sp, #72	; 0x48
 800c85a:	ed9d 0b04 	vldr	d0, [sp, #16]
 800c85e:	4620      	mov	r0, r4
 800c860:	f001 f845 	bl	800d8ee <__d2b>
 800c864:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800c868:	9001      	str	r0, [sp, #4]
 800c86a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c86c:	2e00      	cmp	r6, #0
 800c86e:	d046      	beq.n	800c8fe <_dtoa_r+0x176>
 800c870:	9805      	ldr	r0, [sp, #20]
 800c872:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800c876:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c87a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800c87e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c882:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800c886:	2700      	movs	r7, #0
 800c888:	ee07 aa90 	vmov	s15, sl
 800c88c:	ec43 2b16 	vmov	d6, r2, r3
 800c890:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800c894:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800ca80 <_dtoa_r+0x2f8>
 800c898:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800c89c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c8a0:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800ca88 <_dtoa_r+0x300>
 800c8a4:	eea7 6b04 	vfma.f64	d6, d7, d4
 800c8a8:	eeb0 7b46 	vmov.f64	d7, d6
 800c8ac:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800ca90 <_dtoa_r+0x308>
 800c8b0:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c8b4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800c8b8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c8bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8c0:	ee16 ba90 	vmov	fp, s13
 800c8c4:	d508      	bpl.n	800c8d8 <_dtoa_r+0x150>
 800c8c6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800c8ca:	eeb4 6b47 	vcmp.f64	d6, d7
 800c8ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8d2:	bf18      	it	ne
 800c8d4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800c8d8:	f1bb 0f16 	cmp.w	fp, #22
 800c8dc:	d834      	bhi.n	800c948 <_dtoa_r+0x1c0>
 800c8de:	4b72      	ldr	r3, [pc, #456]	; (800caa8 <_dtoa_r+0x320>)
 800c8e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c8e4:	ed93 7b00 	vldr	d7, [r3]
 800c8e8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c8ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c8f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8f4:	dd01      	ble.n	800c8fa <_dtoa_r+0x172>
 800c8f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	e025      	b.n	800c94a <_dtoa_r+0x1c2>
 800c8fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c900:	eb01 0a03 	add.w	sl, r1, r3
 800c904:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800c908:	2b20      	cmp	r3, #32
 800c90a:	dd17      	ble.n	800c93c <_dtoa_r+0x1b4>
 800c90c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800c910:	9a02      	ldr	r2, [sp, #8]
 800c912:	409d      	lsls	r5, r3
 800c914:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800c918:	fa22 f303 	lsr.w	r3, r2, r3
 800c91c:	432b      	orrs	r3, r5
 800c91e:	ee07 3a90 	vmov	s15, r3
 800c922:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c926:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c92a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c92e:	9805      	ldr	r0, [sp, #20]
 800c930:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c934:	2701      	movs	r7, #1
 800c936:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800c93a:	e7a5      	b.n	800c888 <_dtoa_r+0x100>
 800c93c:	9a02      	ldr	r2, [sp, #8]
 800c93e:	f1c3 0320 	rsb	r3, r3, #32
 800c942:	fa02 f303 	lsl.w	r3, r2, r3
 800c946:	e7ea      	b.n	800c91e <_dtoa_r+0x196>
 800c948:	2301      	movs	r3, #1
 800c94a:	eba1 0a0a 	sub.w	sl, r1, sl
 800c94e:	9310      	str	r3, [sp, #64]	; 0x40
 800c950:	f1ba 0301 	subs.w	r3, sl, #1
 800c954:	9307      	str	r3, [sp, #28]
 800c956:	bf43      	ittte	mi
 800c958:	2300      	movmi	r3, #0
 800c95a:	f1ca 0a01 	rsbmi	sl, sl, #1
 800c95e:	9307      	strmi	r3, [sp, #28]
 800c960:	f04f 0a00 	movpl.w	sl, #0
 800c964:	f1bb 0f00 	cmp.w	fp, #0
 800c968:	db19      	blt.n	800c99e <_dtoa_r+0x216>
 800c96a:	9b07      	ldr	r3, [sp, #28]
 800c96c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c970:	445b      	add	r3, fp
 800c972:	9307      	str	r3, [sp, #28]
 800c974:	f04f 0800 	mov.w	r8, #0
 800c978:	9b08      	ldr	r3, [sp, #32]
 800c97a:	2b09      	cmp	r3, #9
 800c97c:	d866      	bhi.n	800ca4c <_dtoa_r+0x2c4>
 800c97e:	2b05      	cmp	r3, #5
 800c980:	bfc4      	itt	gt
 800c982:	3b04      	subgt	r3, #4
 800c984:	9308      	strgt	r3, [sp, #32]
 800c986:	9b08      	ldr	r3, [sp, #32]
 800c988:	f1a3 0302 	sub.w	r3, r3, #2
 800c98c:	bfcc      	ite	gt
 800c98e:	2500      	movgt	r5, #0
 800c990:	2501      	movle	r5, #1
 800c992:	2b03      	cmp	r3, #3
 800c994:	d866      	bhi.n	800ca64 <_dtoa_r+0x2dc>
 800c996:	e8df f003 	tbb	[pc, r3]
 800c99a:	5755      	.short	0x5755
 800c99c:	4909      	.short	0x4909
 800c99e:	2300      	movs	r3, #0
 800c9a0:	ebaa 0a0b 	sub.w	sl, sl, fp
 800c9a4:	f1cb 0800 	rsb	r8, fp, #0
 800c9a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800c9aa:	e7e5      	b.n	800c978 <_dtoa_r+0x1f0>
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	9309      	str	r3, [sp, #36]	; 0x24
 800c9b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	dd59      	ble.n	800ca6a <_dtoa_r+0x2e2>
 800c9b6:	9306      	str	r3, [sp, #24]
 800c9b8:	4699      	mov	r9, r3
 800c9ba:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c9bc:	2200      	movs	r2, #0
 800c9be:	6072      	str	r2, [r6, #4]
 800c9c0:	2204      	movs	r2, #4
 800c9c2:	f102 0014 	add.w	r0, r2, #20
 800c9c6:	4298      	cmp	r0, r3
 800c9c8:	6871      	ldr	r1, [r6, #4]
 800c9ca:	d953      	bls.n	800ca74 <_dtoa_r+0x2ec>
 800c9cc:	4620      	mov	r0, r4
 800c9ce:	f000 fd01 	bl	800d3d4 <_Balloc>
 800c9d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9d4:	6030      	str	r0, [r6, #0]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	9304      	str	r3, [sp, #16]
 800c9da:	f1b9 0f0e 	cmp.w	r9, #14
 800c9de:	f200 80c2 	bhi.w	800cb66 <_dtoa_r+0x3de>
 800c9e2:	2d00      	cmp	r5, #0
 800c9e4:	f000 80bf 	beq.w	800cb66 <_dtoa_r+0x3de>
 800c9e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c9ec:	f1bb 0f00 	cmp.w	fp, #0
 800c9f0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800c9f4:	f340 80e6 	ble.w	800cbc4 <_dtoa_r+0x43c>
 800c9f8:	4a2b      	ldr	r2, [pc, #172]	; (800caa8 <_dtoa_r+0x320>)
 800c9fa:	f00b 030f 	and.w	r3, fp, #15
 800c9fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ca02:	ed93 7b00 	vldr	d7, [r3]
 800ca06:	ea4f 132b 	mov.w	r3, fp, asr #4
 800ca0a:	06da      	lsls	r2, r3, #27
 800ca0c:	f140 80d8 	bpl.w	800cbc0 <_dtoa_r+0x438>
 800ca10:	4a26      	ldr	r2, [pc, #152]	; (800caac <_dtoa_r+0x324>)
 800ca12:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800ca16:	ed92 6b08 	vldr	d6, [r2, #32]
 800ca1a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800ca1e:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ca22:	f003 030f 	and.w	r3, r3, #15
 800ca26:	2203      	movs	r2, #3
 800ca28:	4920      	ldr	r1, [pc, #128]	; (800caac <_dtoa_r+0x324>)
 800ca2a:	e04a      	b.n	800cac2 <_dtoa_r+0x33a>
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	9309      	str	r3, [sp, #36]	; 0x24
 800ca30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca32:	445b      	add	r3, fp
 800ca34:	f103 0901 	add.w	r9, r3, #1
 800ca38:	9306      	str	r3, [sp, #24]
 800ca3a:	464b      	mov	r3, r9
 800ca3c:	2b01      	cmp	r3, #1
 800ca3e:	bfb8      	it	lt
 800ca40:	2301      	movlt	r3, #1
 800ca42:	e7ba      	b.n	800c9ba <_dtoa_r+0x232>
 800ca44:	2300      	movs	r3, #0
 800ca46:	e7b2      	b.n	800c9ae <_dtoa_r+0x226>
 800ca48:	2300      	movs	r3, #0
 800ca4a:	e7f0      	b.n	800ca2e <_dtoa_r+0x2a6>
 800ca4c:	2501      	movs	r5, #1
 800ca4e:	2300      	movs	r3, #0
 800ca50:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800ca54:	f04f 33ff 	mov.w	r3, #4294967295
 800ca58:	9306      	str	r3, [sp, #24]
 800ca5a:	4699      	mov	r9, r3
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	2312      	movs	r3, #18
 800ca60:	920a      	str	r2, [sp, #40]	; 0x28
 800ca62:	e7aa      	b.n	800c9ba <_dtoa_r+0x232>
 800ca64:	2301      	movs	r3, #1
 800ca66:	9309      	str	r3, [sp, #36]	; 0x24
 800ca68:	e7f4      	b.n	800ca54 <_dtoa_r+0x2cc>
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	9306      	str	r3, [sp, #24]
 800ca6e:	4699      	mov	r9, r3
 800ca70:	461a      	mov	r2, r3
 800ca72:	e7f5      	b.n	800ca60 <_dtoa_r+0x2d8>
 800ca74:	3101      	adds	r1, #1
 800ca76:	6071      	str	r1, [r6, #4]
 800ca78:	0052      	lsls	r2, r2, #1
 800ca7a:	e7a2      	b.n	800c9c2 <_dtoa_r+0x23a>
 800ca7c:	f3af 8000 	nop.w
 800ca80:	636f4361 	.word	0x636f4361
 800ca84:	3fd287a7 	.word	0x3fd287a7
 800ca88:	8b60c8b3 	.word	0x8b60c8b3
 800ca8c:	3fc68a28 	.word	0x3fc68a28
 800ca90:	509f79fb 	.word	0x509f79fb
 800ca94:	3fd34413 	.word	0x3fd34413
 800ca98:	7ff00000 	.word	0x7ff00000
 800ca9c:	0800e769 	.word	0x0800e769
 800caa0:	0800e760 	.word	0x0800e760
 800caa4:	0800e73d 	.word	0x0800e73d
 800caa8:	0800e7f8 	.word	0x0800e7f8
 800caac:	0800e7d0 	.word	0x0800e7d0
 800cab0:	07de      	lsls	r6, r3, #31
 800cab2:	d504      	bpl.n	800cabe <_dtoa_r+0x336>
 800cab4:	ed91 6b00 	vldr	d6, [r1]
 800cab8:	3201      	adds	r2, #1
 800caba:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cabe:	105b      	asrs	r3, r3, #1
 800cac0:	3108      	adds	r1, #8
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d1f4      	bne.n	800cab0 <_dtoa_r+0x328>
 800cac6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800caca:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800cace:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cad2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	f000 80a7 	beq.w	800cc28 <_dtoa_r+0x4a0>
 800cada:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800cade:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cae2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caea:	f140 809d 	bpl.w	800cc28 <_dtoa_r+0x4a0>
 800caee:	f1b9 0f00 	cmp.w	r9, #0
 800caf2:	f000 8099 	beq.w	800cc28 <_dtoa_r+0x4a0>
 800caf6:	9b06      	ldr	r3, [sp, #24]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	dd30      	ble.n	800cb5e <_dtoa_r+0x3d6>
 800cafc:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800cb00:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cb04:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cb08:	9d06      	ldr	r5, [sp, #24]
 800cb0a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800cb0e:	3201      	adds	r2, #1
 800cb10:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cb14:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800cb18:	ee07 2a90 	vmov	s15, r2
 800cb1c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cb20:	eea7 5b06 	vfma.f64	d5, d7, d6
 800cb24:	ed8d 5b02 	vstr	d5, [sp, #8]
 800cb28:	9a03      	ldr	r2, [sp, #12]
 800cb2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb2e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800cb32:	2d00      	cmp	r5, #0
 800cb34:	d17b      	bne.n	800cc2e <_dtoa_r+0x4a6>
 800cb36:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800cb3a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800cb3e:	ec41 0b17 	vmov	d7, r0, r1
 800cb42:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cb46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb4a:	f300 8253 	bgt.w	800cff4 <_dtoa_r+0x86c>
 800cb4e:	eeb1 7b47 	vneg.f64	d7, d7
 800cb52:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cb56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb5a:	f100 8249 	bmi.w	800cff0 <_dtoa_r+0x868>
 800cb5e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800cb62:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cb66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	f2c0 8119 	blt.w	800cda0 <_dtoa_r+0x618>
 800cb6e:	f1bb 0f0e 	cmp.w	fp, #14
 800cb72:	f300 8115 	bgt.w	800cda0 <_dtoa_r+0x618>
 800cb76:	4bc3      	ldr	r3, [pc, #780]	; (800ce84 <_dtoa_r+0x6fc>)
 800cb78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cb7c:	ed93 6b00 	vldr	d6, [r3]
 800cb80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	f280 80ba 	bge.w	800ccfc <_dtoa_r+0x574>
 800cb88:	f1b9 0f00 	cmp.w	r9, #0
 800cb8c:	f300 80b6 	bgt.w	800ccfc <_dtoa_r+0x574>
 800cb90:	f040 822d 	bne.w	800cfee <_dtoa_r+0x866>
 800cb94:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800cb98:	ee26 6b07 	vmul.f64	d6, d6, d7
 800cb9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cba0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cba8:	464d      	mov	r5, r9
 800cbaa:	464f      	mov	r7, r9
 800cbac:	f280 8204 	bge.w	800cfb8 <_dtoa_r+0x830>
 800cbb0:	9b04      	ldr	r3, [sp, #16]
 800cbb2:	9a04      	ldr	r2, [sp, #16]
 800cbb4:	1c5e      	adds	r6, r3, #1
 800cbb6:	2331      	movs	r3, #49	; 0x31
 800cbb8:	7013      	strb	r3, [r2, #0]
 800cbba:	f10b 0b01 	add.w	fp, fp, #1
 800cbbe:	e1ff      	b.n	800cfc0 <_dtoa_r+0x838>
 800cbc0:	2202      	movs	r2, #2
 800cbc2:	e731      	b.n	800ca28 <_dtoa_r+0x2a0>
 800cbc4:	d02e      	beq.n	800cc24 <_dtoa_r+0x49c>
 800cbc6:	f1cb 0300 	rsb	r3, fp, #0
 800cbca:	4aae      	ldr	r2, [pc, #696]	; (800ce84 <_dtoa_r+0x6fc>)
 800cbcc:	f003 010f 	and.w	r1, r3, #15
 800cbd0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800cbd4:	ed92 7b00 	vldr	d7, [r2]
 800cbd8:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800cbdc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800cbe0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800cbe4:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800cbe8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800cbec:	49a6      	ldr	r1, [pc, #664]	; (800ce88 <_dtoa_r+0x700>)
 800cbee:	111b      	asrs	r3, r3, #4
 800cbf0:	2000      	movs	r0, #0
 800cbf2:	2202      	movs	r2, #2
 800cbf4:	b93b      	cbnz	r3, 800cc06 <_dtoa_r+0x47e>
 800cbf6:	2800      	cmp	r0, #0
 800cbf8:	f43f af6b 	beq.w	800cad2 <_dtoa_r+0x34a>
 800cbfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cc00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc04:	e765      	b.n	800cad2 <_dtoa_r+0x34a>
 800cc06:	07dd      	lsls	r5, r3, #31
 800cc08:	d509      	bpl.n	800cc1e <_dtoa_r+0x496>
 800cc0a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800cc0e:	ed91 7b00 	vldr	d7, [r1]
 800cc12:	ee26 7b07 	vmul.f64	d7, d6, d7
 800cc16:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800cc1a:	3201      	adds	r2, #1
 800cc1c:	2001      	movs	r0, #1
 800cc1e:	105b      	asrs	r3, r3, #1
 800cc20:	3108      	adds	r1, #8
 800cc22:	e7e7      	b.n	800cbf4 <_dtoa_r+0x46c>
 800cc24:	2202      	movs	r2, #2
 800cc26:	e754      	b.n	800cad2 <_dtoa_r+0x34a>
 800cc28:	465b      	mov	r3, fp
 800cc2a:	464d      	mov	r5, r9
 800cc2c:	e770      	b.n	800cb10 <_dtoa_r+0x388>
 800cc2e:	4a95      	ldr	r2, [pc, #596]	; (800ce84 <_dtoa_r+0x6fc>)
 800cc30:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800cc34:	ed12 4b02 	vldr	d4, [r2, #-8]
 800cc38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc3a:	ec41 0b17 	vmov	d7, r0, r1
 800cc3e:	b35a      	cbz	r2, 800cc98 <_dtoa_r+0x510>
 800cc40:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800cc44:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800cc48:	9e04      	ldr	r6, [sp, #16]
 800cc4a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800cc4e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800cc52:	ee35 7b47 	vsub.f64	d7, d5, d7
 800cc56:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800cc5a:	ee14 2a90 	vmov	r2, s9
 800cc5e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800cc62:	3230      	adds	r2, #48	; 0x30
 800cc64:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cc68:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cc6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc70:	f806 2b01 	strb.w	r2, [r6], #1
 800cc74:	d43b      	bmi.n	800ccee <_dtoa_r+0x566>
 800cc76:	ee32 5b46 	vsub.f64	d5, d2, d6
 800cc7a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800cc7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc82:	d472      	bmi.n	800cd6a <_dtoa_r+0x5e2>
 800cc84:	9a04      	ldr	r2, [sp, #16]
 800cc86:	1ab2      	subs	r2, r6, r2
 800cc88:	4295      	cmp	r5, r2
 800cc8a:	f77f af68 	ble.w	800cb5e <_dtoa_r+0x3d6>
 800cc8e:	ee27 7b03 	vmul.f64	d7, d7, d3
 800cc92:	ee26 6b03 	vmul.f64	d6, d6, d3
 800cc96:	e7de      	b.n	800cc56 <_dtoa_r+0x4ce>
 800cc98:	9a04      	ldr	r2, [sp, #16]
 800cc9a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800cc9e:	1956      	adds	r6, r2, r5
 800cca0:	4611      	mov	r1, r2
 800cca2:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800cca6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ccaa:	ee14 2a90 	vmov	r2, s9
 800ccae:	3230      	adds	r2, #48	; 0x30
 800ccb0:	f801 2b01 	strb.w	r2, [r1], #1
 800ccb4:	42b1      	cmp	r1, r6
 800ccb6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ccba:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ccbe:	d11a      	bne.n	800ccf6 <_dtoa_r+0x56e>
 800ccc0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ccc4:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ccc8:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800cccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccd0:	dc4b      	bgt.n	800cd6a <_dtoa_r+0x5e2>
 800ccd2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ccd6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ccda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccde:	f57f af3e 	bpl.w	800cb5e <_dtoa_r+0x3d6>
 800cce2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cce6:	2a30      	cmp	r2, #48	; 0x30
 800cce8:	f106 31ff 	add.w	r1, r6, #4294967295
 800ccec:	d001      	beq.n	800ccf2 <_dtoa_r+0x56a>
 800ccee:	469b      	mov	fp, r3
 800ccf0:	e02a      	b.n	800cd48 <_dtoa_r+0x5c0>
 800ccf2:	460e      	mov	r6, r1
 800ccf4:	e7f5      	b.n	800cce2 <_dtoa_r+0x55a>
 800ccf6:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ccfa:	e7d4      	b.n	800cca6 <_dtoa_r+0x51e>
 800ccfc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cd00:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800cd04:	9e04      	ldr	r6, [sp, #16]
 800cd06:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800cd0a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800cd0e:	ee15 3a10 	vmov	r3, s10
 800cd12:	3330      	adds	r3, #48	; 0x30
 800cd14:	f806 3b01 	strb.w	r3, [r6], #1
 800cd18:	9b04      	ldr	r3, [sp, #16]
 800cd1a:	1af3      	subs	r3, r6, r3
 800cd1c:	4599      	cmp	r9, r3
 800cd1e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800cd22:	eea3 7b46 	vfms.f64	d7, d3, d6
 800cd26:	d133      	bne.n	800cd90 <_dtoa_r+0x608>
 800cd28:	ee37 7b07 	vadd.f64	d7, d7, d7
 800cd2c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cd30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd34:	dc18      	bgt.n	800cd68 <_dtoa_r+0x5e0>
 800cd36:	eeb4 7b46 	vcmp.f64	d7, d6
 800cd3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd3e:	d103      	bne.n	800cd48 <_dtoa_r+0x5c0>
 800cd40:	ee15 3a10 	vmov	r3, s10
 800cd44:	07db      	lsls	r3, r3, #31
 800cd46:	d40f      	bmi.n	800cd68 <_dtoa_r+0x5e0>
 800cd48:	9901      	ldr	r1, [sp, #4]
 800cd4a:	4620      	mov	r0, r4
 800cd4c:	f000 fb76 	bl	800d43c <_Bfree>
 800cd50:	2300      	movs	r3, #0
 800cd52:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cd54:	7033      	strb	r3, [r6, #0]
 800cd56:	f10b 0301 	add.w	r3, fp, #1
 800cd5a:	6013      	str	r3, [r2, #0]
 800cd5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	f43f ad5b 	beq.w	800c81a <_dtoa_r+0x92>
 800cd64:	601e      	str	r6, [r3, #0]
 800cd66:	e558      	b.n	800c81a <_dtoa_r+0x92>
 800cd68:	465b      	mov	r3, fp
 800cd6a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cd6e:	2939      	cmp	r1, #57	; 0x39
 800cd70:	f106 32ff 	add.w	r2, r6, #4294967295
 800cd74:	d106      	bne.n	800cd84 <_dtoa_r+0x5fc>
 800cd76:	9904      	ldr	r1, [sp, #16]
 800cd78:	4291      	cmp	r1, r2
 800cd7a:	d107      	bne.n	800cd8c <_dtoa_r+0x604>
 800cd7c:	2230      	movs	r2, #48	; 0x30
 800cd7e:	700a      	strb	r2, [r1, #0]
 800cd80:	3301      	adds	r3, #1
 800cd82:	460a      	mov	r2, r1
 800cd84:	7811      	ldrb	r1, [r2, #0]
 800cd86:	3101      	adds	r1, #1
 800cd88:	7011      	strb	r1, [r2, #0]
 800cd8a:	e7b0      	b.n	800ccee <_dtoa_r+0x566>
 800cd8c:	4616      	mov	r6, r2
 800cd8e:	e7ec      	b.n	800cd6a <_dtoa_r+0x5e2>
 800cd90:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cd94:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cd98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd9c:	d1b3      	bne.n	800cd06 <_dtoa_r+0x57e>
 800cd9e:	e7d3      	b.n	800cd48 <_dtoa_r+0x5c0>
 800cda0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cda2:	2a00      	cmp	r2, #0
 800cda4:	f000 808d 	beq.w	800cec2 <_dtoa_r+0x73a>
 800cda8:	9a08      	ldr	r2, [sp, #32]
 800cdaa:	2a01      	cmp	r2, #1
 800cdac:	dc72      	bgt.n	800ce94 <_dtoa_r+0x70c>
 800cdae:	2f00      	cmp	r7, #0
 800cdb0:	d06c      	beq.n	800ce8c <_dtoa_r+0x704>
 800cdb2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cdb6:	4645      	mov	r5, r8
 800cdb8:	4656      	mov	r6, sl
 800cdba:	9a07      	ldr	r2, [sp, #28]
 800cdbc:	2101      	movs	r1, #1
 800cdbe:	441a      	add	r2, r3
 800cdc0:	4620      	mov	r0, r4
 800cdc2:	449a      	add	sl, r3
 800cdc4:	9207      	str	r2, [sp, #28]
 800cdc6:	f000 fbd9 	bl	800d57c <__i2b>
 800cdca:	4607      	mov	r7, r0
 800cdcc:	2e00      	cmp	r6, #0
 800cdce:	dd0b      	ble.n	800cde8 <_dtoa_r+0x660>
 800cdd0:	9b07      	ldr	r3, [sp, #28]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	dd08      	ble.n	800cde8 <_dtoa_r+0x660>
 800cdd6:	42b3      	cmp	r3, r6
 800cdd8:	9a07      	ldr	r2, [sp, #28]
 800cdda:	bfa8      	it	ge
 800cddc:	4633      	movge	r3, r6
 800cdde:	ebaa 0a03 	sub.w	sl, sl, r3
 800cde2:	1af6      	subs	r6, r6, r3
 800cde4:	1ad3      	subs	r3, r2, r3
 800cde6:	9307      	str	r3, [sp, #28]
 800cde8:	f1b8 0f00 	cmp.w	r8, #0
 800cdec:	d01d      	beq.n	800ce2a <_dtoa_r+0x6a2>
 800cdee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d06a      	beq.n	800ceca <_dtoa_r+0x742>
 800cdf4:	b18d      	cbz	r5, 800ce1a <_dtoa_r+0x692>
 800cdf6:	4639      	mov	r1, r7
 800cdf8:	462a      	mov	r2, r5
 800cdfa:	4620      	mov	r0, r4
 800cdfc:	f000 fc5e 	bl	800d6bc <__pow5mult>
 800ce00:	9a01      	ldr	r2, [sp, #4]
 800ce02:	4601      	mov	r1, r0
 800ce04:	4607      	mov	r7, r0
 800ce06:	4620      	mov	r0, r4
 800ce08:	f000 fbc1 	bl	800d58e <__multiply>
 800ce0c:	9901      	ldr	r1, [sp, #4]
 800ce0e:	900c      	str	r0, [sp, #48]	; 0x30
 800ce10:	4620      	mov	r0, r4
 800ce12:	f000 fb13 	bl	800d43c <_Bfree>
 800ce16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce18:	9301      	str	r3, [sp, #4]
 800ce1a:	ebb8 0205 	subs.w	r2, r8, r5
 800ce1e:	d004      	beq.n	800ce2a <_dtoa_r+0x6a2>
 800ce20:	9901      	ldr	r1, [sp, #4]
 800ce22:	4620      	mov	r0, r4
 800ce24:	f000 fc4a 	bl	800d6bc <__pow5mult>
 800ce28:	9001      	str	r0, [sp, #4]
 800ce2a:	2101      	movs	r1, #1
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	f000 fba5 	bl	800d57c <__i2b>
 800ce32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce34:	4605      	mov	r5, r0
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	f000 81ca 	beq.w	800d1d0 <_dtoa_r+0xa48>
 800ce3c:	461a      	mov	r2, r3
 800ce3e:	4601      	mov	r1, r0
 800ce40:	4620      	mov	r0, r4
 800ce42:	f000 fc3b 	bl	800d6bc <__pow5mult>
 800ce46:	9b08      	ldr	r3, [sp, #32]
 800ce48:	2b01      	cmp	r3, #1
 800ce4a:	4605      	mov	r5, r0
 800ce4c:	dc44      	bgt.n	800ced8 <_dtoa_r+0x750>
 800ce4e:	9b02      	ldr	r3, [sp, #8]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d13c      	bne.n	800cece <_dtoa_r+0x746>
 800ce54:	9b03      	ldr	r3, [sp, #12]
 800ce56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d137      	bne.n	800cece <_dtoa_r+0x746>
 800ce5e:	9b03      	ldr	r3, [sp, #12]
 800ce60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ce64:	0d1b      	lsrs	r3, r3, #20
 800ce66:	051b      	lsls	r3, r3, #20
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d033      	beq.n	800ced4 <_dtoa_r+0x74c>
 800ce6c:	9b07      	ldr	r3, [sp, #28]
 800ce6e:	3301      	adds	r3, #1
 800ce70:	f10a 0a01 	add.w	sl, sl, #1
 800ce74:	9307      	str	r3, [sp, #28]
 800ce76:	f04f 0801 	mov.w	r8, #1
 800ce7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce7c:	bb73      	cbnz	r3, 800cedc <_dtoa_r+0x754>
 800ce7e:	2001      	movs	r0, #1
 800ce80:	e034      	b.n	800ceec <_dtoa_r+0x764>
 800ce82:	bf00      	nop
 800ce84:	0800e7f8 	.word	0x0800e7f8
 800ce88:	0800e7d0 	.word	0x0800e7d0
 800ce8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ce8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ce92:	e790      	b.n	800cdb6 <_dtoa_r+0x62e>
 800ce94:	f109 35ff 	add.w	r5, r9, #4294967295
 800ce98:	45a8      	cmp	r8, r5
 800ce9a:	bfbf      	itttt	lt
 800ce9c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800ce9e:	eba5 0808 	sublt.w	r8, r5, r8
 800cea2:	4443      	addlt	r3, r8
 800cea4:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800cea6:	bfb6      	itet	lt
 800cea8:	46a8      	movlt	r8, r5
 800ceaa:	eba8 0505 	subge.w	r5, r8, r5
 800ceae:	2500      	movlt	r5, #0
 800ceb0:	f1b9 0f00 	cmp.w	r9, #0
 800ceb4:	bfb9      	ittee	lt
 800ceb6:	ebaa 0609 	sublt.w	r6, sl, r9
 800ceba:	2300      	movlt	r3, #0
 800cebc:	4656      	movge	r6, sl
 800cebe:	464b      	movge	r3, r9
 800cec0:	e77b      	b.n	800cdba <_dtoa_r+0x632>
 800cec2:	4645      	mov	r5, r8
 800cec4:	4656      	mov	r6, sl
 800cec6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cec8:	e780      	b.n	800cdcc <_dtoa_r+0x644>
 800ceca:	4642      	mov	r2, r8
 800cecc:	e7a8      	b.n	800ce20 <_dtoa_r+0x698>
 800cece:	f04f 0800 	mov.w	r8, #0
 800ced2:	e7d2      	b.n	800ce7a <_dtoa_r+0x6f2>
 800ced4:	4698      	mov	r8, r3
 800ced6:	e7d0      	b.n	800ce7a <_dtoa_r+0x6f2>
 800ced8:	f04f 0800 	mov.w	r8, #0
 800cedc:	692b      	ldr	r3, [r5, #16]
 800cede:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800cee2:	6918      	ldr	r0, [r3, #16]
 800cee4:	f000 fafc 	bl	800d4e0 <__hi0bits>
 800cee8:	f1c0 0020 	rsb	r0, r0, #32
 800ceec:	9b07      	ldr	r3, [sp, #28]
 800ceee:	4418      	add	r0, r3
 800cef0:	f010 001f 	ands.w	r0, r0, #31
 800cef4:	d047      	beq.n	800cf86 <_dtoa_r+0x7fe>
 800cef6:	f1c0 0320 	rsb	r3, r0, #32
 800cefa:	2b04      	cmp	r3, #4
 800cefc:	dd3b      	ble.n	800cf76 <_dtoa_r+0x7ee>
 800cefe:	9b07      	ldr	r3, [sp, #28]
 800cf00:	f1c0 001c 	rsb	r0, r0, #28
 800cf04:	4482      	add	sl, r0
 800cf06:	4406      	add	r6, r0
 800cf08:	4403      	add	r3, r0
 800cf0a:	9307      	str	r3, [sp, #28]
 800cf0c:	f1ba 0f00 	cmp.w	sl, #0
 800cf10:	dd05      	ble.n	800cf1e <_dtoa_r+0x796>
 800cf12:	4652      	mov	r2, sl
 800cf14:	9901      	ldr	r1, [sp, #4]
 800cf16:	4620      	mov	r0, r4
 800cf18:	f000 fc1e 	bl	800d758 <__lshift>
 800cf1c:	9001      	str	r0, [sp, #4]
 800cf1e:	9b07      	ldr	r3, [sp, #28]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	dd05      	ble.n	800cf30 <_dtoa_r+0x7a8>
 800cf24:	4629      	mov	r1, r5
 800cf26:	461a      	mov	r2, r3
 800cf28:	4620      	mov	r0, r4
 800cf2a:	f000 fc15 	bl	800d758 <__lshift>
 800cf2e:	4605      	mov	r5, r0
 800cf30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf32:	b353      	cbz	r3, 800cf8a <_dtoa_r+0x802>
 800cf34:	4629      	mov	r1, r5
 800cf36:	9801      	ldr	r0, [sp, #4]
 800cf38:	f000 fc62 	bl	800d800 <__mcmp>
 800cf3c:	2800      	cmp	r0, #0
 800cf3e:	da24      	bge.n	800cf8a <_dtoa_r+0x802>
 800cf40:	2300      	movs	r3, #0
 800cf42:	220a      	movs	r2, #10
 800cf44:	9901      	ldr	r1, [sp, #4]
 800cf46:	4620      	mov	r0, r4
 800cf48:	f000 fa8f 	bl	800d46a <__multadd>
 800cf4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf4e:	9001      	str	r0, [sp, #4]
 800cf50:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	f000 8142 	beq.w	800d1de <_dtoa_r+0xa56>
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	4639      	mov	r1, r7
 800cf5e:	220a      	movs	r2, #10
 800cf60:	4620      	mov	r0, r4
 800cf62:	f000 fa82 	bl	800d46a <__multadd>
 800cf66:	9b06      	ldr	r3, [sp, #24]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	4607      	mov	r7, r0
 800cf6c:	dc4b      	bgt.n	800d006 <_dtoa_r+0x87e>
 800cf6e:	9b08      	ldr	r3, [sp, #32]
 800cf70:	2b02      	cmp	r3, #2
 800cf72:	dd48      	ble.n	800d006 <_dtoa_r+0x87e>
 800cf74:	e011      	b.n	800cf9a <_dtoa_r+0x812>
 800cf76:	d0c9      	beq.n	800cf0c <_dtoa_r+0x784>
 800cf78:	9a07      	ldr	r2, [sp, #28]
 800cf7a:	331c      	adds	r3, #28
 800cf7c:	441a      	add	r2, r3
 800cf7e:	449a      	add	sl, r3
 800cf80:	441e      	add	r6, r3
 800cf82:	4613      	mov	r3, r2
 800cf84:	e7c1      	b.n	800cf0a <_dtoa_r+0x782>
 800cf86:	4603      	mov	r3, r0
 800cf88:	e7f6      	b.n	800cf78 <_dtoa_r+0x7f0>
 800cf8a:	f1b9 0f00 	cmp.w	r9, #0
 800cf8e:	dc34      	bgt.n	800cffa <_dtoa_r+0x872>
 800cf90:	9b08      	ldr	r3, [sp, #32]
 800cf92:	2b02      	cmp	r3, #2
 800cf94:	dd31      	ble.n	800cffa <_dtoa_r+0x872>
 800cf96:	f8cd 9018 	str.w	r9, [sp, #24]
 800cf9a:	9b06      	ldr	r3, [sp, #24]
 800cf9c:	b963      	cbnz	r3, 800cfb8 <_dtoa_r+0x830>
 800cf9e:	4629      	mov	r1, r5
 800cfa0:	2205      	movs	r2, #5
 800cfa2:	4620      	mov	r0, r4
 800cfa4:	f000 fa61 	bl	800d46a <__multadd>
 800cfa8:	4601      	mov	r1, r0
 800cfaa:	4605      	mov	r5, r0
 800cfac:	9801      	ldr	r0, [sp, #4]
 800cfae:	f000 fc27 	bl	800d800 <__mcmp>
 800cfb2:	2800      	cmp	r0, #0
 800cfb4:	f73f adfc 	bgt.w	800cbb0 <_dtoa_r+0x428>
 800cfb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfba:	9e04      	ldr	r6, [sp, #16]
 800cfbc:	ea6f 0b03 	mvn.w	fp, r3
 800cfc0:	f04f 0900 	mov.w	r9, #0
 800cfc4:	4629      	mov	r1, r5
 800cfc6:	4620      	mov	r0, r4
 800cfc8:	f000 fa38 	bl	800d43c <_Bfree>
 800cfcc:	2f00      	cmp	r7, #0
 800cfce:	f43f aebb 	beq.w	800cd48 <_dtoa_r+0x5c0>
 800cfd2:	f1b9 0f00 	cmp.w	r9, #0
 800cfd6:	d005      	beq.n	800cfe4 <_dtoa_r+0x85c>
 800cfd8:	45b9      	cmp	r9, r7
 800cfda:	d003      	beq.n	800cfe4 <_dtoa_r+0x85c>
 800cfdc:	4649      	mov	r1, r9
 800cfde:	4620      	mov	r0, r4
 800cfe0:	f000 fa2c 	bl	800d43c <_Bfree>
 800cfe4:	4639      	mov	r1, r7
 800cfe6:	4620      	mov	r0, r4
 800cfe8:	f000 fa28 	bl	800d43c <_Bfree>
 800cfec:	e6ac      	b.n	800cd48 <_dtoa_r+0x5c0>
 800cfee:	2500      	movs	r5, #0
 800cff0:	462f      	mov	r7, r5
 800cff2:	e7e1      	b.n	800cfb8 <_dtoa_r+0x830>
 800cff4:	469b      	mov	fp, r3
 800cff6:	462f      	mov	r7, r5
 800cff8:	e5da      	b.n	800cbb0 <_dtoa_r+0x428>
 800cffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cffc:	f8cd 9018 	str.w	r9, [sp, #24]
 800d000:	2b00      	cmp	r3, #0
 800d002:	f000 80f3 	beq.w	800d1ec <_dtoa_r+0xa64>
 800d006:	2e00      	cmp	r6, #0
 800d008:	dd05      	ble.n	800d016 <_dtoa_r+0x88e>
 800d00a:	4639      	mov	r1, r7
 800d00c:	4632      	mov	r2, r6
 800d00e:	4620      	mov	r0, r4
 800d010:	f000 fba2 	bl	800d758 <__lshift>
 800d014:	4607      	mov	r7, r0
 800d016:	f1b8 0f00 	cmp.w	r8, #0
 800d01a:	d04c      	beq.n	800d0b6 <_dtoa_r+0x92e>
 800d01c:	6879      	ldr	r1, [r7, #4]
 800d01e:	4620      	mov	r0, r4
 800d020:	f000 f9d8 	bl	800d3d4 <_Balloc>
 800d024:	693a      	ldr	r2, [r7, #16]
 800d026:	3202      	adds	r2, #2
 800d028:	4606      	mov	r6, r0
 800d02a:	0092      	lsls	r2, r2, #2
 800d02c:	f107 010c 	add.w	r1, r7, #12
 800d030:	300c      	adds	r0, #12
 800d032:	f7fe fddd 	bl	800bbf0 <memcpy>
 800d036:	2201      	movs	r2, #1
 800d038:	4631      	mov	r1, r6
 800d03a:	4620      	mov	r0, r4
 800d03c:	f000 fb8c 	bl	800d758 <__lshift>
 800d040:	9b02      	ldr	r3, [sp, #8]
 800d042:	f8dd a010 	ldr.w	sl, [sp, #16]
 800d046:	f003 0301 	and.w	r3, r3, #1
 800d04a:	46b9      	mov	r9, r7
 800d04c:	9307      	str	r3, [sp, #28]
 800d04e:	4607      	mov	r7, r0
 800d050:	4629      	mov	r1, r5
 800d052:	9801      	ldr	r0, [sp, #4]
 800d054:	f7ff fb0c 	bl	800c670 <quorem>
 800d058:	4649      	mov	r1, r9
 800d05a:	4606      	mov	r6, r0
 800d05c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d060:	9801      	ldr	r0, [sp, #4]
 800d062:	f000 fbcd 	bl	800d800 <__mcmp>
 800d066:	463a      	mov	r2, r7
 800d068:	9002      	str	r0, [sp, #8]
 800d06a:	4629      	mov	r1, r5
 800d06c:	4620      	mov	r0, r4
 800d06e:	f000 fbe1 	bl	800d834 <__mdiff>
 800d072:	68c3      	ldr	r3, [r0, #12]
 800d074:	4602      	mov	r2, r0
 800d076:	bb03      	cbnz	r3, 800d0ba <_dtoa_r+0x932>
 800d078:	4601      	mov	r1, r0
 800d07a:	9009      	str	r0, [sp, #36]	; 0x24
 800d07c:	9801      	ldr	r0, [sp, #4]
 800d07e:	f000 fbbf 	bl	800d800 <__mcmp>
 800d082:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d084:	4603      	mov	r3, r0
 800d086:	4611      	mov	r1, r2
 800d088:	4620      	mov	r0, r4
 800d08a:	9309      	str	r3, [sp, #36]	; 0x24
 800d08c:	f000 f9d6 	bl	800d43c <_Bfree>
 800d090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d092:	b9a3      	cbnz	r3, 800d0be <_dtoa_r+0x936>
 800d094:	9a08      	ldr	r2, [sp, #32]
 800d096:	b992      	cbnz	r2, 800d0be <_dtoa_r+0x936>
 800d098:	9a07      	ldr	r2, [sp, #28]
 800d09a:	b982      	cbnz	r2, 800d0be <_dtoa_r+0x936>
 800d09c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d0a0:	d029      	beq.n	800d0f6 <_dtoa_r+0x96e>
 800d0a2:	9b02      	ldr	r3, [sp, #8]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	dd01      	ble.n	800d0ac <_dtoa_r+0x924>
 800d0a8:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800d0ac:	f10a 0601 	add.w	r6, sl, #1
 800d0b0:	f88a 8000 	strb.w	r8, [sl]
 800d0b4:	e786      	b.n	800cfc4 <_dtoa_r+0x83c>
 800d0b6:	4638      	mov	r0, r7
 800d0b8:	e7c2      	b.n	800d040 <_dtoa_r+0x8b8>
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	e7e3      	b.n	800d086 <_dtoa_r+0x8fe>
 800d0be:	9a02      	ldr	r2, [sp, #8]
 800d0c0:	2a00      	cmp	r2, #0
 800d0c2:	db04      	blt.n	800d0ce <_dtoa_r+0x946>
 800d0c4:	d124      	bne.n	800d110 <_dtoa_r+0x988>
 800d0c6:	9a08      	ldr	r2, [sp, #32]
 800d0c8:	bb12      	cbnz	r2, 800d110 <_dtoa_r+0x988>
 800d0ca:	9a07      	ldr	r2, [sp, #28]
 800d0cc:	bb02      	cbnz	r2, 800d110 <_dtoa_r+0x988>
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	ddec      	ble.n	800d0ac <_dtoa_r+0x924>
 800d0d2:	2201      	movs	r2, #1
 800d0d4:	9901      	ldr	r1, [sp, #4]
 800d0d6:	4620      	mov	r0, r4
 800d0d8:	f000 fb3e 	bl	800d758 <__lshift>
 800d0dc:	4629      	mov	r1, r5
 800d0de:	9001      	str	r0, [sp, #4]
 800d0e0:	f000 fb8e 	bl	800d800 <__mcmp>
 800d0e4:	2800      	cmp	r0, #0
 800d0e6:	dc03      	bgt.n	800d0f0 <_dtoa_r+0x968>
 800d0e8:	d1e0      	bne.n	800d0ac <_dtoa_r+0x924>
 800d0ea:	f018 0f01 	tst.w	r8, #1
 800d0ee:	d0dd      	beq.n	800d0ac <_dtoa_r+0x924>
 800d0f0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d0f4:	d1d8      	bne.n	800d0a8 <_dtoa_r+0x920>
 800d0f6:	2339      	movs	r3, #57	; 0x39
 800d0f8:	f10a 0601 	add.w	r6, sl, #1
 800d0fc:	f88a 3000 	strb.w	r3, [sl]
 800d100:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d104:	2b39      	cmp	r3, #57	; 0x39
 800d106:	f106 32ff 	add.w	r2, r6, #4294967295
 800d10a:	d04c      	beq.n	800d1a6 <_dtoa_r+0xa1e>
 800d10c:	3301      	adds	r3, #1
 800d10e:	e051      	b.n	800d1b4 <_dtoa_r+0xa2c>
 800d110:	2b00      	cmp	r3, #0
 800d112:	f10a 0601 	add.w	r6, sl, #1
 800d116:	dd05      	ble.n	800d124 <_dtoa_r+0x99c>
 800d118:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d11c:	d0eb      	beq.n	800d0f6 <_dtoa_r+0x96e>
 800d11e:	f108 0801 	add.w	r8, r8, #1
 800d122:	e7c5      	b.n	800d0b0 <_dtoa_r+0x928>
 800d124:	9b04      	ldr	r3, [sp, #16]
 800d126:	9a06      	ldr	r2, [sp, #24]
 800d128:	f806 8c01 	strb.w	r8, [r6, #-1]
 800d12c:	1af3      	subs	r3, r6, r3
 800d12e:	4293      	cmp	r3, r2
 800d130:	d021      	beq.n	800d176 <_dtoa_r+0x9ee>
 800d132:	2300      	movs	r3, #0
 800d134:	220a      	movs	r2, #10
 800d136:	9901      	ldr	r1, [sp, #4]
 800d138:	4620      	mov	r0, r4
 800d13a:	f000 f996 	bl	800d46a <__multadd>
 800d13e:	45b9      	cmp	r9, r7
 800d140:	9001      	str	r0, [sp, #4]
 800d142:	f04f 0300 	mov.w	r3, #0
 800d146:	f04f 020a 	mov.w	r2, #10
 800d14a:	4649      	mov	r1, r9
 800d14c:	4620      	mov	r0, r4
 800d14e:	d105      	bne.n	800d15c <_dtoa_r+0x9d4>
 800d150:	f000 f98b 	bl	800d46a <__multadd>
 800d154:	4681      	mov	r9, r0
 800d156:	4607      	mov	r7, r0
 800d158:	46b2      	mov	sl, r6
 800d15a:	e779      	b.n	800d050 <_dtoa_r+0x8c8>
 800d15c:	f000 f985 	bl	800d46a <__multadd>
 800d160:	4639      	mov	r1, r7
 800d162:	4681      	mov	r9, r0
 800d164:	2300      	movs	r3, #0
 800d166:	220a      	movs	r2, #10
 800d168:	4620      	mov	r0, r4
 800d16a:	f000 f97e 	bl	800d46a <__multadd>
 800d16e:	4607      	mov	r7, r0
 800d170:	e7f2      	b.n	800d158 <_dtoa_r+0x9d0>
 800d172:	f04f 0900 	mov.w	r9, #0
 800d176:	2201      	movs	r2, #1
 800d178:	9901      	ldr	r1, [sp, #4]
 800d17a:	4620      	mov	r0, r4
 800d17c:	f000 faec 	bl	800d758 <__lshift>
 800d180:	4629      	mov	r1, r5
 800d182:	9001      	str	r0, [sp, #4]
 800d184:	f000 fb3c 	bl	800d800 <__mcmp>
 800d188:	2800      	cmp	r0, #0
 800d18a:	dcb9      	bgt.n	800d100 <_dtoa_r+0x978>
 800d18c:	d102      	bne.n	800d194 <_dtoa_r+0xa0c>
 800d18e:	f018 0f01 	tst.w	r8, #1
 800d192:	d1b5      	bne.n	800d100 <_dtoa_r+0x978>
 800d194:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d198:	2b30      	cmp	r3, #48	; 0x30
 800d19a:	f106 32ff 	add.w	r2, r6, #4294967295
 800d19e:	f47f af11 	bne.w	800cfc4 <_dtoa_r+0x83c>
 800d1a2:	4616      	mov	r6, r2
 800d1a4:	e7f6      	b.n	800d194 <_dtoa_r+0xa0c>
 800d1a6:	9b04      	ldr	r3, [sp, #16]
 800d1a8:	4293      	cmp	r3, r2
 800d1aa:	d105      	bne.n	800d1b8 <_dtoa_r+0xa30>
 800d1ac:	9a04      	ldr	r2, [sp, #16]
 800d1ae:	f10b 0b01 	add.w	fp, fp, #1
 800d1b2:	2331      	movs	r3, #49	; 0x31
 800d1b4:	7013      	strb	r3, [r2, #0]
 800d1b6:	e705      	b.n	800cfc4 <_dtoa_r+0x83c>
 800d1b8:	4616      	mov	r6, r2
 800d1ba:	e7a1      	b.n	800d100 <_dtoa_r+0x978>
 800d1bc:	4b16      	ldr	r3, [pc, #88]	; (800d218 <_dtoa_r+0xa90>)
 800d1be:	f7ff bb48 	b.w	800c852 <_dtoa_r+0xca>
 800d1c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	f47f ab23 	bne.w	800c810 <_dtoa_r+0x88>
 800d1ca:	4b14      	ldr	r3, [pc, #80]	; (800d21c <_dtoa_r+0xa94>)
 800d1cc:	f7ff bb41 	b.w	800c852 <_dtoa_r+0xca>
 800d1d0:	9b08      	ldr	r3, [sp, #32]
 800d1d2:	2b01      	cmp	r3, #1
 800d1d4:	f77f ae3b 	ble.w	800ce4e <_dtoa_r+0x6c6>
 800d1d8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800d1dc:	e64f      	b.n	800ce7e <_dtoa_r+0x6f6>
 800d1de:	9b06      	ldr	r3, [sp, #24]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	dc03      	bgt.n	800d1ec <_dtoa_r+0xa64>
 800d1e4:	9b08      	ldr	r3, [sp, #32]
 800d1e6:	2b02      	cmp	r3, #2
 800d1e8:	f73f aed7 	bgt.w	800cf9a <_dtoa_r+0x812>
 800d1ec:	9e04      	ldr	r6, [sp, #16]
 800d1ee:	9801      	ldr	r0, [sp, #4]
 800d1f0:	4629      	mov	r1, r5
 800d1f2:	f7ff fa3d 	bl	800c670 <quorem>
 800d1f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d1fa:	f806 8b01 	strb.w	r8, [r6], #1
 800d1fe:	9b04      	ldr	r3, [sp, #16]
 800d200:	9a06      	ldr	r2, [sp, #24]
 800d202:	1af3      	subs	r3, r6, r3
 800d204:	429a      	cmp	r2, r3
 800d206:	ddb4      	ble.n	800d172 <_dtoa_r+0x9ea>
 800d208:	2300      	movs	r3, #0
 800d20a:	220a      	movs	r2, #10
 800d20c:	9901      	ldr	r1, [sp, #4]
 800d20e:	4620      	mov	r0, r4
 800d210:	f000 f92b 	bl	800d46a <__multadd>
 800d214:	9001      	str	r0, [sp, #4]
 800d216:	e7ea      	b.n	800d1ee <_dtoa_r+0xa66>
 800d218:	0800e73c 	.word	0x0800e73c
 800d21c:	0800e760 	.word	0x0800e760

0800d220 <std>:
 800d220:	2300      	movs	r3, #0
 800d222:	b510      	push	{r4, lr}
 800d224:	4604      	mov	r4, r0
 800d226:	e9c0 3300 	strd	r3, r3, [r0]
 800d22a:	6083      	str	r3, [r0, #8]
 800d22c:	8181      	strh	r1, [r0, #12]
 800d22e:	6643      	str	r3, [r0, #100]	; 0x64
 800d230:	81c2      	strh	r2, [r0, #14]
 800d232:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d236:	6183      	str	r3, [r0, #24]
 800d238:	4619      	mov	r1, r3
 800d23a:	2208      	movs	r2, #8
 800d23c:	305c      	adds	r0, #92	; 0x5c
 800d23e:	f7fe fce2 	bl	800bc06 <memset>
 800d242:	4b05      	ldr	r3, [pc, #20]	; (800d258 <std+0x38>)
 800d244:	6263      	str	r3, [r4, #36]	; 0x24
 800d246:	4b05      	ldr	r3, [pc, #20]	; (800d25c <std+0x3c>)
 800d248:	62a3      	str	r3, [r4, #40]	; 0x28
 800d24a:	4b05      	ldr	r3, [pc, #20]	; (800d260 <std+0x40>)
 800d24c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d24e:	4b05      	ldr	r3, [pc, #20]	; (800d264 <std+0x44>)
 800d250:	6224      	str	r4, [r4, #32]
 800d252:	6323      	str	r3, [r4, #48]	; 0x30
 800d254:	bd10      	pop	{r4, pc}
 800d256:	bf00      	nop
 800d258:	0800decd 	.word	0x0800decd
 800d25c:	0800deef 	.word	0x0800deef
 800d260:	0800df27 	.word	0x0800df27
 800d264:	0800df4b 	.word	0x0800df4b

0800d268 <_cleanup_r>:
 800d268:	4901      	ldr	r1, [pc, #4]	; (800d270 <_cleanup_r+0x8>)
 800d26a:	f000 b885 	b.w	800d378 <_fwalk_reent>
 800d26e:	bf00      	nop
 800d270:	0800e225 	.word	0x0800e225

0800d274 <__sfmoreglue>:
 800d274:	b570      	push	{r4, r5, r6, lr}
 800d276:	1e4a      	subs	r2, r1, #1
 800d278:	2568      	movs	r5, #104	; 0x68
 800d27a:	4355      	muls	r5, r2
 800d27c:	460e      	mov	r6, r1
 800d27e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d282:	f7fe fd17 	bl	800bcb4 <_malloc_r>
 800d286:	4604      	mov	r4, r0
 800d288:	b140      	cbz	r0, 800d29c <__sfmoreglue+0x28>
 800d28a:	2100      	movs	r1, #0
 800d28c:	e9c0 1600 	strd	r1, r6, [r0]
 800d290:	300c      	adds	r0, #12
 800d292:	60a0      	str	r0, [r4, #8]
 800d294:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d298:	f7fe fcb5 	bl	800bc06 <memset>
 800d29c:	4620      	mov	r0, r4
 800d29e:	bd70      	pop	{r4, r5, r6, pc}

0800d2a0 <__sinit>:
 800d2a0:	6983      	ldr	r3, [r0, #24]
 800d2a2:	b510      	push	{r4, lr}
 800d2a4:	4604      	mov	r4, r0
 800d2a6:	bb33      	cbnz	r3, 800d2f6 <__sinit+0x56>
 800d2a8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800d2ac:	6503      	str	r3, [r0, #80]	; 0x50
 800d2ae:	4b12      	ldr	r3, [pc, #72]	; (800d2f8 <__sinit+0x58>)
 800d2b0:	4a12      	ldr	r2, [pc, #72]	; (800d2fc <__sinit+0x5c>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	6282      	str	r2, [r0, #40]	; 0x28
 800d2b6:	4298      	cmp	r0, r3
 800d2b8:	bf04      	itt	eq
 800d2ba:	2301      	moveq	r3, #1
 800d2bc:	6183      	streq	r3, [r0, #24]
 800d2be:	f000 f81f 	bl	800d300 <__sfp>
 800d2c2:	6060      	str	r0, [r4, #4]
 800d2c4:	4620      	mov	r0, r4
 800d2c6:	f000 f81b 	bl	800d300 <__sfp>
 800d2ca:	60a0      	str	r0, [r4, #8]
 800d2cc:	4620      	mov	r0, r4
 800d2ce:	f000 f817 	bl	800d300 <__sfp>
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	60e0      	str	r0, [r4, #12]
 800d2d6:	2104      	movs	r1, #4
 800d2d8:	6860      	ldr	r0, [r4, #4]
 800d2da:	f7ff ffa1 	bl	800d220 <std>
 800d2de:	2201      	movs	r2, #1
 800d2e0:	2109      	movs	r1, #9
 800d2e2:	68a0      	ldr	r0, [r4, #8]
 800d2e4:	f7ff ff9c 	bl	800d220 <std>
 800d2e8:	2202      	movs	r2, #2
 800d2ea:	2112      	movs	r1, #18
 800d2ec:	68e0      	ldr	r0, [r4, #12]
 800d2ee:	f7ff ff97 	bl	800d220 <std>
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	61a3      	str	r3, [r4, #24]
 800d2f6:	bd10      	pop	{r4, pc}
 800d2f8:	0800e728 	.word	0x0800e728
 800d2fc:	0800d269 	.word	0x0800d269

0800d300 <__sfp>:
 800d300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d302:	4b1b      	ldr	r3, [pc, #108]	; (800d370 <__sfp+0x70>)
 800d304:	681e      	ldr	r6, [r3, #0]
 800d306:	69b3      	ldr	r3, [r6, #24]
 800d308:	4607      	mov	r7, r0
 800d30a:	b913      	cbnz	r3, 800d312 <__sfp+0x12>
 800d30c:	4630      	mov	r0, r6
 800d30e:	f7ff ffc7 	bl	800d2a0 <__sinit>
 800d312:	3648      	adds	r6, #72	; 0x48
 800d314:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d318:	3b01      	subs	r3, #1
 800d31a:	d503      	bpl.n	800d324 <__sfp+0x24>
 800d31c:	6833      	ldr	r3, [r6, #0]
 800d31e:	b133      	cbz	r3, 800d32e <__sfp+0x2e>
 800d320:	6836      	ldr	r6, [r6, #0]
 800d322:	e7f7      	b.n	800d314 <__sfp+0x14>
 800d324:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d328:	b16d      	cbz	r5, 800d346 <__sfp+0x46>
 800d32a:	3468      	adds	r4, #104	; 0x68
 800d32c:	e7f4      	b.n	800d318 <__sfp+0x18>
 800d32e:	2104      	movs	r1, #4
 800d330:	4638      	mov	r0, r7
 800d332:	f7ff ff9f 	bl	800d274 <__sfmoreglue>
 800d336:	6030      	str	r0, [r6, #0]
 800d338:	2800      	cmp	r0, #0
 800d33a:	d1f1      	bne.n	800d320 <__sfp+0x20>
 800d33c:	230c      	movs	r3, #12
 800d33e:	603b      	str	r3, [r7, #0]
 800d340:	4604      	mov	r4, r0
 800d342:	4620      	mov	r0, r4
 800d344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d346:	4b0b      	ldr	r3, [pc, #44]	; (800d374 <__sfp+0x74>)
 800d348:	6665      	str	r5, [r4, #100]	; 0x64
 800d34a:	e9c4 5500 	strd	r5, r5, [r4]
 800d34e:	60a5      	str	r5, [r4, #8]
 800d350:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d354:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800d358:	2208      	movs	r2, #8
 800d35a:	4629      	mov	r1, r5
 800d35c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d360:	f7fe fc51 	bl	800bc06 <memset>
 800d364:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d368:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d36c:	e7e9      	b.n	800d342 <__sfp+0x42>
 800d36e:	bf00      	nop
 800d370:	0800e728 	.word	0x0800e728
 800d374:	ffff0001 	.word	0xffff0001

0800d378 <_fwalk_reent>:
 800d378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d37c:	4680      	mov	r8, r0
 800d37e:	4689      	mov	r9, r1
 800d380:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d384:	2600      	movs	r6, #0
 800d386:	b914      	cbnz	r4, 800d38e <_fwalk_reent+0x16>
 800d388:	4630      	mov	r0, r6
 800d38a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d38e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800d392:	3f01      	subs	r7, #1
 800d394:	d501      	bpl.n	800d39a <_fwalk_reent+0x22>
 800d396:	6824      	ldr	r4, [r4, #0]
 800d398:	e7f5      	b.n	800d386 <_fwalk_reent+0xe>
 800d39a:	89ab      	ldrh	r3, [r5, #12]
 800d39c:	2b01      	cmp	r3, #1
 800d39e:	d907      	bls.n	800d3b0 <_fwalk_reent+0x38>
 800d3a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d3a4:	3301      	adds	r3, #1
 800d3a6:	d003      	beq.n	800d3b0 <_fwalk_reent+0x38>
 800d3a8:	4629      	mov	r1, r5
 800d3aa:	4640      	mov	r0, r8
 800d3ac:	47c8      	blx	r9
 800d3ae:	4306      	orrs	r6, r0
 800d3b0:	3568      	adds	r5, #104	; 0x68
 800d3b2:	e7ee      	b.n	800d392 <_fwalk_reent+0x1a>

0800d3b4 <_localeconv_r>:
 800d3b4:	4b04      	ldr	r3, [pc, #16]	; (800d3c8 <_localeconv_r+0x14>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	6a18      	ldr	r0, [r3, #32]
 800d3ba:	4b04      	ldr	r3, [pc, #16]	; (800d3cc <_localeconv_r+0x18>)
 800d3bc:	2800      	cmp	r0, #0
 800d3be:	bf08      	it	eq
 800d3c0:	4618      	moveq	r0, r3
 800d3c2:	30f0      	adds	r0, #240	; 0xf0
 800d3c4:	4770      	bx	lr
 800d3c6:	bf00      	nop
 800d3c8:	20000014 	.word	0x20000014
 800d3cc:	20000078 	.word	0x20000078

0800d3d0 <__malloc_lock>:
 800d3d0:	4770      	bx	lr

0800d3d2 <__malloc_unlock>:
 800d3d2:	4770      	bx	lr

0800d3d4 <_Balloc>:
 800d3d4:	b570      	push	{r4, r5, r6, lr}
 800d3d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d3d8:	4604      	mov	r4, r0
 800d3da:	460e      	mov	r6, r1
 800d3dc:	b93d      	cbnz	r5, 800d3ee <_Balloc+0x1a>
 800d3de:	2010      	movs	r0, #16
 800d3e0:	f7fe fbf6 	bl	800bbd0 <malloc>
 800d3e4:	6260      	str	r0, [r4, #36]	; 0x24
 800d3e6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d3ea:	6005      	str	r5, [r0, #0]
 800d3ec:	60c5      	str	r5, [r0, #12]
 800d3ee:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d3f0:	68eb      	ldr	r3, [r5, #12]
 800d3f2:	b183      	cbz	r3, 800d416 <_Balloc+0x42>
 800d3f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3f6:	68db      	ldr	r3, [r3, #12]
 800d3f8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d3fc:	b9b8      	cbnz	r0, 800d42e <_Balloc+0x5a>
 800d3fe:	2101      	movs	r1, #1
 800d400:	fa01 f506 	lsl.w	r5, r1, r6
 800d404:	1d6a      	adds	r2, r5, #5
 800d406:	0092      	lsls	r2, r2, #2
 800d408:	4620      	mov	r0, r4
 800d40a:	f000 fabf 	bl	800d98c <_calloc_r>
 800d40e:	b160      	cbz	r0, 800d42a <_Balloc+0x56>
 800d410:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800d414:	e00e      	b.n	800d434 <_Balloc+0x60>
 800d416:	2221      	movs	r2, #33	; 0x21
 800d418:	2104      	movs	r1, #4
 800d41a:	4620      	mov	r0, r4
 800d41c:	f000 fab6 	bl	800d98c <_calloc_r>
 800d420:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d422:	60e8      	str	r0, [r5, #12]
 800d424:	68db      	ldr	r3, [r3, #12]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d1e4      	bne.n	800d3f4 <_Balloc+0x20>
 800d42a:	2000      	movs	r0, #0
 800d42c:	bd70      	pop	{r4, r5, r6, pc}
 800d42e:	6802      	ldr	r2, [r0, #0]
 800d430:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800d434:	2300      	movs	r3, #0
 800d436:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d43a:	e7f7      	b.n	800d42c <_Balloc+0x58>

0800d43c <_Bfree>:
 800d43c:	b570      	push	{r4, r5, r6, lr}
 800d43e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d440:	4606      	mov	r6, r0
 800d442:	460d      	mov	r5, r1
 800d444:	b93c      	cbnz	r4, 800d456 <_Bfree+0x1a>
 800d446:	2010      	movs	r0, #16
 800d448:	f7fe fbc2 	bl	800bbd0 <malloc>
 800d44c:	6270      	str	r0, [r6, #36]	; 0x24
 800d44e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d452:	6004      	str	r4, [r0, #0]
 800d454:	60c4      	str	r4, [r0, #12]
 800d456:	b13d      	cbz	r5, 800d468 <_Bfree+0x2c>
 800d458:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d45a:	686a      	ldr	r2, [r5, #4]
 800d45c:	68db      	ldr	r3, [r3, #12]
 800d45e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d462:	6029      	str	r1, [r5, #0]
 800d464:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d468:	bd70      	pop	{r4, r5, r6, pc}

0800d46a <__multadd>:
 800d46a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d46e:	690d      	ldr	r5, [r1, #16]
 800d470:	461f      	mov	r7, r3
 800d472:	4606      	mov	r6, r0
 800d474:	460c      	mov	r4, r1
 800d476:	f101 0c14 	add.w	ip, r1, #20
 800d47a:	2300      	movs	r3, #0
 800d47c:	f8dc 0000 	ldr.w	r0, [ip]
 800d480:	b281      	uxth	r1, r0
 800d482:	fb02 7101 	mla	r1, r2, r1, r7
 800d486:	0c0f      	lsrs	r7, r1, #16
 800d488:	0c00      	lsrs	r0, r0, #16
 800d48a:	fb02 7000 	mla	r0, r2, r0, r7
 800d48e:	b289      	uxth	r1, r1
 800d490:	3301      	adds	r3, #1
 800d492:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800d496:	429d      	cmp	r5, r3
 800d498:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800d49c:	f84c 1b04 	str.w	r1, [ip], #4
 800d4a0:	dcec      	bgt.n	800d47c <__multadd+0x12>
 800d4a2:	b1d7      	cbz	r7, 800d4da <__multadd+0x70>
 800d4a4:	68a3      	ldr	r3, [r4, #8]
 800d4a6:	42ab      	cmp	r3, r5
 800d4a8:	dc12      	bgt.n	800d4d0 <__multadd+0x66>
 800d4aa:	6861      	ldr	r1, [r4, #4]
 800d4ac:	4630      	mov	r0, r6
 800d4ae:	3101      	adds	r1, #1
 800d4b0:	f7ff ff90 	bl	800d3d4 <_Balloc>
 800d4b4:	6922      	ldr	r2, [r4, #16]
 800d4b6:	3202      	adds	r2, #2
 800d4b8:	f104 010c 	add.w	r1, r4, #12
 800d4bc:	4680      	mov	r8, r0
 800d4be:	0092      	lsls	r2, r2, #2
 800d4c0:	300c      	adds	r0, #12
 800d4c2:	f7fe fb95 	bl	800bbf0 <memcpy>
 800d4c6:	4621      	mov	r1, r4
 800d4c8:	4630      	mov	r0, r6
 800d4ca:	f7ff ffb7 	bl	800d43c <_Bfree>
 800d4ce:	4644      	mov	r4, r8
 800d4d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d4d4:	3501      	adds	r5, #1
 800d4d6:	615f      	str	r7, [r3, #20]
 800d4d8:	6125      	str	r5, [r4, #16]
 800d4da:	4620      	mov	r0, r4
 800d4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d4e0 <__hi0bits>:
 800d4e0:	0c02      	lsrs	r2, r0, #16
 800d4e2:	0412      	lsls	r2, r2, #16
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	b9b2      	cbnz	r2, 800d516 <__hi0bits+0x36>
 800d4e8:	0403      	lsls	r3, r0, #16
 800d4ea:	2010      	movs	r0, #16
 800d4ec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d4f0:	bf04      	itt	eq
 800d4f2:	021b      	lsleq	r3, r3, #8
 800d4f4:	3008      	addeq	r0, #8
 800d4f6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d4fa:	bf04      	itt	eq
 800d4fc:	011b      	lsleq	r3, r3, #4
 800d4fe:	3004      	addeq	r0, #4
 800d500:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d504:	bf04      	itt	eq
 800d506:	009b      	lsleq	r3, r3, #2
 800d508:	3002      	addeq	r0, #2
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	db06      	blt.n	800d51c <__hi0bits+0x3c>
 800d50e:	005b      	lsls	r3, r3, #1
 800d510:	d503      	bpl.n	800d51a <__hi0bits+0x3a>
 800d512:	3001      	adds	r0, #1
 800d514:	4770      	bx	lr
 800d516:	2000      	movs	r0, #0
 800d518:	e7e8      	b.n	800d4ec <__hi0bits+0xc>
 800d51a:	2020      	movs	r0, #32
 800d51c:	4770      	bx	lr

0800d51e <__lo0bits>:
 800d51e:	6803      	ldr	r3, [r0, #0]
 800d520:	f013 0207 	ands.w	r2, r3, #7
 800d524:	4601      	mov	r1, r0
 800d526:	d00b      	beq.n	800d540 <__lo0bits+0x22>
 800d528:	07da      	lsls	r2, r3, #31
 800d52a:	d423      	bmi.n	800d574 <__lo0bits+0x56>
 800d52c:	0798      	lsls	r0, r3, #30
 800d52e:	bf49      	itett	mi
 800d530:	085b      	lsrmi	r3, r3, #1
 800d532:	089b      	lsrpl	r3, r3, #2
 800d534:	2001      	movmi	r0, #1
 800d536:	600b      	strmi	r3, [r1, #0]
 800d538:	bf5c      	itt	pl
 800d53a:	600b      	strpl	r3, [r1, #0]
 800d53c:	2002      	movpl	r0, #2
 800d53e:	4770      	bx	lr
 800d540:	b298      	uxth	r0, r3
 800d542:	b9a8      	cbnz	r0, 800d570 <__lo0bits+0x52>
 800d544:	0c1b      	lsrs	r3, r3, #16
 800d546:	2010      	movs	r0, #16
 800d548:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d54c:	bf04      	itt	eq
 800d54e:	0a1b      	lsreq	r3, r3, #8
 800d550:	3008      	addeq	r0, #8
 800d552:	071a      	lsls	r2, r3, #28
 800d554:	bf04      	itt	eq
 800d556:	091b      	lsreq	r3, r3, #4
 800d558:	3004      	addeq	r0, #4
 800d55a:	079a      	lsls	r2, r3, #30
 800d55c:	bf04      	itt	eq
 800d55e:	089b      	lsreq	r3, r3, #2
 800d560:	3002      	addeq	r0, #2
 800d562:	07da      	lsls	r2, r3, #31
 800d564:	d402      	bmi.n	800d56c <__lo0bits+0x4e>
 800d566:	085b      	lsrs	r3, r3, #1
 800d568:	d006      	beq.n	800d578 <__lo0bits+0x5a>
 800d56a:	3001      	adds	r0, #1
 800d56c:	600b      	str	r3, [r1, #0]
 800d56e:	4770      	bx	lr
 800d570:	4610      	mov	r0, r2
 800d572:	e7e9      	b.n	800d548 <__lo0bits+0x2a>
 800d574:	2000      	movs	r0, #0
 800d576:	4770      	bx	lr
 800d578:	2020      	movs	r0, #32
 800d57a:	4770      	bx	lr

0800d57c <__i2b>:
 800d57c:	b510      	push	{r4, lr}
 800d57e:	460c      	mov	r4, r1
 800d580:	2101      	movs	r1, #1
 800d582:	f7ff ff27 	bl	800d3d4 <_Balloc>
 800d586:	2201      	movs	r2, #1
 800d588:	6144      	str	r4, [r0, #20]
 800d58a:	6102      	str	r2, [r0, #16]
 800d58c:	bd10      	pop	{r4, pc}

0800d58e <__multiply>:
 800d58e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d592:	4614      	mov	r4, r2
 800d594:	690a      	ldr	r2, [r1, #16]
 800d596:	6923      	ldr	r3, [r4, #16]
 800d598:	429a      	cmp	r2, r3
 800d59a:	bfb8      	it	lt
 800d59c:	460b      	movlt	r3, r1
 800d59e:	4688      	mov	r8, r1
 800d5a0:	bfbc      	itt	lt
 800d5a2:	46a0      	movlt	r8, r4
 800d5a4:	461c      	movlt	r4, r3
 800d5a6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d5aa:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d5ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d5b2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d5b6:	eb07 0609 	add.w	r6, r7, r9
 800d5ba:	42b3      	cmp	r3, r6
 800d5bc:	bfb8      	it	lt
 800d5be:	3101      	addlt	r1, #1
 800d5c0:	f7ff ff08 	bl	800d3d4 <_Balloc>
 800d5c4:	f100 0514 	add.w	r5, r0, #20
 800d5c8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d5cc:	462b      	mov	r3, r5
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	4573      	cmp	r3, lr
 800d5d2:	d316      	bcc.n	800d602 <__multiply+0x74>
 800d5d4:	f104 0214 	add.w	r2, r4, #20
 800d5d8:	f108 0114 	add.w	r1, r8, #20
 800d5dc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d5e0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d5e4:	9300      	str	r3, [sp, #0]
 800d5e6:	9b00      	ldr	r3, [sp, #0]
 800d5e8:	9201      	str	r2, [sp, #4]
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	d80c      	bhi.n	800d608 <__multiply+0x7a>
 800d5ee:	2e00      	cmp	r6, #0
 800d5f0:	dd03      	ble.n	800d5fa <__multiply+0x6c>
 800d5f2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d05d      	beq.n	800d6b6 <__multiply+0x128>
 800d5fa:	6106      	str	r6, [r0, #16]
 800d5fc:	b003      	add	sp, #12
 800d5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d602:	f843 2b04 	str.w	r2, [r3], #4
 800d606:	e7e3      	b.n	800d5d0 <__multiply+0x42>
 800d608:	f8b2 b000 	ldrh.w	fp, [r2]
 800d60c:	f1bb 0f00 	cmp.w	fp, #0
 800d610:	d023      	beq.n	800d65a <__multiply+0xcc>
 800d612:	4689      	mov	r9, r1
 800d614:	46ac      	mov	ip, r5
 800d616:	f04f 0800 	mov.w	r8, #0
 800d61a:	f859 4b04 	ldr.w	r4, [r9], #4
 800d61e:	f8dc a000 	ldr.w	sl, [ip]
 800d622:	b2a3      	uxth	r3, r4
 800d624:	fa1f fa8a 	uxth.w	sl, sl
 800d628:	fb0b a303 	mla	r3, fp, r3, sl
 800d62c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d630:	f8dc 4000 	ldr.w	r4, [ip]
 800d634:	4443      	add	r3, r8
 800d636:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d63a:	fb0b 840a 	mla	r4, fp, sl, r8
 800d63e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d642:	46e2      	mov	sl, ip
 800d644:	b29b      	uxth	r3, r3
 800d646:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d64a:	454f      	cmp	r7, r9
 800d64c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d650:	f84a 3b04 	str.w	r3, [sl], #4
 800d654:	d82b      	bhi.n	800d6ae <__multiply+0x120>
 800d656:	f8cc 8004 	str.w	r8, [ip, #4]
 800d65a:	9b01      	ldr	r3, [sp, #4]
 800d65c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d660:	3204      	adds	r2, #4
 800d662:	f1ba 0f00 	cmp.w	sl, #0
 800d666:	d020      	beq.n	800d6aa <__multiply+0x11c>
 800d668:	682b      	ldr	r3, [r5, #0]
 800d66a:	4689      	mov	r9, r1
 800d66c:	46a8      	mov	r8, r5
 800d66e:	f04f 0b00 	mov.w	fp, #0
 800d672:	f8b9 c000 	ldrh.w	ip, [r9]
 800d676:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d67a:	fb0a 440c 	mla	r4, sl, ip, r4
 800d67e:	445c      	add	r4, fp
 800d680:	46c4      	mov	ip, r8
 800d682:	b29b      	uxth	r3, r3
 800d684:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d688:	f84c 3b04 	str.w	r3, [ip], #4
 800d68c:	f859 3b04 	ldr.w	r3, [r9], #4
 800d690:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d694:	0c1b      	lsrs	r3, r3, #16
 800d696:	fb0a b303 	mla	r3, sl, r3, fp
 800d69a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d69e:	454f      	cmp	r7, r9
 800d6a0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d6a4:	d805      	bhi.n	800d6b2 <__multiply+0x124>
 800d6a6:	f8c8 3004 	str.w	r3, [r8, #4]
 800d6aa:	3504      	adds	r5, #4
 800d6ac:	e79b      	b.n	800d5e6 <__multiply+0x58>
 800d6ae:	46d4      	mov	ip, sl
 800d6b0:	e7b3      	b.n	800d61a <__multiply+0x8c>
 800d6b2:	46e0      	mov	r8, ip
 800d6b4:	e7dd      	b.n	800d672 <__multiply+0xe4>
 800d6b6:	3e01      	subs	r6, #1
 800d6b8:	e799      	b.n	800d5ee <__multiply+0x60>
	...

0800d6bc <__pow5mult>:
 800d6bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6c0:	4615      	mov	r5, r2
 800d6c2:	f012 0203 	ands.w	r2, r2, #3
 800d6c6:	4606      	mov	r6, r0
 800d6c8:	460f      	mov	r7, r1
 800d6ca:	d007      	beq.n	800d6dc <__pow5mult+0x20>
 800d6cc:	3a01      	subs	r2, #1
 800d6ce:	4c21      	ldr	r4, [pc, #132]	; (800d754 <__pow5mult+0x98>)
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d6d6:	f7ff fec8 	bl	800d46a <__multadd>
 800d6da:	4607      	mov	r7, r0
 800d6dc:	10ad      	asrs	r5, r5, #2
 800d6de:	d035      	beq.n	800d74c <__pow5mult+0x90>
 800d6e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d6e2:	b93c      	cbnz	r4, 800d6f4 <__pow5mult+0x38>
 800d6e4:	2010      	movs	r0, #16
 800d6e6:	f7fe fa73 	bl	800bbd0 <malloc>
 800d6ea:	6270      	str	r0, [r6, #36]	; 0x24
 800d6ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d6f0:	6004      	str	r4, [r0, #0]
 800d6f2:	60c4      	str	r4, [r0, #12]
 800d6f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d6f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d6fc:	b94c      	cbnz	r4, 800d712 <__pow5mult+0x56>
 800d6fe:	f240 2171 	movw	r1, #625	; 0x271
 800d702:	4630      	mov	r0, r6
 800d704:	f7ff ff3a 	bl	800d57c <__i2b>
 800d708:	2300      	movs	r3, #0
 800d70a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d70e:	4604      	mov	r4, r0
 800d710:	6003      	str	r3, [r0, #0]
 800d712:	f04f 0800 	mov.w	r8, #0
 800d716:	07eb      	lsls	r3, r5, #31
 800d718:	d50a      	bpl.n	800d730 <__pow5mult+0x74>
 800d71a:	4639      	mov	r1, r7
 800d71c:	4622      	mov	r2, r4
 800d71e:	4630      	mov	r0, r6
 800d720:	f7ff ff35 	bl	800d58e <__multiply>
 800d724:	4639      	mov	r1, r7
 800d726:	4681      	mov	r9, r0
 800d728:	4630      	mov	r0, r6
 800d72a:	f7ff fe87 	bl	800d43c <_Bfree>
 800d72e:	464f      	mov	r7, r9
 800d730:	106d      	asrs	r5, r5, #1
 800d732:	d00b      	beq.n	800d74c <__pow5mult+0x90>
 800d734:	6820      	ldr	r0, [r4, #0]
 800d736:	b938      	cbnz	r0, 800d748 <__pow5mult+0x8c>
 800d738:	4622      	mov	r2, r4
 800d73a:	4621      	mov	r1, r4
 800d73c:	4630      	mov	r0, r6
 800d73e:	f7ff ff26 	bl	800d58e <__multiply>
 800d742:	6020      	str	r0, [r4, #0]
 800d744:	f8c0 8000 	str.w	r8, [r0]
 800d748:	4604      	mov	r4, r0
 800d74a:	e7e4      	b.n	800d716 <__pow5mult+0x5a>
 800d74c:	4638      	mov	r0, r7
 800d74e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d752:	bf00      	nop
 800d754:	0800e8c0 	.word	0x0800e8c0

0800d758 <__lshift>:
 800d758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d75c:	460c      	mov	r4, r1
 800d75e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d762:	6923      	ldr	r3, [r4, #16]
 800d764:	6849      	ldr	r1, [r1, #4]
 800d766:	eb0a 0903 	add.w	r9, sl, r3
 800d76a:	68a3      	ldr	r3, [r4, #8]
 800d76c:	4607      	mov	r7, r0
 800d76e:	4616      	mov	r6, r2
 800d770:	f109 0501 	add.w	r5, r9, #1
 800d774:	42ab      	cmp	r3, r5
 800d776:	db32      	blt.n	800d7de <__lshift+0x86>
 800d778:	4638      	mov	r0, r7
 800d77a:	f7ff fe2b 	bl	800d3d4 <_Balloc>
 800d77e:	2300      	movs	r3, #0
 800d780:	4680      	mov	r8, r0
 800d782:	f100 0114 	add.w	r1, r0, #20
 800d786:	461a      	mov	r2, r3
 800d788:	4553      	cmp	r3, sl
 800d78a:	db2b      	blt.n	800d7e4 <__lshift+0x8c>
 800d78c:	6920      	ldr	r0, [r4, #16]
 800d78e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d792:	f104 0314 	add.w	r3, r4, #20
 800d796:	f016 021f 	ands.w	r2, r6, #31
 800d79a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d79e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d7a2:	d025      	beq.n	800d7f0 <__lshift+0x98>
 800d7a4:	f1c2 0e20 	rsb	lr, r2, #32
 800d7a8:	2000      	movs	r0, #0
 800d7aa:	681e      	ldr	r6, [r3, #0]
 800d7ac:	468a      	mov	sl, r1
 800d7ae:	4096      	lsls	r6, r2
 800d7b0:	4330      	orrs	r0, r6
 800d7b2:	f84a 0b04 	str.w	r0, [sl], #4
 800d7b6:	f853 0b04 	ldr.w	r0, [r3], #4
 800d7ba:	459c      	cmp	ip, r3
 800d7bc:	fa20 f00e 	lsr.w	r0, r0, lr
 800d7c0:	d814      	bhi.n	800d7ec <__lshift+0x94>
 800d7c2:	6048      	str	r0, [r1, #4]
 800d7c4:	b108      	cbz	r0, 800d7ca <__lshift+0x72>
 800d7c6:	f109 0502 	add.w	r5, r9, #2
 800d7ca:	3d01      	subs	r5, #1
 800d7cc:	4638      	mov	r0, r7
 800d7ce:	f8c8 5010 	str.w	r5, [r8, #16]
 800d7d2:	4621      	mov	r1, r4
 800d7d4:	f7ff fe32 	bl	800d43c <_Bfree>
 800d7d8:	4640      	mov	r0, r8
 800d7da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7de:	3101      	adds	r1, #1
 800d7e0:	005b      	lsls	r3, r3, #1
 800d7e2:	e7c7      	b.n	800d774 <__lshift+0x1c>
 800d7e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d7e8:	3301      	adds	r3, #1
 800d7ea:	e7cd      	b.n	800d788 <__lshift+0x30>
 800d7ec:	4651      	mov	r1, sl
 800d7ee:	e7dc      	b.n	800d7aa <__lshift+0x52>
 800d7f0:	3904      	subs	r1, #4
 800d7f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7f6:	f841 2f04 	str.w	r2, [r1, #4]!
 800d7fa:	459c      	cmp	ip, r3
 800d7fc:	d8f9      	bhi.n	800d7f2 <__lshift+0x9a>
 800d7fe:	e7e4      	b.n	800d7ca <__lshift+0x72>

0800d800 <__mcmp>:
 800d800:	6903      	ldr	r3, [r0, #16]
 800d802:	690a      	ldr	r2, [r1, #16]
 800d804:	1a9b      	subs	r3, r3, r2
 800d806:	b530      	push	{r4, r5, lr}
 800d808:	d10c      	bne.n	800d824 <__mcmp+0x24>
 800d80a:	0092      	lsls	r2, r2, #2
 800d80c:	3014      	adds	r0, #20
 800d80e:	3114      	adds	r1, #20
 800d810:	1884      	adds	r4, r0, r2
 800d812:	4411      	add	r1, r2
 800d814:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d818:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d81c:	4295      	cmp	r5, r2
 800d81e:	d003      	beq.n	800d828 <__mcmp+0x28>
 800d820:	d305      	bcc.n	800d82e <__mcmp+0x2e>
 800d822:	2301      	movs	r3, #1
 800d824:	4618      	mov	r0, r3
 800d826:	bd30      	pop	{r4, r5, pc}
 800d828:	42a0      	cmp	r0, r4
 800d82a:	d3f3      	bcc.n	800d814 <__mcmp+0x14>
 800d82c:	e7fa      	b.n	800d824 <__mcmp+0x24>
 800d82e:	f04f 33ff 	mov.w	r3, #4294967295
 800d832:	e7f7      	b.n	800d824 <__mcmp+0x24>

0800d834 <__mdiff>:
 800d834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d838:	460d      	mov	r5, r1
 800d83a:	4607      	mov	r7, r0
 800d83c:	4611      	mov	r1, r2
 800d83e:	4628      	mov	r0, r5
 800d840:	4614      	mov	r4, r2
 800d842:	f7ff ffdd 	bl	800d800 <__mcmp>
 800d846:	1e06      	subs	r6, r0, #0
 800d848:	d108      	bne.n	800d85c <__mdiff+0x28>
 800d84a:	4631      	mov	r1, r6
 800d84c:	4638      	mov	r0, r7
 800d84e:	f7ff fdc1 	bl	800d3d4 <_Balloc>
 800d852:	2301      	movs	r3, #1
 800d854:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d85c:	bfa4      	itt	ge
 800d85e:	4623      	movge	r3, r4
 800d860:	462c      	movge	r4, r5
 800d862:	4638      	mov	r0, r7
 800d864:	6861      	ldr	r1, [r4, #4]
 800d866:	bfa6      	itte	ge
 800d868:	461d      	movge	r5, r3
 800d86a:	2600      	movge	r6, #0
 800d86c:	2601      	movlt	r6, #1
 800d86e:	f7ff fdb1 	bl	800d3d4 <_Balloc>
 800d872:	692b      	ldr	r3, [r5, #16]
 800d874:	60c6      	str	r6, [r0, #12]
 800d876:	6926      	ldr	r6, [r4, #16]
 800d878:	f105 0914 	add.w	r9, r5, #20
 800d87c:	f104 0214 	add.w	r2, r4, #20
 800d880:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d884:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d888:	f100 0514 	add.w	r5, r0, #20
 800d88c:	f04f 0e00 	mov.w	lr, #0
 800d890:	f852 ab04 	ldr.w	sl, [r2], #4
 800d894:	f859 4b04 	ldr.w	r4, [r9], #4
 800d898:	fa1e f18a 	uxtah	r1, lr, sl
 800d89c:	b2a3      	uxth	r3, r4
 800d89e:	1ac9      	subs	r1, r1, r3
 800d8a0:	0c23      	lsrs	r3, r4, #16
 800d8a2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800d8a6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d8aa:	b289      	uxth	r1, r1
 800d8ac:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d8b0:	45c8      	cmp	r8, r9
 800d8b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d8b6:	4694      	mov	ip, r2
 800d8b8:	f845 3b04 	str.w	r3, [r5], #4
 800d8bc:	d8e8      	bhi.n	800d890 <__mdiff+0x5c>
 800d8be:	45bc      	cmp	ip, r7
 800d8c0:	d304      	bcc.n	800d8cc <__mdiff+0x98>
 800d8c2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d8c6:	b183      	cbz	r3, 800d8ea <__mdiff+0xb6>
 800d8c8:	6106      	str	r6, [r0, #16]
 800d8ca:	e7c5      	b.n	800d858 <__mdiff+0x24>
 800d8cc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d8d0:	fa1e f381 	uxtah	r3, lr, r1
 800d8d4:	141a      	asrs	r2, r3, #16
 800d8d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d8da:	b29b      	uxth	r3, r3
 800d8dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d8e0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d8e4:	f845 3b04 	str.w	r3, [r5], #4
 800d8e8:	e7e9      	b.n	800d8be <__mdiff+0x8a>
 800d8ea:	3e01      	subs	r6, #1
 800d8ec:	e7e9      	b.n	800d8c2 <__mdiff+0x8e>

0800d8ee <__d2b>:
 800d8ee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d8f2:	460e      	mov	r6, r1
 800d8f4:	2101      	movs	r1, #1
 800d8f6:	ec59 8b10 	vmov	r8, r9, d0
 800d8fa:	4615      	mov	r5, r2
 800d8fc:	f7ff fd6a 	bl	800d3d4 <_Balloc>
 800d900:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d904:	4607      	mov	r7, r0
 800d906:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d90a:	bb34      	cbnz	r4, 800d95a <__d2b+0x6c>
 800d90c:	9301      	str	r3, [sp, #4]
 800d90e:	f1b8 0300 	subs.w	r3, r8, #0
 800d912:	d027      	beq.n	800d964 <__d2b+0x76>
 800d914:	a802      	add	r0, sp, #8
 800d916:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d91a:	f7ff fe00 	bl	800d51e <__lo0bits>
 800d91e:	9900      	ldr	r1, [sp, #0]
 800d920:	b1f0      	cbz	r0, 800d960 <__d2b+0x72>
 800d922:	9a01      	ldr	r2, [sp, #4]
 800d924:	f1c0 0320 	rsb	r3, r0, #32
 800d928:	fa02 f303 	lsl.w	r3, r2, r3
 800d92c:	430b      	orrs	r3, r1
 800d92e:	40c2      	lsrs	r2, r0
 800d930:	617b      	str	r3, [r7, #20]
 800d932:	9201      	str	r2, [sp, #4]
 800d934:	9b01      	ldr	r3, [sp, #4]
 800d936:	61bb      	str	r3, [r7, #24]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	bf14      	ite	ne
 800d93c:	2102      	movne	r1, #2
 800d93e:	2101      	moveq	r1, #1
 800d940:	6139      	str	r1, [r7, #16]
 800d942:	b1c4      	cbz	r4, 800d976 <__d2b+0x88>
 800d944:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d948:	4404      	add	r4, r0
 800d94a:	6034      	str	r4, [r6, #0]
 800d94c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d950:	6028      	str	r0, [r5, #0]
 800d952:	4638      	mov	r0, r7
 800d954:	b003      	add	sp, #12
 800d956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d95a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d95e:	e7d5      	b.n	800d90c <__d2b+0x1e>
 800d960:	6179      	str	r1, [r7, #20]
 800d962:	e7e7      	b.n	800d934 <__d2b+0x46>
 800d964:	a801      	add	r0, sp, #4
 800d966:	f7ff fdda 	bl	800d51e <__lo0bits>
 800d96a:	9b01      	ldr	r3, [sp, #4]
 800d96c:	617b      	str	r3, [r7, #20]
 800d96e:	2101      	movs	r1, #1
 800d970:	6139      	str	r1, [r7, #16]
 800d972:	3020      	adds	r0, #32
 800d974:	e7e5      	b.n	800d942 <__d2b+0x54>
 800d976:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d97a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d97e:	6030      	str	r0, [r6, #0]
 800d980:	6918      	ldr	r0, [r3, #16]
 800d982:	f7ff fdad 	bl	800d4e0 <__hi0bits>
 800d986:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d98a:	e7e1      	b.n	800d950 <__d2b+0x62>

0800d98c <_calloc_r>:
 800d98c:	b538      	push	{r3, r4, r5, lr}
 800d98e:	fb02 f401 	mul.w	r4, r2, r1
 800d992:	4621      	mov	r1, r4
 800d994:	f7fe f98e 	bl	800bcb4 <_malloc_r>
 800d998:	4605      	mov	r5, r0
 800d99a:	b118      	cbz	r0, 800d9a4 <_calloc_r+0x18>
 800d99c:	4622      	mov	r2, r4
 800d99e:	2100      	movs	r1, #0
 800d9a0:	f7fe f931 	bl	800bc06 <memset>
 800d9a4:	4628      	mov	r0, r5
 800d9a6:	bd38      	pop	{r3, r4, r5, pc}

0800d9a8 <__ssputs_r>:
 800d9a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9ac:	688e      	ldr	r6, [r1, #8]
 800d9ae:	429e      	cmp	r6, r3
 800d9b0:	4682      	mov	sl, r0
 800d9b2:	460c      	mov	r4, r1
 800d9b4:	4690      	mov	r8, r2
 800d9b6:	4699      	mov	r9, r3
 800d9b8:	d837      	bhi.n	800da2a <__ssputs_r+0x82>
 800d9ba:	898a      	ldrh	r2, [r1, #12]
 800d9bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d9c0:	d031      	beq.n	800da26 <__ssputs_r+0x7e>
 800d9c2:	6825      	ldr	r5, [r4, #0]
 800d9c4:	6909      	ldr	r1, [r1, #16]
 800d9c6:	1a6f      	subs	r7, r5, r1
 800d9c8:	6965      	ldr	r5, [r4, #20]
 800d9ca:	2302      	movs	r3, #2
 800d9cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d9d0:	fb95 f5f3 	sdiv	r5, r5, r3
 800d9d4:	f109 0301 	add.w	r3, r9, #1
 800d9d8:	443b      	add	r3, r7
 800d9da:	429d      	cmp	r5, r3
 800d9dc:	bf38      	it	cc
 800d9de:	461d      	movcc	r5, r3
 800d9e0:	0553      	lsls	r3, r2, #21
 800d9e2:	d530      	bpl.n	800da46 <__ssputs_r+0x9e>
 800d9e4:	4629      	mov	r1, r5
 800d9e6:	f7fe f965 	bl	800bcb4 <_malloc_r>
 800d9ea:	4606      	mov	r6, r0
 800d9ec:	b950      	cbnz	r0, 800da04 <__ssputs_r+0x5c>
 800d9ee:	230c      	movs	r3, #12
 800d9f0:	f8ca 3000 	str.w	r3, [sl]
 800d9f4:	89a3      	ldrh	r3, [r4, #12]
 800d9f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9fa:	81a3      	strh	r3, [r4, #12]
 800d9fc:	f04f 30ff 	mov.w	r0, #4294967295
 800da00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da04:	463a      	mov	r2, r7
 800da06:	6921      	ldr	r1, [r4, #16]
 800da08:	f7fe f8f2 	bl	800bbf0 <memcpy>
 800da0c:	89a3      	ldrh	r3, [r4, #12]
 800da0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800da12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da16:	81a3      	strh	r3, [r4, #12]
 800da18:	6126      	str	r6, [r4, #16]
 800da1a:	6165      	str	r5, [r4, #20]
 800da1c:	443e      	add	r6, r7
 800da1e:	1bed      	subs	r5, r5, r7
 800da20:	6026      	str	r6, [r4, #0]
 800da22:	60a5      	str	r5, [r4, #8]
 800da24:	464e      	mov	r6, r9
 800da26:	454e      	cmp	r6, r9
 800da28:	d900      	bls.n	800da2c <__ssputs_r+0x84>
 800da2a:	464e      	mov	r6, r9
 800da2c:	4632      	mov	r2, r6
 800da2e:	4641      	mov	r1, r8
 800da30:	6820      	ldr	r0, [r4, #0]
 800da32:	f000 fca9 	bl	800e388 <memmove>
 800da36:	68a3      	ldr	r3, [r4, #8]
 800da38:	1b9b      	subs	r3, r3, r6
 800da3a:	60a3      	str	r3, [r4, #8]
 800da3c:	6823      	ldr	r3, [r4, #0]
 800da3e:	441e      	add	r6, r3
 800da40:	6026      	str	r6, [r4, #0]
 800da42:	2000      	movs	r0, #0
 800da44:	e7dc      	b.n	800da00 <__ssputs_r+0x58>
 800da46:	462a      	mov	r2, r5
 800da48:	f000 fcb7 	bl	800e3ba <_realloc_r>
 800da4c:	4606      	mov	r6, r0
 800da4e:	2800      	cmp	r0, #0
 800da50:	d1e2      	bne.n	800da18 <__ssputs_r+0x70>
 800da52:	6921      	ldr	r1, [r4, #16]
 800da54:	4650      	mov	r0, sl
 800da56:	f7fe f8df 	bl	800bc18 <_free_r>
 800da5a:	e7c8      	b.n	800d9ee <__ssputs_r+0x46>

0800da5c <_svfiprintf_r>:
 800da5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da60:	461d      	mov	r5, r3
 800da62:	898b      	ldrh	r3, [r1, #12]
 800da64:	061f      	lsls	r7, r3, #24
 800da66:	b09d      	sub	sp, #116	; 0x74
 800da68:	4680      	mov	r8, r0
 800da6a:	460c      	mov	r4, r1
 800da6c:	4616      	mov	r6, r2
 800da6e:	d50f      	bpl.n	800da90 <_svfiprintf_r+0x34>
 800da70:	690b      	ldr	r3, [r1, #16]
 800da72:	b96b      	cbnz	r3, 800da90 <_svfiprintf_r+0x34>
 800da74:	2140      	movs	r1, #64	; 0x40
 800da76:	f7fe f91d 	bl	800bcb4 <_malloc_r>
 800da7a:	6020      	str	r0, [r4, #0]
 800da7c:	6120      	str	r0, [r4, #16]
 800da7e:	b928      	cbnz	r0, 800da8c <_svfiprintf_r+0x30>
 800da80:	230c      	movs	r3, #12
 800da82:	f8c8 3000 	str.w	r3, [r8]
 800da86:	f04f 30ff 	mov.w	r0, #4294967295
 800da8a:	e0c8      	b.n	800dc1e <_svfiprintf_r+0x1c2>
 800da8c:	2340      	movs	r3, #64	; 0x40
 800da8e:	6163      	str	r3, [r4, #20]
 800da90:	2300      	movs	r3, #0
 800da92:	9309      	str	r3, [sp, #36]	; 0x24
 800da94:	2320      	movs	r3, #32
 800da96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da9a:	2330      	movs	r3, #48	; 0x30
 800da9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800daa0:	9503      	str	r5, [sp, #12]
 800daa2:	f04f 0b01 	mov.w	fp, #1
 800daa6:	4637      	mov	r7, r6
 800daa8:	463d      	mov	r5, r7
 800daaa:	f815 3b01 	ldrb.w	r3, [r5], #1
 800daae:	b10b      	cbz	r3, 800dab4 <_svfiprintf_r+0x58>
 800dab0:	2b25      	cmp	r3, #37	; 0x25
 800dab2:	d13e      	bne.n	800db32 <_svfiprintf_r+0xd6>
 800dab4:	ebb7 0a06 	subs.w	sl, r7, r6
 800dab8:	d00b      	beq.n	800dad2 <_svfiprintf_r+0x76>
 800daba:	4653      	mov	r3, sl
 800dabc:	4632      	mov	r2, r6
 800dabe:	4621      	mov	r1, r4
 800dac0:	4640      	mov	r0, r8
 800dac2:	f7ff ff71 	bl	800d9a8 <__ssputs_r>
 800dac6:	3001      	adds	r0, #1
 800dac8:	f000 80a4 	beq.w	800dc14 <_svfiprintf_r+0x1b8>
 800dacc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dace:	4453      	add	r3, sl
 800dad0:	9309      	str	r3, [sp, #36]	; 0x24
 800dad2:	783b      	ldrb	r3, [r7, #0]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	f000 809d 	beq.w	800dc14 <_svfiprintf_r+0x1b8>
 800dada:	2300      	movs	r3, #0
 800dadc:	f04f 32ff 	mov.w	r2, #4294967295
 800dae0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dae4:	9304      	str	r3, [sp, #16]
 800dae6:	9307      	str	r3, [sp, #28]
 800dae8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800daec:	931a      	str	r3, [sp, #104]	; 0x68
 800daee:	462f      	mov	r7, r5
 800daf0:	2205      	movs	r2, #5
 800daf2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800daf6:	4850      	ldr	r0, [pc, #320]	; (800dc38 <_svfiprintf_r+0x1dc>)
 800daf8:	f7f2 fbaa 	bl	8000250 <memchr>
 800dafc:	9b04      	ldr	r3, [sp, #16]
 800dafe:	b9d0      	cbnz	r0, 800db36 <_svfiprintf_r+0xda>
 800db00:	06d9      	lsls	r1, r3, #27
 800db02:	bf44      	itt	mi
 800db04:	2220      	movmi	r2, #32
 800db06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800db0a:	071a      	lsls	r2, r3, #28
 800db0c:	bf44      	itt	mi
 800db0e:	222b      	movmi	r2, #43	; 0x2b
 800db10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800db14:	782a      	ldrb	r2, [r5, #0]
 800db16:	2a2a      	cmp	r2, #42	; 0x2a
 800db18:	d015      	beq.n	800db46 <_svfiprintf_r+0xea>
 800db1a:	9a07      	ldr	r2, [sp, #28]
 800db1c:	462f      	mov	r7, r5
 800db1e:	2000      	movs	r0, #0
 800db20:	250a      	movs	r5, #10
 800db22:	4639      	mov	r1, r7
 800db24:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db28:	3b30      	subs	r3, #48	; 0x30
 800db2a:	2b09      	cmp	r3, #9
 800db2c:	d94d      	bls.n	800dbca <_svfiprintf_r+0x16e>
 800db2e:	b1b8      	cbz	r0, 800db60 <_svfiprintf_r+0x104>
 800db30:	e00f      	b.n	800db52 <_svfiprintf_r+0xf6>
 800db32:	462f      	mov	r7, r5
 800db34:	e7b8      	b.n	800daa8 <_svfiprintf_r+0x4c>
 800db36:	4a40      	ldr	r2, [pc, #256]	; (800dc38 <_svfiprintf_r+0x1dc>)
 800db38:	1a80      	subs	r0, r0, r2
 800db3a:	fa0b f000 	lsl.w	r0, fp, r0
 800db3e:	4318      	orrs	r0, r3
 800db40:	9004      	str	r0, [sp, #16]
 800db42:	463d      	mov	r5, r7
 800db44:	e7d3      	b.n	800daee <_svfiprintf_r+0x92>
 800db46:	9a03      	ldr	r2, [sp, #12]
 800db48:	1d11      	adds	r1, r2, #4
 800db4a:	6812      	ldr	r2, [r2, #0]
 800db4c:	9103      	str	r1, [sp, #12]
 800db4e:	2a00      	cmp	r2, #0
 800db50:	db01      	blt.n	800db56 <_svfiprintf_r+0xfa>
 800db52:	9207      	str	r2, [sp, #28]
 800db54:	e004      	b.n	800db60 <_svfiprintf_r+0x104>
 800db56:	4252      	negs	r2, r2
 800db58:	f043 0302 	orr.w	r3, r3, #2
 800db5c:	9207      	str	r2, [sp, #28]
 800db5e:	9304      	str	r3, [sp, #16]
 800db60:	783b      	ldrb	r3, [r7, #0]
 800db62:	2b2e      	cmp	r3, #46	; 0x2e
 800db64:	d10c      	bne.n	800db80 <_svfiprintf_r+0x124>
 800db66:	787b      	ldrb	r3, [r7, #1]
 800db68:	2b2a      	cmp	r3, #42	; 0x2a
 800db6a:	d133      	bne.n	800dbd4 <_svfiprintf_r+0x178>
 800db6c:	9b03      	ldr	r3, [sp, #12]
 800db6e:	1d1a      	adds	r2, r3, #4
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	9203      	str	r2, [sp, #12]
 800db74:	2b00      	cmp	r3, #0
 800db76:	bfb8      	it	lt
 800db78:	f04f 33ff 	movlt.w	r3, #4294967295
 800db7c:	3702      	adds	r7, #2
 800db7e:	9305      	str	r3, [sp, #20]
 800db80:	4d2e      	ldr	r5, [pc, #184]	; (800dc3c <_svfiprintf_r+0x1e0>)
 800db82:	7839      	ldrb	r1, [r7, #0]
 800db84:	2203      	movs	r2, #3
 800db86:	4628      	mov	r0, r5
 800db88:	f7f2 fb62 	bl	8000250 <memchr>
 800db8c:	b138      	cbz	r0, 800db9e <_svfiprintf_r+0x142>
 800db8e:	2340      	movs	r3, #64	; 0x40
 800db90:	1b40      	subs	r0, r0, r5
 800db92:	fa03 f000 	lsl.w	r0, r3, r0
 800db96:	9b04      	ldr	r3, [sp, #16]
 800db98:	4303      	orrs	r3, r0
 800db9a:	3701      	adds	r7, #1
 800db9c:	9304      	str	r3, [sp, #16]
 800db9e:	7839      	ldrb	r1, [r7, #0]
 800dba0:	4827      	ldr	r0, [pc, #156]	; (800dc40 <_svfiprintf_r+0x1e4>)
 800dba2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dba6:	2206      	movs	r2, #6
 800dba8:	1c7e      	adds	r6, r7, #1
 800dbaa:	f7f2 fb51 	bl	8000250 <memchr>
 800dbae:	2800      	cmp	r0, #0
 800dbb0:	d038      	beq.n	800dc24 <_svfiprintf_r+0x1c8>
 800dbb2:	4b24      	ldr	r3, [pc, #144]	; (800dc44 <_svfiprintf_r+0x1e8>)
 800dbb4:	bb13      	cbnz	r3, 800dbfc <_svfiprintf_r+0x1a0>
 800dbb6:	9b03      	ldr	r3, [sp, #12]
 800dbb8:	3307      	adds	r3, #7
 800dbba:	f023 0307 	bic.w	r3, r3, #7
 800dbbe:	3308      	adds	r3, #8
 800dbc0:	9303      	str	r3, [sp, #12]
 800dbc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbc4:	444b      	add	r3, r9
 800dbc6:	9309      	str	r3, [sp, #36]	; 0x24
 800dbc8:	e76d      	b.n	800daa6 <_svfiprintf_r+0x4a>
 800dbca:	fb05 3202 	mla	r2, r5, r2, r3
 800dbce:	2001      	movs	r0, #1
 800dbd0:	460f      	mov	r7, r1
 800dbd2:	e7a6      	b.n	800db22 <_svfiprintf_r+0xc6>
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	3701      	adds	r7, #1
 800dbd8:	9305      	str	r3, [sp, #20]
 800dbda:	4619      	mov	r1, r3
 800dbdc:	250a      	movs	r5, #10
 800dbde:	4638      	mov	r0, r7
 800dbe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbe4:	3a30      	subs	r2, #48	; 0x30
 800dbe6:	2a09      	cmp	r2, #9
 800dbe8:	d903      	bls.n	800dbf2 <_svfiprintf_r+0x196>
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d0c8      	beq.n	800db80 <_svfiprintf_r+0x124>
 800dbee:	9105      	str	r1, [sp, #20]
 800dbf0:	e7c6      	b.n	800db80 <_svfiprintf_r+0x124>
 800dbf2:	fb05 2101 	mla	r1, r5, r1, r2
 800dbf6:	2301      	movs	r3, #1
 800dbf8:	4607      	mov	r7, r0
 800dbfa:	e7f0      	b.n	800dbde <_svfiprintf_r+0x182>
 800dbfc:	ab03      	add	r3, sp, #12
 800dbfe:	9300      	str	r3, [sp, #0]
 800dc00:	4622      	mov	r2, r4
 800dc02:	4b11      	ldr	r3, [pc, #68]	; (800dc48 <_svfiprintf_r+0x1ec>)
 800dc04:	a904      	add	r1, sp, #16
 800dc06:	4640      	mov	r0, r8
 800dc08:	f7fe f936 	bl	800be78 <_printf_float>
 800dc0c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800dc10:	4681      	mov	r9, r0
 800dc12:	d1d6      	bne.n	800dbc2 <_svfiprintf_r+0x166>
 800dc14:	89a3      	ldrh	r3, [r4, #12]
 800dc16:	065b      	lsls	r3, r3, #25
 800dc18:	f53f af35 	bmi.w	800da86 <_svfiprintf_r+0x2a>
 800dc1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc1e:	b01d      	add	sp, #116	; 0x74
 800dc20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc24:	ab03      	add	r3, sp, #12
 800dc26:	9300      	str	r3, [sp, #0]
 800dc28:	4622      	mov	r2, r4
 800dc2a:	4b07      	ldr	r3, [pc, #28]	; (800dc48 <_svfiprintf_r+0x1ec>)
 800dc2c:	a904      	add	r1, sp, #16
 800dc2e:	4640      	mov	r0, r8
 800dc30:	f7fe fbc4 	bl	800c3bc <_printf_i>
 800dc34:	e7ea      	b.n	800dc0c <_svfiprintf_r+0x1b0>
 800dc36:	bf00      	nop
 800dc38:	0800e8cc 	.word	0x0800e8cc
 800dc3c:	0800e8d2 	.word	0x0800e8d2
 800dc40:	0800e8d6 	.word	0x0800e8d6
 800dc44:	0800be79 	.word	0x0800be79
 800dc48:	0800d9a9 	.word	0x0800d9a9

0800dc4c <__sfputc_r>:
 800dc4c:	6893      	ldr	r3, [r2, #8]
 800dc4e:	3b01      	subs	r3, #1
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	b410      	push	{r4}
 800dc54:	6093      	str	r3, [r2, #8]
 800dc56:	da08      	bge.n	800dc6a <__sfputc_r+0x1e>
 800dc58:	6994      	ldr	r4, [r2, #24]
 800dc5a:	42a3      	cmp	r3, r4
 800dc5c:	db01      	blt.n	800dc62 <__sfputc_r+0x16>
 800dc5e:	290a      	cmp	r1, #10
 800dc60:	d103      	bne.n	800dc6a <__sfputc_r+0x1e>
 800dc62:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc66:	f000 b975 	b.w	800df54 <__swbuf_r>
 800dc6a:	6813      	ldr	r3, [r2, #0]
 800dc6c:	1c58      	adds	r0, r3, #1
 800dc6e:	6010      	str	r0, [r2, #0]
 800dc70:	7019      	strb	r1, [r3, #0]
 800dc72:	4608      	mov	r0, r1
 800dc74:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc78:	4770      	bx	lr

0800dc7a <__sfputs_r>:
 800dc7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc7c:	4606      	mov	r6, r0
 800dc7e:	460f      	mov	r7, r1
 800dc80:	4614      	mov	r4, r2
 800dc82:	18d5      	adds	r5, r2, r3
 800dc84:	42ac      	cmp	r4, r5
 800dc86:	d101      	bne.n	800dc8c <__sfputs_r+0x12>
 800dc88:	2000      	movs	r0, #0
 800dc8a:	e007      	b.n	800dc9c <__sfputs_r+0x22>
 800dc8c:	463a      	mov	r2, r7
 800dc8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc92:	4630      	mov	r0, r6
 800dc94:	f7ff ffda 	bl	800dc4c <__sfputc_r>
 800dc98:	1c43      	adds	r3, r0, #1
 800dc9a:	d1f3      	bne.n	800dc84 <__sfputs_r+0xa>
 800dc9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dca0 <_vfiprintf_r>:
 800dca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dca4:	460c      	mov	r4, r1
 800dca6:	b09d      	sub	sp, #116	; 0x74
 800dca8:	4617      	mov	r7, r2
 800dcaa:	461d      	mov	r5, r3
 800dcac:	4606      	mov	r6, r0
 800dcae:	b118      	cbz	r0, 800dcb8 <_vfiprintf_r+0x18>
 800dcb0:	6983      	ldr	r3, [r0, #24]
 800dcb2:	b90b      	cbnz	r3, 800dcb8 <_vfiprintf_r+0x18>
 800dcb4:	f7ff faf4 	bl	800d2a0 <__sinit>
 800dcb8:	4b7c      	ldr	r3, [pc, #496]	; (800deac <_vfiprintf_r+0x20c>)
 800dcba:	429c      	cmp	r4, r3
 800dcbc:	d158      	bne.n	800dd70 <_vfiprintf_r+0xd0>
 800dcbe:	6874      	ldr	r4, [r6, #4]
 800dcc0:	89a3      	ldrh	r3, [r4, #12]
 800dcc2:	0718      	lsls	r0, r3, #28
 800dcc4:	d55e      	bpl.n	800dd84 <_vfiprintf_r+0xe4>
 800dcc6:	6923      	ldr	r3, [r4, #16]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d05b      	beq.n	800dd84 <_vfiprintf_r+0xe4>
 800dccc:	2300      	movs	r3, #0
 800dcce:	9309      	str	r3, [sp, #36]	; 0x24
 800dcd0:	2320      	movs	r3, #32
 800dcd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dcd6:	2330      	movs	r3, #48	; 0x30
 800dcd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dcdc:	9503      	str	r5, [sp, #12]
 800dcde:	f04f 0b01 	mov.w	fp, #1
 800dce2:	46b8      	mov	r8, r7
 800dce4:	4645      	mov	r5, r8
 800dce6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dcea:	b10b      	cbz	r3, 800dcf0 <_vfiprintf_r+0x50>
 800dcec:	2b25      	cmp	r3, #37	; 0x25
 800dcee:	d154      	bne.n	800dd9a <_vfiprintf_r+0xfa>
 800dcf0:	ebb8 0a07 	subs.w	sl, r8, r7
 800dcf4:	d00b      	beq.n	800dd0e <_vfiprintf_r+0x6e>
 800dcf6:	4653      	mov	r3, sl
 800dcf8:	463a      	mov	r2, r7
 800dcfa:	4621      	mov	r1, r4
 800dcfc:	4630      	mov	r0, r6
 800dcfe:	f7ff ffbc 	bl	800dc7a <__sfputs_r>
 800dd02:	3001      	adds	r0, #1
 800dd04:	f000 80c2 	beq.w	800de8c <_vfiprintf_r+0x1ec>
 800dd08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd0a:	4453      	add	r3, sl
 800dd0c:	9309      	str	r3, [sp, #36]	; 0x24
 800dd0e:	f898 3000 	ldrb.w	r3, [r8]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	f000 80ba 	beq.w	800de8c <_vfiprintf_r+0x1ec>
 800dd18:	2300      	movs	r3, #0
 800dd1a:	f04f 32ff 	mov.w	r2, #4294967295
 800dd1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd22:	9304      	str	r3, [sp, #16]
 800dd24:	9307      	str	r3, [sp, #28]
 800dd26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd2a:	931a      	str	r3, [sp, #104]	; 0x68
 800dd2c:	46a8      	mov	r8, r5
 800dd2e:	2205      	movs	r2, #5
 800dd30:	f818 1b01 	ldrb.w	r1, [r8], #1
 800dd34:	485e      	ldr	r0, [pc, #376]	; (800deb0 <_vfiprintf_r+0x210>)
 800dd36:	f7f2 fa8b 	bl	8000250 <memchr>
 800dd3a:	9b04      	ldr	r3, [sp, #16]
 800dd3c:	bb78      	cbnz	r0, 800dd9e <_vfiprintf_r+0xfe>
 800dd3e:	06d9      	lsls	r1, r3, #27
 800dd40:	bf44      	itt	mi
 800dd42:	2220      	movmi	r2, #32
 800dd44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dd48:	071a      	lsls	r2, r3, #28
 800dd4a:	bf44      	itt	mi
 800dd4c:	222b      	movmi	r2, #43	; 0x2b
 800dd4e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dd52:	782a      	ldrb	r2, [r5, #0]
 800dd54:	2a2a      	cmp	r2, #42	; 0x2a
 800dd56:	d02a      	beq.n	800ddae <_vfiprintf_r+0x10e>
 800dd58:	9a07      	ldr	r2, [sp, #28]
 800dd5a:	46a8      	mov	r8, r5
 800dd5c:	2000      	movs	r0, #0
 800dd5e:	250a      	movs	r5, #10
 800dd60:	4641      	mov	r1, r8
 800dd62:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd66:	3b30      	subs	r3, #48	; 0x30
 800dd68:	2b09      	cmp	r3, #9
 800dd6a:	d969      	bls.n	800de40 <_vfiprintf_r+0x1a0>
 800dd6c:	b360      	cbz	r0, 800ddc8 <_vfiprintf_r+0x128>
 800dd6e:	e024      	b.n	800ddba <_vfiprintf_r+0x11a>
 800dd70:	4b50      	ldr	r3, [pc, #320]	; (800deb4 <_vfiprintf_r+0x214>)
 800dd72:	429c      	cmp	r4, r3
 800dd74:	d101      	bne.n	800dd7a <_vfiprintf_r+0xda>
 800dd76:	68b4      	ldr	r4, [r6, #8]
 800dd78:	e7a2      	b.n	800dcc0 <_vfiprintf_r+0x20>
 800dd7a:	4b4f      	ldr	r3, [pc, #316]	; (800deb8 <_vfiprintf_r+0x218>)
 800dd7c:	429c      	cmp	r4, r3
 800dd7e:	bf08      	it	eq
 800dd80:	68f4      	ldreq	r4, [r6, #12]
 800dd82:	e79d      	b.n	800dcc0 <_vfiprintf_r+0x20>
 800dd84:	4621      	mov	r1, r4
 800dd86:	4630      	mov	r0, r6
 800dd88:	f000 f948 	bl	800e01c <__swsetup_r>
 800dd8c:	2800      	cmp	r0, #0
 800dd8e:	d09d      	beq.n	800dccc <_vfiprintf_r+0x2c>
 800dd90:	f04f 30ff 	mov.w	r0, #4294967295
 800dd94:	b01d      	add	sp, #116	; 0x74
 800dd96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd9a:	46a8      	mov	r8, r5
 800dd9c:	e7a2      	b.n	800dce4 <_vfiprintf_r+0x44>
 800dd9e:	4a44      	ldr	r2, [pc, #272]	; (800deb0 <_vfiprintf_r+0x210>)
 800dda0:	1a80      	subs	r0, r0, r2
 800dda2:	fa0b f000 	lsl.w	r0, fp, r0
 800dda6:	4318      	orrs	r0, r3
 800dda8:	9004      	str	r0, [sp, #16]
 800ddaa:	4645      	mov	r5, r8
 800ddac:	e7be      	b.n	800dd2c <_vfiprintf_r+0x8c>
 800ddae:	9a03      	ldr	r2, [sp, #12]
 800ddb0:	1d11      	adds	r1, r2, #4
 800ddb2:	6812      	ldr	r2, [r2, #0]
 800ddb4:	9103      	str	r1, [sp, #12]
 800ddb6:	2a00      	cmp	r2, #0
 800ddb8:	db01      	blt.n	800ddbe <_vfiprintf_r+0x11e>
 800ddba:	9207      	str	r2, [sp, #28]
 800ddbc:	e004      	b.n	800ddc8 <_vfiprintf_r+0x128>
 800ddbe:	4252      	negs	r2, r2
 800ddc0:	f043 0302 	orr.w	r3, r3, #2
 800ddc4:	9207      	str	r2, [sp, #28]
 800ddc6:	9304      	str	r3, [sp, #16]
 800ddc8:	f898 3000 	ldrb.w	r3, [r8]
 800ddcc:	2b2e      	cmp	r3, #46	; 0x2e
 800ddce:	d10e      	bne.n	800ddee <_vfiprintf_r+0x14e>
 800ddd0:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ddd4:	2b2a      	cmp	r3, #42	; 0x2a
 800ddd6:	d138      	bne.n	800de4a <_vfiprintf_r+0x1aa>
 800ddd8:	9b03      	ldr	r3, [sp, #12]
 800ddda:	1d1a      	adds	r2, r3, #4
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	9203      	str	r2, [sp, #12]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	bfb8      	it	lt
 800dde4:	f04f 33ff 	movlt.w	r3, #4294967295
 800dde8:	f108 0802 	add.w	r8, r8, #2
 800ddec:	9305      	str	r3, [sp, #20]
 800ddee:	4d33      	ldr	r5, [pc, #204]	; (800debc <_vfiprintf_r+0x21c>)
 800ddf0:	f898 1000 	ldrb.w	r1, [r8]
 800ddf4:	2203      	movs	r2, #3
 800ddf6:	4628      	mov	r0, r5
 800ddf8:	f7f2 fa2a 	bl	8000250 <memchr>
 800ddfc:	b140      	cbz	r0, 800de10 <_vfiprintf_r+0x170>
 800ddfe:	2340      	movs	r3, #64	; 0x40
 800de00:	1b40      	subs	r0, r0, r5
 800de02:	fa03 f000 	lsl.w	r0, r3, r0
 800de06:	9b04      	ldr	r3, [sp, #16]
 800de08:	4303      	orrs	r3, r0
 800de0a:	f108 0801 	add.w	r8, r8, #1
 800de0e:	9304      	str	r3, [sp, #16]
 800de10:	f898 1000 	ldrb.w	r1, [r8]
 800de14:	482a      	ldr	r0, [pc, #168]	; (800dec0 <_vfiprintf_r+0x220>)
 800de16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de1a:	2206      	movs	r2, #6
 800de1c:	f108 0701 	add.w	r7, r8, #1
 800de20:	f7f2 fa16 	bl	8000250 <memchr>
 800de24:	2800      	cmp	r0, #0
 800de26:	d037      	beq.n	800de98 <_vfiprintf_r+0x1f8>
 800de28:	4b26      	ldr	r3, [pc, #152]	; (800dec4 <_vfiprintf_r+0x224>)
 800de2a:	bb1b      	cbnz	r3, 800de74 <_vfiprintf_r+0x1d4>
 800de2c:	9b03      	ldr	r3, [sp, #12]
 800de2e:	3307      	adds	r3, #7
 800de30:	f023 0307 	bic.w	r3, r3, #7
 800de34:	3308      	adds	r3, #8
 800de36:	9303      	str	r3, [sp, #12]
 800de38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de3a:	444b      	add	r3, r9
 800de3c:	9309      	str	r3, [sp, #36]	; 0x24
 800de3e:	e750      	b.n	800dce2 <_vfiprintf_r+0x42>
 800de40:	fb05 3202 	mla	r2, r5, r2, r3
 800de44:	2001      	movs	r0, #1
 800de46:	4688      	mov	r8, r1
 800de48:	e78a      	b.n	800dd60 <_vfiprintf_r+0xc0>
 800de4a:	2300      	movs	r3, #0
 800de4c:	f108 0801 	add.w	r8, r8, #1
 800de50:	9305      	str	r3, [sp, #20]
 800de52:	4619      	mov	r1, r3
 800de54:	250a      	movs	r5, #10
 800de56:	4640      	mov	r0, r8
 800de58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de5c:	3a30      	subs	r2, #48	; 0x30
 800de5e:	2a09      	cmp	r2, #9
 800de60:	d903      	bls.n	800de6a <_vfiprintf_r+0x1ca>
 800de62:	2b00      	cmp	r3, #0
 800de64:	d0c3      	beq.n	800ddee <_vfiprintf_r+0x14e>
 800de66:	9105      	str	r1, [sp, #20]
 800de68:	e7c1      	b.n	800ddee <_vfiprintf_r+0x14e>
 800de6a:	fb05 2101 	mla	r1, r5, r1, r2
 800de6e:	2301      	movs	r3, #1
 800de70:	4680      	mov	r8, r0
 800de72:	e7f0      	b.n	800de56 <_vfiprintf_r+0x1b6>
 800de74:	ab03      	add	r3, sp, #12
 800de76:	9300      	str	r3, [sp, #0]
 800de78:	4622      	mov	r2, r4
 800de7a:	4b13      	ldr	r3, [pc, #76]	; (800dec8 <_vfiprintf_r+0x228>)
 800de7c:	a904      	add	r1, sp, #16
 800de7e:	4630      	mov	r0, r6
 800de80:	f7fd fffa 	bl	800be78 <_printf_float>
 800de84:	f1b0 3fff 	cmp.w	r0, #4294967295
 800de88:	4681      	mov	r9, r0
 800de8a:	d1d5      	bne.n	800de38 <_vfiprintf_r+0x198>
 800de8c:	89a3      	ldrh	r3, [r4, #12]
 800de8e:	065b      	lsls	r3, r3, #25
 800de90:	f53f af7e 	bmi.w	800dd90 <_vfiprintf_r+0xf0>
 800de94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de96:	e77d      	b.n	800dd94 <_vfiprintf_r+0xf4>
 800de98:	ab03      	add	r3, sp, #12
 800de9a:	9300      	str	r3, [sp, #0]
 800de9c:	4622      	mov	r2, r4
 800de9e:	4b0a      	ldr	r3, [pc, #40]	; (800dec8 <_vfiprintf_r+0x228>)
 800dea0:	a904      	add	r1, sp, #16
 800dea2:	4630      	mov	r0, r6
 800dea4:	f7fe fa8a 	bl	800c3bc <_printf_i>
 800dea8:	e7ec      	b.n	800de84 <_vfiprintf_r+0x1e4>
 800deaa:	bf00      	nop
 800deac:	0800e790 	.word	0x0800e790
 800deb0:	0800e8cc 	.word	0x0800e8cc
 800deb4:	0800e7b0 	.word	0x0800e7b0
 800deb8:	0800e770 	.word	0x0800e770
 800debc:	0800e8d2 	.word	0x0800e8d2
 800dec0:	0800e8d6 	.word	0x0800e8d6
 800dec4:	0800be79 	.word	0x0800be79
 800dec8:	0800dc7b 	.word	0x0800dc7b

0800decc <__sread>:
 800decc:	b510      	push	{r4, lr}
 800dece:	460c      	mov	r4, r1
 800ded0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ded4:	f000 fa98 	bl	800e408 <_read_r>
 800ded8:	2800      	cmp	r0, #0
 800deda:	bfab      	itete	ge
 800dedc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dede:	89a3      	ldrhlt	r3, [r4, #12]
 800dee0:	181b      	addge	r3, r3, r0
 800dee2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dee6:	bfac      	ite	ge
 800dee8:	6563      	strge	r3, [r4, #84]	; 0x54
 800deea:	81a3      	strhlt	r3, [r4, #12]
 800deec:	bd10      	pop	{r4, pc}

0800deee <__swrite>:
 800deee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800def2:	461f      	mov	r7, r3
 800def4:	898b      	ldrh	r3, [r1, #12]
 800def6:	05db      	lsls	r3, r3, #23
 800def8:	4605      	mov	r5, r0
 800defa:	460c      	mov	r4, r1
 800defc:	4616      	mov	r6, r2
 800defe:	d505      	bpl.n	800df0c <__swrite+0x1e>
 800df00:	2302      	movs	r3, #2
 800df02:	2200      	movs	r2, #0
 800df04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df08:	f000 f9b6 	bl	800e278 <_lseek_r>
 800df0c:	89a3      	ldrh	r3, [r4, #12]
 800df0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800df16:	81a3      	strh	r3, [r4, #12]
 800df18:	4632      	mov	r2, r6
 800df1a:	463b      	mov	r3, r7
 800df1c:	4628      	mov	r0, r5
 800df1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df22:	f000 b869 	b.w	800dff8 <_write_r>

0800df26 <__sseek>:
 800df26:	b510      	push	{r4, lr}
 800df28:	460c      	mov	r4, r1
 800df2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df2e:	f000 f9a3 	bl	800e278 <_lseek_r>
 800df32:	1c43      	adds	r3, r0, #1
 800df34:	89a3      	ldrh	r3, [r4, #12]
 800df36:	bf15      	itete	ne
 800df38:	6560      	strne	r0, [r4, #84]	; 0x54
 800df3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800df3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800df42:	81a3      	strheq	r3, [r4, #12]
 800df44:	bf18      	it	ne
 800df46:	81a3      	strhne	r3, [r4, #12]
 800df48:	bd10      	pop	{r4, pc}

0800df4a <__sclose>:
 800df4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df4e:	f000 b8d3 	b.w	800e0f8 <_close_r>
	...

0800df54 <__swbuf_r>:
 800df54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df56:	460e      	mov	r6, r1
 800df58:	4614      	mov	r4, r2
 800df5a:	4605      	mov	r5, r0
 800df5c:	b118      	cbz	r0, 800df66 <__swbuf_r+0x12>
 800df5e:	6983      	ldr	r3, [r0, #24]
 800df60:	b90b      	cbnz	r3, 800df66 <__swbuf_r+0x12>
 800df62:	f7ff f99d 	bl	800d2a0 <__sinit>
 800df66:	4b21      	ldr	r3, [pc, #132]	; (800dfec <__swbuf_r+0x98>)
 800df68:	429c      	cmp	r4, r3
 800df6a:	d12a      	bne.n	800dfc2 <__swbuf_r+0x6e>
 800df6c:	686c      	ldr	r4, [r5, #4]
 800df6e:	69a3      	ldr	r3, [r4, #24]
 800df70:	60a3      	str	r3, [r4, #8]
 800df72:	89a3      	ldrh	r3, [r4, #12]
 800df74:	071a      	lsls	r2, r3, #28
 800df76:	d52e      	bpl.n	800dfd6 <__swbuf_r+0x82>
 800df78:	6923      	ldr	r3, [r4, #16]
 800df7a:	b363      	cbz	r3, 800dfd6 <__swbuf_r+0x82>
 800df7c:	6923      	ldr	r3, [r4, #16]
 800df7e:	6820      	ldr	r0, [r4, #0]
 800df80:	1ac0      	subs	r0, r0, r3
 800df82:	6963      	ldr	r3, [r4, #20]
 800df84:	b2f6      	uxtb	r6, r6
 800df86:	4283      	cmp	r3, r0
 800df88:	4637      	mov	r7, r6
 800df8a:	dc04      	bgt.n	800df96 <__swbuf_r+0x42>
 800df8c:	4621      	mov	r1, r4
 800df8e:	4628      	mov	r0, r5
 800df90:	f000 f948 	bl	800e224 <_fflush_r>
 800df94:	bb28      	cbnz	r0, 800dfe2 <__swbuf_r+0x8e>
 800df96:	68a3      	ldr	r3, [r4, #8]
 800df98:	3b01      	subs	r3, #1
 800df9a:	60a3      	str	r3, [r4, #8]
 800df9c:	6823      	ldr	r3, [r4, #0]
 800df9e:	1c5a      	adds	r2, r3, #1
 800dfa0:	6022      	str	r2, [r4, #0]
 800dfa2:	701e      	strb	r6, [r3, #0]
 800dfa4:	6963      	ldr	r3, [r4, #20]
 800dfa6:	3001      	adds	r0, #1
 800dfa8:	4283      	cmp	r3, r0
 800dfaa:	d004      	beq.n	800dfb6 <__swbuf_r+0x62>
 800dfac:	89a3      	ldrh	r3, [r4, #12]
 800dfae:	07db      	lsls	r3, r3, #31
 800dfb0:	d519      	bpl.n	800dfe6 <__swbuf_r+0x92>
 800dfb2:	2e0a      	cmp	r6, #10
 800dfb4:	d117      	bne.n	800dfe6 <__swbuf_r+0x92>
 800dfb6:	4621      	mov	r1, r4
 800dfb8:	4628      	mov	r0, r5
 800dfba:	f000 f933 	bl	800e224 <_fflush_r>
 800dfbe:	b190      	cbz	r0, 800dfe6 <__swbuf_r+0x92>
 800dfc0:	e00f      	b.n	800dfe2 <__swbuf_r+0x8e>
 800dfc2:	4b0b      	ldr	r3, [pc, #44]	; (800dff0 <__swbuf_r+0x9c>)
 800dfc4:	429c      	cmp	r4, r3
 800dfc6:	d101      	bne.n	800dfcc <__swbuf_r+0x78>
 800dfc8:	68ac      	ldr	r4, [r5, #8]
 800dfca:	e7d0      	b.n	800df6e <__swbuf_r+0x1a>
 800dfcc:	4b09      	ldr	r3, [pc, #36]	; (800dff4 <__swbuf_r+0xa0>)
 800dfce:	429c      	cmp	r4, r3
 800dfd0:	bf08      	it	eq
 800dfd2:	68ec      	ldreq	r4, [r5, #12]
 800dfd4:	e7cb      	b.n	800df6e <__swbuf_r+0x1a>
 800dfd6:	4621      	mov	r1, r4
 800dfd8:	4628      	mov	r0, r5
 800dfda:	f000 f81f 	bl	800e01c <__swsetup_r>
 800dfde:	2800      	cmp	r0, #0
 800dfe0:	d0cc      	beq.n	800df7c <__swbuf_r+0x28>
 800dfe2:	f04f 37ff 	mov.w	r7, #4294967295
 800dfe6:	4638      	mov	r0, r7
 800dfe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfea:	bf00      	nop
 800dfec:	0800e790 	.word	0x0800e790
 800dff0:	0800e7b0 	.word	0x0800e7b0
 800dff4:	0800e770 	.word	0x0800e770

0800dff8 <_write_r>:
 800dff8:	b538      	push	{r3, r4, r5, lr}
 800dffa:	4c07      	ldr	r4, [pc, #28]	; (800e018 <_write_r+0x20>)
 800dffc:	4605      	mov	r5, r0
 800dffe:	4608      	mov	r0, r1
 800e000:	4611      	mov	r1, r2
 800e002:	2200      	movs	r2, #0
 800e004:	6022      	str	r2, [r4, #0]
 800e006:	461a      	mov	r2, r3
 800e008:	f7f4 ff6f 	bl	8002eea <_write>
 800e00c:	1c43      	adds	r3, r0, #1
 800e00e:	d102      	bne.n	800e016 <_write_r+0x1e>
 800e010:	6823      	ldr	r3, [r4, #0]
 800e012:	b103      	cbz	r3, 800e016 <_write_r+0x1e>
 800e014:	602b      	str	r3, [r5, #0]
 800e016:	bd38      	pop	{r3, r4, r5, pc}
 800e018:	20004a20 	.word	0x20004a20

0800e01c <__swsetup_r>:
 800e01c:	4b32      	ldr	r3, [pc, #200]	; (800e0e8 <__swsetup_r+0xcc>)
 800e01e:	b570      	push	{r4, r5, r6, lr}
 800e020:	681d      	ldr	r5, [r3, #0]
 800e022:	4606      	mov	r6, r0
 800e024:	460c      	mov	r4, r1
 800e026:	b125      	cbz	r5, 800e032 <__swsetup_r+0x16>
 800e028:	69ab      	ldr	r3, [r5, #24]
 800e02a:	b913      	cbnz	r3, 800e032 <__swsetup_r+0x16>
 800e02c:	4628      	mov	r0, r5
 800e02e:	f7ff f937 	bl	800d2a0 <__sinit>
 800e032:	4b2e      	ldr	r3, [pc, #184]	; (800e0ec <__swsetup_r+0xd0>)
 800e034:	429c      	cmp	r4, r3
 800e036:	d10f      	bne.n	800e058 <__swsetup_r+0x3c>
 800e038:	686c      	ldr	r4, [r5, #4]
 800e03a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e03e:	b29a      	uxth	r2, r3
 800e040:	0715      	lsls	r5, r2, #28
 800e042:	d42c      	bmi.n	800e09e <__swsetup_r+0x82>
 800e044:	06d0      	lsls	r0, r2, #27
 800e046:	d411      	bmi.n	800e06c <__swsetup_r+0x50>
 800e048:	2209      	movs	r2, #9
 800e04a:	6032      	str	r2, [r6, #0]
 800e04c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e050:	81a3      	strh	r3, [r4, #12]
 800e052:	f04f 30ff 	mov.w	r0, #4294967295
 800e056:	e03e      	b.n	800e0d6 <__swsetup_r+0xba>
 800e058:	4b25      	ldr	r3, [pc, #148]	; (800e0f0 <__swsetup_r+0xd4>)
 800e05a:	429c      	cmp	r4, r3
 800e05c:	d101      	bne.n	800e062 <__swsetup_r+0x46>
 800e05e:	68ac      	ldr	r4, [r5, #8]
 800e060:	e7eb      	b.n	800e03a <__swsetup_r+0x1e>
 800e062:	4b24      	ldr	r3, [pc, #144]	; (800e0f4 <__swsetup_r+0xd8>)
 800e064:	429c      	cmp	r4, r3
 800e066:	bf08      	it	eq
 800e068:	68ec      	ldreq	r4, [r5, #12]
 800e06a:	e7e6      	b.n	800e03a <__swsetup_r+0x1e>
 800e06c:	0751      	lsls	r1, r2, #29
 800e06e:	d512      	bpl.n	800e096 <__swsetup_r+0x7a>
 800e070:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e072:	b141      	cbz	r1, 800e086 <__swsetup_r+0x6a>
 800e074:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e078:	4299      	cmp	r1, r3
 800e07a:	d002      	beq.n	800e082 <__swsetup_r+0x66>
 800e07c:	4630      	mov	r0, r6
 800e07e:	f7fd fdcb 	bl	800bc18 <_free_r>
 800e082:	2300      	movs	r3, #0
 800e084:	6363      	str	r3, [r4, #52]	; 0x34
 800e086:	89a3      	ldrh	r3, [r4, #12]
 800e088:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e08c:	81a3      	strh	r3, [r4, #12]
 800e08e:	2300      	movs	r3, #0
 800e090:	6063      	str	r3, [r4, #4]
 800e092:	6923      	ldr	r3, [r4, #16]
 800e094:	6023      	str	r3, [r4, #0]
 800e096:	89a3      	ldrh	r3, [r4, #12]
 800e098:	f043 0308 	orr.w	r3, r3, #8
 800e09c:	81a3      	strh	r3, [r4, #12]
 800e09e:	6923      	ldr	r3, [r4, #16]
 800e0a0:	b94b      	cbnz	r3, 800e0b6 <__swsetup_r+0x9a>
 800e0a2:	89a3      	ldrh	r3, [r4, #12]
 800e0a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e0a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e0ac:	d003      	beq.n	800e0b6 <__swsetup_r+0x9a>
 800e0ae:	4621      	mov	r1, r4
 800e0b0:	4630      	mov	r0, r6
 800e0b2:	f000 f917 	bl	800e2e4 <__smakebuf_r>
 800e0b6:	89a2      	ldrh	r2, [r4, #12]
 800e0b8:	f012 0301 	ands.w	r3, r2, #1
 800e0bc:	d00c      	beq.n	800e0d8 <__swsetup_r+0xbc>
 800e0be:	2300      	movs	r3, #0
 800e0c0:	60a3      	str	r3, [r4, #8]
 800e0c2:	6963      	ldr	r3, [r4, #20]
 800e0c4:	425b      	negs	r3, r3
 800e0c6:	61a3      	str	r3, [r4, #24]
 800e0c8:	6923      	ldr	r3, [r4, #16]
 800e0ca:	b953      	cbnz	r3, 800e0e2 <__swsetup_r+0xc6>
 800e0cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0d0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800e0d4:	d1ba      	bne.n	800e04c <__swsetup_r+0x30>
 800e0d6:	bd70      	pop	{r4, r5, r6, pc}
 800e0d8:	0792      	lsls	r2, r2, #30
 800e0da:	bf58      	it	pl
 800e0dc:	6963      	ldrpl	r3, [r4, #20]
 800e0de:	60a3      	str	r3, [r4, #8]
 800e0e0:	e7f2      	b.n	800e0c8 <__swsetup_r+0xac>
 800e0e2:	2000      	movs	r0, #0
 800e0e4:	e7f7      	b.n	800e0d6 <__swsetup_r+0xba>
 800e0e6:	bf00      	nop
 800e0e8:	20000014 	.word	0x20000014
 800e0ec:	0800e790 	.word	0x0800e790
 800e0f0:	0800e7b0 	.word	0x0800e7b0
 800e0f4:	0800e770 	.word	0x0800e770

0800e0f8 <_close_r>:
 800e0f8:	b538      	push	{r3, r4, r5, lr}
 800e0fa:	4c06      	ldr	r4, [pc, #24]	; (800e114 <_close_r+0x1c>)
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	4605      	mov	r5, r0
 800e100:	4608      	mov	r0, r1
 800e102:	6023      	str	r3, [r4, #0]
 800e104:	f7f4 ff0d 	bl	8002f22 <_close>
 800e108:	1c43      	adds	r3, r0, #1
 800e10a:	d102      	bne.n	800e112 <_close_r+0x1a>
 800e10c:	6823      	ldr	r3, [r4, #0]
 800e10e:	b103      	cbz	r3, 800e112 <_close_r+0x1a>
 800e110:	602b      	str	r3, [r5, #0]
 800e112:	bd38      	pop	{r3, r4, r5, pc}
 800e114:	20004a20 	.word	0x20004a20

0800e118 <__sflush_r>:
 800e118:	898a      	ldrh	r2, [r1, #12]
 800e11a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e11e:	4605      	mov	r5, r0
 800e120:	0710      	lsls	r0, r2, #28
 800e122:	460c      	mov	r4, r1
 800e124:	d458      	bmi.n	800e1d8 <__sflush_r+0xc0>
 800e126:	684b      	ldr	r3, [r1, #4]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	dc05      	bgt.n	800e138 <__sflush_r+0x20>
 800e12c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e12e:	2b00      	cmp	r3, #0
 800e130:	dc02      	bgt.n	800e138 <__sflush_r+0x20>
 800e132:	2000      	movs	r0, #0
 800e134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e138:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e13a:	2e00      	cmp	r6, #0
 800e13c:	d0f9      	beq.n	800e132 <__sflush_r+0x1a>
 800e13e:	2300      	movs	r3, #0
 800e140:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e144:	682f      	ldr	r7, [r5, #0]
 800e146:	6a21      	ldr	r1, [r4, #32]
 800e148:	602b      	str	r3, [r5, #0]
 800e14a:	d032      	beq.n	800e1b2 <__sflush_r+0x9a>
 800e14c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e14e:	89a3      	ldrh	r3, [r4, #12]
 800e150:	075a      	lsls	r2, r3, #29
 800e152:	d505      	bpl.n	800e160 <__sflush_r+0x48>
 800e154:	6863      	ldr	r3, [r4, #4]
 800e156:	1ac0      	subs	r0, r0, r3
 800e158:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e15a:	b10b      	cbz	r3, 800e160 <__sflush_r+0x48>
 800e15c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e15e:	1ac0      	subs	r0, r0, r3
 800e160:	2300      	movs	r3, #0
 800e162:	4602      	mov	r2, r0
 800e164:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e166:	6a21      	ldr	r1, [r4, #32]
 800e168:	4628      	mov	r0, r5
 800e16a:	47b0      	blx	r6
 800e16c:	1c43      	adds	r3, r0, #1
 800e16e:	89a3      	ldrh	r3, [r4, #12]
 800e170:	d106      	bne.n	800e180 <__sflush_r+0x68>
 800e172:	6829      	ldr	r1, [r5, #0]
 800e174:	291d      	cmp	r1, #29
 800e176:	d848      	bhi.n	800e20a <__sflush_r+0xf2>
 800e178:	4a29      	ldr	r2, [pc, #164]	; (800e220 <__sflush_r+0x108>)
 800e17a:	40ca      	lsrs	r2, r1
 800e17c:	07d6      	lsls	r6, r2, #31
 800e17e:	d544      	bpl.n	800e20a <__sflush_r+0xf2>
 800e180:	2200      	movs	r2, #0
 800e182:	6062      	str	r2, [r4, #4]
 800e184:	04d9      	lsls	r1, r3, #19
 800e186:	6922      	ldr	r2, [r4, #16]
 800e188:	6022      	str	r2, [r4, #0]
 800e18a:	d504      	bpl.n	800e196 <__sflush_r+0x7e>
 800e18c:	1c42      	adds	r2, r0, #1
 800e18e:	d101      	bne.n	800e194 <__sflush_r+0x7c>
 800e190:	682b      	ldr	r3, [r5, #0]
 800e192:	b903      	cbnz	r3, 800e196 <__sflush_r+0x7e>
 800e194:	6560      	str	r0, [r4, #84]	; 0x54
 800e196:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e198:	602f      	str	r7, [r5, #0]
 800e19a:	2900      	cmp	r1, #0
 800e19c:	d0c9      	beq.n	800e132 <__sflush_r+0x1a>
 800e19e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e1a2:	4299      	cmp	r1, r3
 800e1a4:	d002      	beq.n	800e1ac <__sflush_r+0x94>
 800e1a6:	4628      	mov	r0, r5
 800e1a8:	f7fd fd36 	bl	800bc18 <_free_r>
 800e1ac:	2000      	movs	r0, #0
 800e1ae:	6360      	str	r0, [r4, #52]	; 0x34
 800e1b0:	e7c0      	b.n	800e134 <__sflush_r+0x1c>
 800e1b2:	2301      	movs	r3, #1
 800e1b4:	4628      	mov	r0, r5
 800e1b6:	47b0      	blx	r6
 800e1b8:	1c41      	adds	r1, r0, #1
 800e1ba:	d1c8      	bne.n	800e14e <__sflush_r+0x36>
 800e1bc:	682b      	ldr	r3, [r5, #0]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d0c5      	beq.n	800e14e <__sflush_r+0x36>
 800e1c2:	2b1d      	cmp	r3, #29
 800e1c4:	d001      	beq.n	800e1ca <__sflush_r+0xb2>
 800e1c6:	2b16      	cmp	r3, #22
 800e1c8:	d101      	bne.n	800e1ce <__sflush_r+0xb6>
 800e1ca:	602f      	str	r7, [r5, #0]
 800e1cc:	e7b1      	b.n	800e132 <__sflush_r+0x1a>
 800e1ce:	89a3      	ldrh	r3, [r4, #12]
 800e1d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1d4:	81a3      	strh	r3, [r4, #12]
 800e1d6:	e7ad      	b.n	800e134 <__sflush_r+0x1c>
 800e1d8:	690f      	ldr	r7, [r1, #16]
 800e1da:	2f00      	cmp	r7, #0
 800e1dc:	d0a9      	beq.n	800e132 <__sflush_r+0x1a>
 800e1de:	0793      	lsls	r3, r2, #30
 800e1e0:	680e      	ldr	r6, [r1, #0]
 800e1e2:	bf08      	it	eq
 800e1e4:	694b      	ldreq	r3, [r1, #20]
 800e1e6:	600f      	str	r7, [r1, #0]
 800e1e8:	bf18      	it	ne
 800e1ea:	2300      	movne	r3, #0
 800e1ec:	eba6 0807 	sub.w	r8, r6, r7
 800e1f0:	608b      	str	r3, [r1, #8]
 800e1f2:	f1b8 0f00 	cmp.w	r8, #0
 800e1f6:	dd9c      	ble.n	800e132 <__sflush_r+0x1a>
 800e1f8:	4643      	mov	r3, r8
 800e1fa:	463a      	mov	r2, r7
 800e1fc:	6a21      	ldr	r1, [r4, #32]
 800e1fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e200:	4628      	mov	r0, r5
 800e202:	47b0      	blx	r6
 800e204:	2800      	cmp	r0, #0
 800e206:	dc06      	bgt.n	800e216 <__sflush_r+0xfe>
 800e208:	89a3      	ldrh	r3, [r4, #12]
 800e20a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e20e:	81a3      	strh	r3, [r4, #12]
 800e210:	f04f 30ff 	mov.w	r0, #4294967295
 800e214:	e78e      	b.n	800e134 <__sflush_r+0x1c>
 800e216:	4407      	add	r7, r0
 800e218:	eba8 0800 	sub.w	r8, r8, r0
 800e21c:	e7e9      	b.n	800e1f2 <__sflush_r+0xda>
 800e21e:	bf00      	nop
 800e220:	20400001 	.word	0x20400001

0800e224 <_fflush_r>:
 800e224:	b538      	push	{r3, r4, r5, lr}
 800e226:	690b      	ldr	r3, [r1, #16]
 800e228:	4605      	mov	r5, r0
 800e22a:	460c      	mov	r4, r1
 800e22c:	b1db      	cbz	r3, 800e266 <_fflush_r+0x42>
 800e22e:	b118      	cbz	r0, 800e238 <_fflush_r+0x14>
 800e230:	6983      	ldr	r3, [r0, #24]
 800e232:	b90b      	cbnz	r3, 800e238 <_fflush_r+0x14>
 800e234:	f7ff f834 	bl	800d2a0 <__sinit>
 800e238:	4b0c      	ldr	r3, [pc, #48]	; (800e26c <_fflush_r+0x48>)
 800e23a:	429c      	cmp	r4, r3
 800e23c:	d109      	bne.n	800e252 <_fflush_r+0x2e>
 800e23e:	686c      	ldr	r4, [r5, #4]
 800e240:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e244:	b17b      	cbz	r3, 800e266 <_fflush_r+0x42>
 800e246:	4621      	mov	r1, r4
 800e248:	4628      	mov	r0, r5
 800e24a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e24e:	f7ff bf63 	b.w	800e118 <__sflush_r>
 800e252:	4b07      	ldr	r3, [pc, #28]	; (800e270 <_fflush_r+0x4c>)
 800e254:	429c      	cmp	r4, r3
 800e256:	d101      	bne.n	800e25c <_fflush_r+0x38>
 800e258:	68ac      	ldr	r4, [r5, #8]
 800e25a:	e7f1      	b.n	800e240 <_fflush_r+0x1c>
 800e25c:	4b05      	ldr	r3, [pc, #20]	; (800e274 <_fflush_r+0x50>)
 800e25e:	429c      	cmp	r4, r3
 800e260:	bf08      	it	eq
 800e262:	68ec      	ldreq	r4, [r5, #12]
 800e264:	e7ec      	b.n	800e240 <_fflush_r+0x1c>
 800e266:	2000      	movs	r0, #0
 800e268:	bd38      	pop	{r3, r4, r5, pc}
 800e26a:	bf00      	nop
 800e26c:	0800e790 	.word	0x0800e790
 800e270:	0800e7b0 	.word	0x0800e7b0
 800e274:	0800e770 	.word	0x0800e770

0800e278 <_lseek_r>:
 800e278:	b538      	push	{r3, r4, r5, lr}
 800e27a:	4c07      	ldr	r4, [pc, #28]	; (800e298 <_lseek_r+0x20>)
 800e27c:	4605      	mov	r5, r0
 800e27e:	4608      	mov	r0, r1
 800e280:	4611      	mov	r1, r2
 800e282:	2200      	movs	r2, #0
 800e284:	6022      	str	r2, [r4, #0]
 800e286:	461a      	mov	r2, r3
 800e288:	f7f4 fe72 	bl	8002f70 <_lseek>
 800e28c:	1c43      	adds	r3, r0, #1
 800e28e:	d102      	bne.n	800e296 <_lseek_r+0x1e>
 800e290:	6823      	ldr	r3, [r4, #0]
 800e292:	b103      	cbz	r3, 800e296 <_lseek_r+0x1e>
 800e294:	602b      	str	r3, [r5, #0]
 800e296:	bd38      	pop	{r3, r4, r5, pc}
 800e298:	20004a20 	.word	0x20004a20

0800e29c <__swhatbuf_r>:
 800e29c:	b570      	push	{r4, r5, r6, lr}
 800e29e:	460e      	mov	r6, r1
 800e2a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2a4:	2900      	cmp	r1, #0
 800e2a6:	b096      	sub	sp, #88	; 0x58
 800e2a8:	4614      	mov	r4, r2
 800e2aa:	461d      	mov	r5, r3
 800e2ac:	da07      	bge.n	800e2be <__swhatbuf_r+0x22>
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	602b      	str	r3, [r5, #0]
 800e2b2:	89b3      	ldrh	r3, [r6, #12]
 800e2b4:	061a      	lsls	r2, r3, #24
 800e2b6:	d410      	bmi.n	800e2da <__swhatbuf_r+0x3e>
 800e2b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2bc:	e00e      	b.n	800e2dc <__swhatbuf_r+0x40>
 800e2be:	466a      	mov	r2, sp
 800e2c0:	f000 f8c2 	bl	800e448 <_fstat_r>
 800e2c4:	2800      	cmp	r0, #0
 800e2c6:	dbf2      	blt.n	800e2ae <__swhatbuf_r+0x12>
 800e2c8:	9a01      	ldr	r2, [sp, #4]
 800e2ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e2ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e2d2:	425a      	negs	r2, r3
 800e2d4:	415a      	adcs	r2, r3
 800e2d6:	602a      	str	r2, [r5, #0]
 800e2d8:	e7ee      	b.n	800e2b8 <__swhatbuf_r+0x1c>
 800e2da:	2340      	movs	r3, #64	; 0x40
 800e2dc:	2000      	movs	r0, #0
 800e2de:	6023      	str	r3, [r4, #0]
 800e2e0:	b016      	add	sp, #88	; 0x58
 800e2e2:	bd70      	pop	{r4, r5, r6, pc}

0800e2e4 <__smakebuf_r>:
 800e2e4:	898b      	ldrh	r3, [r1, #12]
 800e2e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e2e8:	079d      	lsls	r5, r3, #30
 800e2ea:	4606      	mov	r6, r0
 800e2ec:	460c      	mov	r4, r1
 800e2ee:	d507      	bpl.n	800e300 <__smakebuf_r+0x1c>
 800e2f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e2f4:	6023      	str	r3, [r4, #0]
 800e2f6:	6123      	str	r3, [r4, #16]
 800e2f8:	2301      	movs	r3, #1
 800e2fa:	6163      	str	r3, [r4, #20]
 800e2fc:	b002      	add	sp, #8
 800e2fe:	bd70      	pop	{r4, r5, r6, pc}
 800e300:	ab01      	add	r3, sp, #4
 800e302:	466a      	mov	r2, sp
 800e304:	f7ff ffca 	bl	800e29c <__swhatbuf_r>
 800e308:	9900      	ldr	r1, [sp, #0]
 800e30a:	4605      	mov	r5, r0
 800e30c:	4630      	mov	r0, r6
 800e30e:	f7fd fcd1 	bl	800bcb4 <_malloc_r>
 800e312:	b948      	cbnz	r0, 800e328 <__smakebuf_r+0x44>
 800e314:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e318:	059a      	lsls	r2, r3, #22
 800e31a:	d4ef      	bmi.n	800e2fc <__smakebuf_r+0x18>
 800e31c:	f023 0303 	bic.w	r3, r3, #3
 800e320:	f043 0302 	orr.w	r3, r3, #2
 800e324:	81a3      	strh	r3, [r4, #12]
 800e326:	e7e3      	b.n	800e2f0 <__smakebuf_r+0xc>
 800e328:	4b0d      	ldr	r3, [pc, #52]	; (800e360 <__smakebuf_r+0x7c>)
 800e32a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e32c:	89a3      	ldrh	r3, [r4, #12]
 800e32e:	6020      	str	r0, [r4, #0]
 800e330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e334:	81a3      	strh	r3, [r4, #12]
 800e336:	9b00      	ldr	r3, [sp, #0]
 800e338:	6163      	str	r3, [r4, #20]
 800e33a:	9b01      	ldr	r3, [sp, #4]
 800e33c:	6120      	str	r0, [r4, #16]
 800e33e:	b15b      	cbz	r3, 800e358 <__smakebuf_r+0x74>
 800e340:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e344:	4630      	mov	r0, r6
 800e346:	f000 f891 	bl	800e46c <_isatty_r>
 800e34a:	b128      	cbz	r0, 800e358 <__smakebuf_r+0x74>
 800e34c:	89a3      	ldrh	r3, [r4, #12]
 800e34e:	f023 0303 	bic.w	r3, r3, #3
 800e352:	f043 0301 	orr.w	r3, r3, #1
 800e356:	81a3      	strh	r3, [r4, #12]
 800e358:	89a3      	ldrh	r3, [r4, #12]
 800e35a:	431d      	orrs	r5, r3
 800e35c:	81a5      	strh	r5, [r4, #12]
 800e35e:	e7cd      	b.n	800e2fc <__smakebuf_r+0x18>
 800e360:	0800d269 	.word	0x0800d269

0800e364 <__ascii_mbtowc>:
 800e364:	b082      	sub	sp, #8
 800e366:	b901      	cbnz	r1, 800e36a <__ascii_mbtowc+0x6>
 800e368:	a901      	add	r1, sp, #4
 800e36a:	b142      	cbz	r2, 800e37e <__ascii_mbtowc+0x1a>
 800e36c:	b14b      	cbz	r3, 800e382 <__ascii_mbtowc+0x1e>
 800e36e:	7813      	ldrb	r3, [r2, #0]
 800e370:	600b      	str	r3, [r1, #0]
 800e372:	7812      	ldrb	r2, [r2, #0]
 800e374:	1c10      	adds	r0, r2, #0
 800e376:	bf18      	it	ne
 800e378:	2001      	movne	r0, #1
 800e37a:	b002      	add	sp, #8
 800e37c:	4770      	bx	lr
 800e37e:	4610      	mov	r0, r2
 800e380:	e7fb      	b.n	800e37a <__ascii_mbtowc+0x16>
 800e382:	f06f 0001 	mvn.w	r0, #1
 800e386:	e7f8      	b.n	800e37a <__ascii_mbtowc+0x16>

0800e388 <memmove>:
 800e388:	4288      	cmp	r0, r1
 800e38a:	b510      	push	{r4, lr}
 800e38c:	eb01 0302 	add.w	r3, r1, r2
 800e390:	d807      	bhi.n	800e3a2 <memmove+0x1a>
 800e392:	1e42      	subs	r2, r0, #1
 800e394:	4299      	cmp	r1, r3
 800e396:	d00a      	beq.n	800e3ae <memmove+0x26>
 800e398:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e39c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e3a0:	e7f8      	b.n	800e394 <memmove+0xc>
 800e3a2:	4283      	cmp	r3, r0
 800e3a4:	d9f5      	bls.n	800e392 <memmove+0xa>
 800e3a6:	1881      	adds	r1, r0, r2
 800e3a8:	1ad2      	subs	r2, r2, r3
 800e3aa:	42d3      	cmn	r3, r2
 800e3ac:	d100      	bne.n	800e3b0 <memmove+0x28>
 800e3ae:	bd10      	pop	{r4, pc}
 800e3b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e3b4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e3b8:	e7f7      	b.n	800e3aa <memmove+0x22>

0800e3ba <_realloc_r>:
 800e3ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3bc:	4607      	mov	r7, r0
 800e3be:	4614      	mov	r4, r2
 800e3c0:	460e      	mov	r6, r1
 800e3c2:	b921      	cbnz	r1, 800e3ce <_realloc_r+0x14>
 800e3c4:	4611      	mov	r1, r2
 800e3c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e3ca:	f7fd bc73 	b.w	800bcb4 <_malloc_r>
 800e3ce:	b922      	cbnz	r2, 800e3da <_realloc_r+0x20>
 800e3d0:	f7fd fc22 	bl	800bc18 <_free_r>
 800e3d4:	4625      	mov	r5, r4
 800e3d6:	4628      	mov	r0, r5
 800e3d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3da:	f000 f857 	bl	800e48c <_malloc_usable_size_r>
 800e3de:	42a0      	cmp	r0, r4
 800e3e0:	d20f      	bcs.n	800e402 <_realloc_r+0x48>
 800e3e2:	4621      	mov	r1, r4
 800e3e4:	4638      	mov	r0, r7
 800e3e6:	f7fd fc65 	bl	800bcb4 <_malloc_r>
 800e3ea:	4605      	mov	r5, r0
 800e3ec:	2800      	cmp	r0, #0
 800e3ee:	d0f2      	beq.n	800e3d6 <_realloc_r+0x1c>
 800e3f0:	4631      	mov	r1, r6
 800e3f2:	4622      	mov	r2, r4
 800e3f4:	f7fd fbfc 	bl	800bbf0 <memcpy>
 800e3f8:	4631      	mov	r1, r6
 800e3fa:	4638      	mov	r0, r7
 800e3fc:	f7fd fc0c 	bl	800bc18 <_free_r>
 800e400:	e7e9      	b.n	800e3d6 <_realloc_r+0x1c>
 800e402:	4635      	mov	r5, r6
 800e404:	e7e7      	b.n	800e3d6 <_realloc_r+0x1c>
	...

0800e408 <_read_r>:
 800e408:	b538      	push	{r3, r4, r5, lr}
 800e40a:	4c07      	ldr	r4, [pc, #28]	; (800e428 <_read_r+0x20>)
 800e40c:	4605      	mov	r5, r0
 800e40e:	4608      	mov	r0, r1
 800e410:	4611      	mov	r1, r2
 800e412:	2200      	movs	r2, #0
 800e414:	6022      	str	r2, [r4, #0]
 800e416:	461a      	mov	r2, r3
 800e418:	f7f4 fd4a 	bl	8002eb0 <_read>
 800e41c:	1c43      	adds	r3, r0, #1
 800e41e:	d102      	bne.n	800e426 <_read_r+0x1e>
 800e420:	6823      	ldr	r3, [r4, #0]
 800e422:	b103      	cbz	r3, 800e426 <_read_r+0x1e>
 800e424:	602b      	str	r3, [r5, #0]
 800e426:	bd38      	pop	{r3, r4, r5, pc}
 800e428:	20004a20 	.word	0x20004a20

0800e42c <__ascii_wctomb>:
 800e42c:	b149      	cbz	r1, 800e442 <__ascii_wctomb+0x16>
 800e42e:	2aff      	cmp	r2, #255	; 0xff
 800e430:	bf85      	ittet	hi
 800e432:	238a      	movhi	r3, #138	; 0x8a
 800e434:	6003      	strhi	r3, [r0, #0]
 800e436:	700a      	strbls	r2, [r1, #0]
 800e438:	f04f 30ff 	movhi.w	r0, #4294967295
 800e43c:	bf98      	it	ls
 800e43e:	2001      	movls	r0, #1
 800e440:	4770      	bx	lr
 800e442:	4608      	mov	r0, r1
 800e444:	4770      	bx	lr
	...

0800e448 <_fstat_r>:
 800e448:	b538      	push	{r3, r4, r5, lr}
 800e44a:	4c07      	ldr	r4, [pc, #28]	; (800e468 <_fstat_r+0x20>)
 800e44c:	2300      	movs	r3, #0
 800e44e:	4605      	mov	r5, r0
 800e450:	4608      	mov	r0, r1
 800e452:	4611      	mov	r1, r2
 800e454:	6023      	str	r3, [r4, #0]
 800e456:	f7f4 fd70 	bl	8002f3a <_fstat>
 800e45a:	1c43      	adds	r3, r0, #1
 800e45c:	d102      	bne.n	800e464 <_fstat_r+0x1c>
 800e45e:	6823      	ldr	r3, [r4, #0]
 800e460:	b103      	cbz	r3, 800e464 <_fstat_r+0x1c>
 800e462:	602b      	str	r3, [r5, #0]
 800e464:	bd38      	pop	{r3, r4, r5, pc}
 800e466:	bf00      	nop
 800e468:	20004a20 	.word	0x20004a20

0800e46c <_isatty_r>:
 800e46c:	b538      	push	{r3, r4, r5, lr}
 800e46e:	4c06      	ldr	r4, [pc, #24]	; (800e488 <_isatty_r+0x1c>)
 800e470:	2300      	movs	r3, #0
 800e472:	4605      	mov	r5, r0
 800e474:	4608      	mov	r0, r1
 800e476:	6023      	str	r3, [r4, #0]
 800e478:	f7f4 fd6f 	bl	8002f5a <_isatty>
 800e47c:	1c43      	adds	r3, r0, #1
 800e47e:	d102      	bne.n	800e486 <_isatty_r+0x1a>
 800e480:	6823      	ldr	r3, [r4, #0]
 800e482:	b103      	cbz	r3, 800e486 <_isatty_r+0x1a>
 800e484:	602b      	str	r3, [r5, #0]
 800e486:	bd38      	pop	{r3, r4, r5, pc}
 800e488:	20004a20 	.word	0x20004a20

0800e48c <_malloc_usable_size_r>:
 800e48c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e490:	1f18      	subs	r0, r3, #4
 800e492:	2b00      	cmp	r3, #0
 800e494:	bfbc      	itt	lt
 800e496:	580b      	ldrlt	r3, [r1, r0]
 800e498:	18c0      	addlt	r0, r0, r3
 800e49a:	4770      	bx	lr

0800e49c <_init>:
 800e49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e49e:	bf00      	nop
 800e4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4a2:	bc08      	pop	{r3}
 800e4a4:	469e      	mov	lr, r3
 800e4a6:	4770      	bx	lr

0800e4a8 <_fini>:
 800e4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4aa:	bf00      	nop
 800e4ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4ae:	bc08      	pop	{r3}
 800e4b0:	469e      	mov	lr, r3
 800e4b2:	4770      	bx	lr
